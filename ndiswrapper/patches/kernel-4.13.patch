diff -Naur orig/driver/ndis.c patched/driver/ndis.c
--- orig/driver/ndis.c	2016-10-09 17:44:05.000000000 +0200
+++ patched/driver/ndis.c	2018-04-19 17:06:16.131787755 +0200
@@ -2258,7 +2258,9 @@
 			WARNING("empty packet ignored");
 			continue;
 		}
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 11, 0)
 		wnd->net_dev->last_rx = jiffies;
+#endif
 		/* get total number of bytes in packet */
 		NdisGetFirstBufferFromPacketSafe(packet, &buffer, &virt,
 						 &length, &total_length,
@@ -2346,7 +2348,9 @@
 		ERROR("nmb is NULL");
 		EXIT3(return);
 	}
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 11, 0)
 	wnd->net_dev->last_rx = jiffies;
+#endif
 
 	if (look_ahead_size < packet_size) {
 		struct ndis_packet *packet;
@@ -2461,7 +2465,9 @@
 		WARNING("illegal packet");
 		EXIT3(return);
 	}
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 11, 0)
 	wnd->net_dev->last_rx = jiffies;
+#endif
 	oob_data = NDIS_PACKET_OOB_DATA(packet);
 	skb_size = sizeof(oob_data->header) + oob_data->look_ahead_size +
 		bytes_txed;
diff -Naur orig/driver/ntoskernel.h patched/driver/ntoskernel.h
--- orig/driver/ntoskernel.h	2016-10-09 17:44:05.000000000 +0200
+++ patched/driver/ntoskernel.h	2018-04-19 17:06:16.143787999 +0200
@@ -119,9 +119,16 @@
  */
 #include <asm/dma-mapping.h>
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 13, 0)
 #define PCI_DMA_ALLOC_COHERENT(pci_dev,size,dma_handle)			\
 	dma_alloc_coherent(&pci_dev->dev,size,dma_handle,		\
 			   GFP_KERNEL | __GFP_REPEAT)
+#else
+#define PCI_DMA_ALLOC_COHERENT(pci_dev,size,dma_handle)			\
+	dma_alloc_coherent(&pci_dev->dev,size,dma_handle,		\
+			   GFP_KERNEL | __GFP_RETRY_MAYFAIL)
+#endif
+
 #define PCI_DMA_FREE_COHERENT(pci_dev,size,cpu_addr,dma_handle)		\
 	dma_free_coherent(&pci_dev->dev,size,cpu_addr,dma_handle)
 #define PCI_DMA_MAP_SINGLE(pci_dev,addr,size,direction)		\
@@ -296,6 +303,10 @@
 #define add_taint(flag, lockdep_ok) add_taint(flag)
 #endif
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 11, 0)
+#include <linux/sched/signal.h>
+#endif
+
 #include "winnt_types.h"
 #include "ndiswrapper.h"
 #include "pe_linker.h"
