From b2ce7a86ac7cb40e7923c53391846674a2ad158a Mon Sep 17 00:00:00 2001
From: Wu Xiaotian <yetist@gmail.com>
Date: Sun, 2 Dec 2018 17:27:31 +0800
Subject: [PATCH] Support mate-menus new api (#38)

Support mate-menus new api
---
 mate_menu/plugins/applications.py | 96 ++++++++++++++++++++-----------
 1 file changed, 61 insertions(+), 35 deletions(-)

diff --git a/mate_menu/plugins/applications.py b/mate_menu/plugins/applications.py
index 28dc693..0f5133f 100644
--- a/mate_menu/plugins/applications.py
+++ b/mate_menu/plugins/applications.py
@@ -20,8 +20,9 @@
 
 import gi
 gi.require_version("Gtk", "3.0")
+gi.require_version('MateMenu', '2.0')
 
-from gi.repository import Gtk, Pango, Gdk, Gio, GLib
+from gi.repository import Gtk, Pango, Gdk, Gio, GLib, MateMenu
 
 import os
 import shutil
@@ -35,8 +36,6 @@
 from mate_menu.easygsettings import EasyGSettings
 from mate_menu.easyfiles import *
 
-import matemenu
-
 # i18n
 gettext.install("mate-menu", "/usr/share/locale")
 
@@ -87,10 +86,32 @@ def rel_path(target, base=os.curdir):
 
     return os.path.join(*rel_list)
 
+def get_contents(item):
+    contents = []
+    item_iter = item.iter()
+    item_type = item_iter.next()
+
+    while item_type != MateMenu.TreeItemType.INVALID:
+        item = None
+        if item_type == MateMenu.TreeItemType.DIRECTORY:
+            item = item_iter.get_directory()
+        elif item_type == MateMenu.TreeItemType.ENTRY:
+            item = item_iter.get_entry()
+        elif item_type == MateMenu.TreeItemType.HEADER:
+            item = item_iter.get_header()
+        elif item_type == MateMenu.TreeItemType.ALIAS:
+            item = item_iter.get_alias()
+        elif item_type == MateMenu.TreeItemType.SEPARATOR:
+            item = item_iter.get_separator()
+        if item:
+            contents.append(item)
+        item_type = item_iter.next()
+    return contents
 
 class Menu:
     def __init__( self, MenuToLookup ):
-        self.tree = matemenu.lookup_tree( MenuToLookup )
+        self.tree = MateMenu.Tree.new( MenuToLookup, MateMenu.TreeFlags.SORT_DISPLAY_NAME)
+        self.tree.load_sync()
         self.directory = self.tree.get_root_directory()
 
     def getMenus( self, parent=None ):
@@ -98,19 +119,19 @@ def getMenus( self, parent=None ):
             #gives top-level "Applications" item
             yield self.tree.root
         else:
-            for menu in parent.get_contents():
-                if menu.get_type() == matemenu.TYPE_DIRECTORY and self.__isVisible( menu ):
+            for menu in get_contents(parent):
+                if isinstance(menu, MateMenu.TreeDirectory) and self.__isVisible( menu ):
                     yield menu
 
     def getItems( self, menu ):
-        for item in menu.get_contents():
-            if item.get_type() == matemenu.TYPE_ENTRY and item.get_desktop_file_id()[-19:] != '-usercustom.desktop' and self.__isVisible( item ):
+        for item in get_contents(menu):
+            if isinstance(item, MateMenu.TreeEntry) and item.get_desktop_file_id()[-19:] != '-usercustom.desktop' and self.__isVisible( item ):
                 yield item
 
     def __isVisible( self, item ):
-        if item.get_type() == matemenu.TYPE_ENTRY:
+        if isinstance(item, MateMenu.TreeEntry):
             return not ( item.get_is_excluded() or item.get_is_nodisplay() )
-        if item.get_type() == matemenu.TYPE_DIRECTORY and len( item.get_contents() ):
+        if isinstance(item, MateMenu.TreeDirectory) and len( get_contents(item) ):
             return True
 
 
@@ -178,6 +199,7 @@ def __init__(self, mateMenuWin, toggleButton):
         self.mainMenus = [ ]
 
         self.toggleButton = toggleButton
+        self.menuFiles = []
 
         self.builder = Gtk.Builder()
         # The Glade file for the plugin
@@ -285,7 +307,8 @@ def __init__(self, mateMenuWin, toggleButton):
 
         for mainitems in [ "mate-applications.menu", "mate-settings.menu" ]:
             mymenu = Menu( mainitems )
-            mymenu.tree.add_monitor( self.menuChanged, None )
+            mymenu.tree.connect("changed", self.menuChanged, None)
+            self.menuFiles.append(mymenu)
 
         self.suggestions = []
         self.current_suggestion = None
@@ -1540,9 +1563,14 @@ def updateBoxes( self, menu_has_changed ):
 
     # Reload the menufiles from the filesystem
     def loadMenuFiles( self ):
-        self.menuFiles = []
+        if len(self.menuFiles) > 0:
+            for menu in self.menuFiles:
+                menu.tree.disconnect_by_func(self.menuChanged)
+            self.menuFiles = []
         for mainitems in [ "mate-applications.menu", "mate-settings.menu" ]:
-            self.menuFiles.append( Menu( mainitems) )
+            mymenu = Menu( mainitems )
+            mymenu.tree.connect("changed", self.menuChanged, None)
+            self.menuFiles.append(mymenu)
 
     # Build a list of all categories in the menu ( [ { "name", "icon", tooltip" } ]
     def buildCategoryList( self ):
@@ -1551,13 +1579,11 @@ def buildCategoryList( self ):
         num = 1
 
         for menu in self.menuFiles:
-            for child in menu.directory.get_contents():
-                if child.get_type() == matemenu.TYPE_DIRECTORY:
-                    icon =  str(child.icon)
-                    #if (icon == "preferences-system"):
-                    #       self.adminMenu = child.name
-                    #if (icon != "applications-system" and icon != "applications-other"):
-                    newCategoryList.append( { "name": child.name, "icon": child.icon, "tooltip": child.name, "filter": child.name, "index": num } )
+            for child in get_contents(menu.directory):
+                if isinstance(child, MateMenu.TreeDirectory):
+                    name = child.get_name()
+                    icon = child.get_icon().to_string()
+                    newCategoryList.append( { "name": name, "icon": icon, "tooltip": name, "filter": name, "index": num } )
             num += 1
 
         return newCategoryList
@@ -1568,30 +1594,30 @@ def buildApplicationList( self ):
         newApplicationsList = []
 
         def find_applications_recursively(app_list, directory, catName):
-            for item in directory.get_contents():
-                if item.get_type() == matemenu.TYPE_ENTRY:
-                    #print "=======>>> " + str(item.name) + " = " + str(catName)
+            for item in get_contents(directory):
+                if isinstance(item, MateMenu.TreeEntry):
+                    #print("=======>>> " + str(item.get_name()) + " = " + str(catName))
                     app_list.append( { "entry": item, "category": catName } )
-                elif item.get_type() == matemenu.TYPE_DIRECTORY:
+                elif isinstance(item, MateMenu.TreeDirectory):
                     find_applications_recursively(app_list, item, catName)
 
         for menu in self.menuFiles:
             directory = menu.directory
-            for entry in directory.get_contents():
-                if entry.get_type() == matemenu.TYPE_DIRECTORY and len(entry.get_contents()):
+            for entry in get_contents(directory):
+                if isinstance(entry, MateMenu.TreeDirectory) and len(get_contents(entry)):
                     #Entry is a top-level category
-                    #catName = entry.name
-                    #icon = str(entry.icon)
+                    #catName = entry.get_name()
+                    #icon = entry.get_icon().to_string()
                     #if (icon == "applications-system" or icon == "applications-other"):
                     #       catName = self.adminMenu
-                    for item in entry.get_contents():
-                        if item.get_type() == matemenu.TYPE_DIRECTORY:
-                            find_applications_recursively(newApplicationsList, item, entry.name)
-                        elif item.get_type() == matemenu.TYPE_ENTRY:
-                            newApplicationsList.append( { "entry": item, "category": entry.name } )
-                #elif entry.get_type() == matemenu.TYPE_ENTRY:
+                    for item in get_contents(entry):
+                        if isinstance(item, MateMenu.TreeDirectory):
+                            find_applications_recursively(newApplicationsList, item, entry.get_name())
+                        elif isinstance(item, MateMenu.TreeEntry):
+                            newApplicationsList.append( { "entry": item, "category": entry.get_name() } )
+                #elif isinstance(entry, MateMenu.TreeEntry):
                 #       if not (entry.get_is_excluded() or entry.get_is_nodisplay()):
-                #               print "=======>>> " + item.name + " = top level"
+                #               print("=======>>> " + item.get_name() + " = top level")
                 #               newApplicationsList.append( { "entry": item, "category": "" } )
 
         return newApplicationsList
