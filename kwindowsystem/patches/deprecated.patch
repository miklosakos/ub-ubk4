diff -Naur orig/src/platforms/xcb/kkeyserver.cpp patched/src/platforms/xcb/kkeyserver.cpp
--- orig/src/platforms/xcb/kkeyserver.cpp	2017-07-02 10:13:10.134739579 +0200
+++ patched/src/platforms/xcb/kkeyserver.cpp	2017-07-10 02:21:57.187493887 +0200
@@ -29,7 +29,7 @@
 # include <X11/X.h>
 # include <X11/Xlib.h>
 # include <X11/Xutil.h>
-# include <X11/keysymdef.h>
+# include <X11/XKBlib.h>
 #include <xcb/xcb_keysyms.h>
 # define X11_ONLY(arg) arg, //allows to omit an argument
 
@@ -494,41 +494,6 @@
     XDisplayKeycodes(QX11Info::display(), &min_keycode, &max_keycode);
     XFree(XGetKeyboardMapping(QX11Info::display(), min_keycode, 1, &keysyms_per_keycode));
 
-    for (int i = Mod1MapIndex; i < 8; i++) {
-        uint mask = (1 << i);
-        uint keySymX = NoSymbol;
-
-        // This used to be only XKeycodeToKeysym( ... , 0 ), but that fails with XFree4.3.99
-        // and X.org R6.7 , where for some reason only ( ... , 1 ) works. I have absolutely no
-        // idea what the problem is, but searching all possibilities until something valid is
-        // found fixes the problem.
-        for (int j = 0; j < xmk->max_keypermod; ++j) {
-
-            for (int k = 0; k < keysyms_per_keycode; ++k) {
-
-                keySymX = XKeycodeToKeysym(QX11Info::display(), xmk->modifiermap[xmk->max_keypermod * i + j], k);
-
-                switch (keySymX) {
-                case XK_Alt_L:
-                case XK_Alt_R:       g_alt_mask |= mask; break;
-
-                case XK_Super_L:
-                case XK_Super_R:     g_super_mask |= mask; break;
-
-                case XK_Hyper_L:
-                case XK_Hyper_R:     g_hyper_mask |= mask; break;
-
-                case XK_Meta_L:
-                case XK_Meta_R:      g_meta_mask |= mask; break;
-
-                case XK_Num_Lock:    g_modXNumLock |= mask; break;
-                case XK_Scroll_Lock: g_modXScrollLock |= mask; break;
-                case XK_Mode_switch: g_modXModeSwitch |= mask; break;
-                }
-            }
-        }
-    }
-
 #ifdef KKEYSERVER_DEBUG
     qCDebug(LOG_KKEYSERVER_X11) << "Alt:" << g_alt_mask;
     qCDebug(LOG_KKEYSERVER_X11) << "Meta:" << g_meta_mask;
@@ -692,13 +657,13 @@
         // need to check index 0 before the others, so that a null-mod
         //  can take precedence over the others, in case the modified
         //  key produces the same symbol.
-        if (sym == XKeycodeToKeysym(QX11Info::display(), code, 0))
+        if (sym == XkbKeycodeToKeysym(QX11Info::display(), code, 0, 0))
             ;
-        else if (sym == XKeycodeToKeysym(QX11Info::display(), code, 1)) {
+        else if (sym == XkbKeycodeToKeysym(QX11Info::display(), code, 1, 0)) {
             mod = Qt::SHIFT;
-        } else if (sym == XKeycodeToKeysym(QX11Info::display(), code, 2)) {
+        } else if (sym == XkbKeycodeToKeysym(QX11Info::display(), code, 2, 0)) {
             mod = MODE_SWITCH;
-        } else if (sym == XKeycodeToKeysym(QX11Info::display(), code, 3)) {
+        } else if (sym == XkbKeycodeToKeysym(QX11Info::display(), code, 3, 0)) {
             mod = Qt::SHIFT | MODE_SWITCH;
         }
     }
@@ -860,7 +825,7 @@
     // If numlock is active and a keypad key is pressed, XOR the SHIFT state.
     //  e.g., KP_4 => Shift+KP_Left, and Shift+KP_4 => KP_Left.
     if (e->xkey.state & modXNumLock()) {
-        uint sym = XKeycodeToKeysym(QX11Info::display(), keyCodeX, 0);
+        uint sym = XkbKeycodeToKeysym(QX11Info::display(), keyCodeX, 0, 0);
         // TODO: what's the xor operator in c++?
         // If this is a keypad key,
         if (sym >= XK_KP_Space && sym <= XK_KP_9) {
