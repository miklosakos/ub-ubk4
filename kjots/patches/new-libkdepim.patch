From 4431a1b597caf1e22423a2de6cb3af385b78178b Mon Sep 17 00:00:00 2001
From: Laurent Montel <montel@kde.org>
Date: Mon, 14 Sep 2020 18:14:30 +0200
Subject: [PATCH] Make it compile with last PIM changes

---
 src/CMakeLists.txt   |   1 +
 src/kjotswidget.cpp  |  18 +++----
 src/uistatesaver.cpp | 112 +++++++++++++++++++++++++++++++++++++++++++
 src/uistatesaver.h   |  49 +++++++++++++++++++
 4 files changed, 171 insertions(+), 9 deletions(-)
 create mode 100644 src/uistatesaver.cpp
 create mode 100644 src/uistatesaver.h

diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index e04019d..a512dab 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -29,6 +29,7 @@ set(kjots_common_SRCS
   kjotsbrowser.cpp
   kjotslinkdialog.cpp
   notesortproxymodel.cpp
+  uistatesaver.cpp
   ${kjots_config_SRCS}
 )
 ki18n_wrap_ui(kjots_common_SRCS linkdialog.ui)
diff --git a/src/kjotswidget.cpp b/src/kjotswidget.cpp
index 996cb4d..57be7ba 100644
--- a/src/kjotswidget.cpp
+++ b/src/kjotswidget.cpp
@@ -85,12 +85,12 @@
 #include <KPIMTextEdit/RichTextComposerActions>
 #include <KPIMTextEdit/RichTextEditorWidget>
 
-#include <Libkdepim/UiStateSaver>
 
 // KMime
 #include <KMime/Message>
 
 // KJots
+#include "uistatesaver.h"
 #include "kjotsbookmarks.h"
 #include "kjotsmodel.h"
 #include "kjotsedit.h"
@@ -306,10 +306,10 @@ void KJotsWidget::saveUIStates() const
 {
     const QString groupName = QStringLiteral("UiState_MainWidget_%1").arg(KJotsSettings::viewMode());
     KConfigGroup group(KSharedConfig::openConfig(), groupName);
-    KPIM::UiStateSaver::saveState(m_splitter1, group);
-    KPIM::UiStateSaver::saveState(m_splitter2, group);
-    KPIM::UiStateSaver::saveState(m_collectionView, group);
-    KPIM::UiStateSaver::saveState(m_itemView, group);
+    KJots::UiStateSaver::saveState(m_splitter1, group);
+    KJots::UiStateSaver::saveState(m_splitter2, group);
+    KJots::UiStateSaver::saveState(m_collectionView, group);
+    KJots::UiStateSaver::saveState(m_itemView, group);
     group.sync();
 }
 
@@ -317,10 +317,10 @@ void KJotsWidget::restoreUIStates()
 {
     const QString groupName = QStringLiteral("UiState_MainWidget_%1").arg(KJotsSettings::viewMode());
     KConfigGroup group(KSharedConfig::openConfig(), groupName);
-    KPIM::UiStateSaver::restoreState(m_splitter1, group);
-    KPIM::UiStateSaver::restoreState(m_splitter2, group);
-    KPIM::UiStateSaver::restoreState(m_collectionView, group);
-    KPIM::UiStateSaver::restoreState(m_itemView, group);
+    KJots::UiStateSaver::restoreState(m_splitter1, group);
+    KJots::UiStateSaver::restoreState(m_splitter2, group);
+    KJots::UiStateSaver::restoreState(m_collectionView, group);
+    KJots::UiStateSaver::restoreState(m_itemView, group);
     group.sync();
 }
 
diff --git a/src/uistatesaver.cpp b/src/uistatesaver.cpp
new file mode 100644
index 0000000..b46a137
--- /dev/null
+++ b/src/uistatesaver.cpp
@@ -0,0 +1,112 @@
+/*
+    SPDX-FileCopyrightText: 2008 Volker Krause <vkrause@kde.org>
+
+    SPDX-License-Identifier: LGPL-2.0-or-later
+*/
+
+#include "uistatesaver.h"
+
+#include <KConfigGroup>
+
+#include <QComboBox>
+#include <QHeaderView>
+#include <QSplitter>
+#include <QTabWidget>
+#include <QTreeView>
+
+using namespace KJots;
+
+struct Saver {
+    static void process(QSplitter *splitter, KConfigGroup &config)
+    {
+        if (splitter->sizes().count(0) == splitter->sizes().count()) {
+            return;
+        }
+        config.writeEntry(splitter->objectName(), splitter->sizes());
+    }
+
+    static void process(QTabWidget *tab, KConfigGroup &config)
+    {
+        config.writeEntry(tab->objectName(), tab->currentIndex());
+    }
+
+    static void process(QTreeView *tv, KConfigGroup &config)
+    {
+        config.writeEntry(tv->objectName(), tv->header()->saveState());
+    }
+
+    static void process(QComboBox *cb, KConfigGroup &config)
+    {
+        config.writeEntry(cb->objectName(), cb->currentIndex());
+    }
+};
+
+struct Restorer {
+    static void process(QSplitter *splitter, const KConfigGroup &config)
+    {
+        const QList<int> sizes = config.readEntry(splitter->objectName(), QList<int>());
+        if (!sizes.isEmpty() && splitter->count() == sizes.count() && sizes.count() != sizes.count(0)) {
+            splitter->setSizes(sizes);
+        }
+    }
+
+    static void process(QTabWidget *tab, const KConfigGroup &config)
+    {
+        const int index = config.readEntry(tab->objectName(), -1);
+        if (index >= 0 && index < tab->count()) {
+            tab->setCurrentIndex(index);
+        }
+    }
+
+    static void process(QTreeView *tv, const KConfigGroup &config)
+    {
+        const QByteArray state = config.readEntry(tv->objectName(), QByteArray());
+        if (!state.isEmpty()) {
+            tv->header()->restoreState(state);
+        }
+    }
+
+    static void process(QComboBox *cb, const KConfigGroup &config)
+    {
+        const int index = config.readEntry(cb->objectName(), -1);
+        if (index >= 0 && index < cb->count()) {
+            cb->setCurrentIndex(index);
+        }
+    }
+};
+
+#define PROCESS_TYPE(T) \
+    { \
+        T *obj = qobject_cast<T *>(w); \
+        if (obj) { \
+            Op::process(obj, config); \
+            continue; \
+        } \
+    }
+
+template<typename Op, typename Config> static void processWidgets(QWidget *widget, Config config)
+{
+    QList<QWidget *> widgets = widget->findChildren<QWidget *>();
+    widgets << widget;
+    for (QWidget *w : qAsConst(widgets)) {
+        if (w->objectName().isEmpty()) {
+            continue;
+        }
+        PROCESS_TYPE(QSplitter);
+        PROCESS_TYPE(QTabWidget);
+        PROCESS_TYPE(QTreeView);
+        PROCESS_TYPE(QComboBox);
+    }
+}
+
+#undef PROCESS_TYPE
+
+void UiStateSaver::saveState(QWidget *widget, KConfigGroup &config)
+{
+    processWidgets<Saver, KConfigGroup &>(widget, config);
+}
+
+void UiStateSaver::restoreState(QWidget *widget, const KConfigGroup &config)
+{
+    processWidgets<Restorer, const KConfigGroup &>(widget, config);
+}
diff --git a/src/uistatesaver.h b/src/uistatesaver.h
new file mode 100644
index 0000000..b32f376
--- /dev/null
+++ b/src/uistatesaver.h
@@ -0,0 +1,49 @@
+/*
+    SPDX-FileCopyrightText: 2008 Volker Krause <vkrause@kde.org>
+
+    SPDX-License-Identifier: LGPL-2.0-or-later
+*/
+
+#ifndef UISTATESAVER_H
+#define UISTATESAVER_H
+
+class QWidget;
+class KConfigGroup;
+
+namespace KJots {
+/**
+ * @short Methods to save and restore the UI state of an application.
+ *
+ * This namespace provides methods that automatically save and restore
+ * the state of various UI elements to/from a configuration group.
+ *
+ * The following widgets are supported so far:
+ * - QSplitter
+ * - QTabWidget
+ * - QTreeView
+ * - QComboBox
+ *
+ * @note The widgets need to have set an objectName, otherwise they are ignored
+ *       on processing.
+ *
+ * @author Volker Krause <vkrause@kde.org>
+ * @since 4.5
+ */
+namespace UiStateSaver {
+/**
+   * Saves the state of @p widget and all its sub-widgets to @p config.
+   * @param widget The top-level widget which state should be saved.
+   * @param config The config group the settings should be written to.
+   */
+void saveState(QWidget *widget, KConfigGroup &config);
+
+/**
+   * Restores the UI state of @p widget and all its sub-widgets from @p config.
+   * @param widget The top-level widget which state should be restored.
+   * @param config The config gorup the settings should be read from.
+   */
+void restoreState(QWidget *widget, const KConfigGroup &config);
+}
+}
+
+#endif

