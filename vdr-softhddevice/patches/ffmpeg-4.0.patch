diff -Nur orig/codec.c mod/codec.c
--- orig/codec.c	2018-06-09 11:22:00.000000000 +0200
+++ mod/codec.c	2018-06-09 11:44:21.066835999 +0200
@@ -302,7 +302,8 @@
 	Fatal(_("codec: can't open video codec!\n"));
     }
 #else
-    if (video_codec->capabilities & (CODEC_CAP_HWACCEL)) {
+    if (video_codec->capabilities & (AV_CODEC_CAP_HARDWARE
+)) {
 	Debug(3, "codec: video mpeg hack active\n");
 	// HACK around badly placed checks in mpeg_mc_decode_init
 	// taken from mplayer vd_ffmpeg.c
@@ -322,11 +323,11 @@
     decoder->VideoCtx->opaque = decoder;	// our structure
 
     Debug(3, "codec: video '%s'\n", decoder->VideoCodec->long_name);
-    if (video_codec->capabilities & CODEC_CAP_TRUNCATED) {
+    if (video_codec->capabilities & AV_CODEC_CAP_TRUNCATED) {
 	Debug(3, "codec: video can use truncated packets\n");
     }
     // FIXME: own memory management for video frames.
-    if (video_codec->capabilities & CODEC_CAP_DR1) {
+    if (video_codec->capabilities & AV_CODEC_CAP_DR1) {
 	Debug(3, "codec: can use own buffer management\n");
     }
 #ifdef CODEC_CAP_FRAME_THREADS
@@ -644,7 +645,7 @@
     pthread_mutex_unlock(&CodecLockMutex);
     Debug(3, "codec: audio '%s'\n", audio_decoder->AudioCodec->long_name);
 
-    if (audio_codec->capabilities & CODEC_CAP_TRUNCATED) {
+    if (audio_codec->capabilities & AV_CODEC_CAP_TRUNCATED) {
 	Debug(3, "codec: audio can use truncated packets\n");
 	// we send only complete frames
 	// audio_decoder->AudioCtx->flags |= CODEC_FLAG_TRUNCATED;
diff -Nur orig/softhddev.c mod/softhddev.c
--- orig/softhddev.c	2018-06-09 11:22:00.000000000 +0200
+++ mod/softhddev.c	2018-06-09 11:25:04.584459639 +0200
@@ -614,7 +614,7 @@
 	Warning(_("video: packet buffer too small for %d\n"),
 	    avpkt->stream_index + size);
 
-	// new + grow reserves FF_INPUT_BUFFER_PADDING_SIZE
+	// new + grow reserves AV_INPUT_BUFFER_PADDING_SIZE
 	av_grow_packet(avpkt, ((size + VIDEO_BUFFER_SIZE / 2)
 		/ (VIDEO_BUFFER_SIZE / 2)) * (VIDEO_BUFFER_SIZE / 2));
 	// FIXME: out of memory!
@@ -684,7 +684,7 @@
 	return;
     }
     // clear area for decoder, always enough space allocated
-    memset(avpkt->data + avpkt->stream_index, 0, FF_INPUT_BUFFER_PADDING_SIZE);
+    memset(avpkt->data + avpkt->stream_index, 0, AV_INPUT_BUFFER_PADDING_SIZE);
 
     stream->CodecIDRb[stream->PacketWrite] = codec_id;
     //DumpH264(avpkt->data, avpkt->stream_index);
@@ -1201,7 +1201,7 @@
 {
     memset(pesdx, 0, sizeof(*pesdx));
     pesdx->Size = PES_MAX_PAYLOAD;
-    pesdx->Buffer = av_malloc(PES_MAX_PAYLOAD + FF_INPUT_BUFFER_PADDING_SIZE);
+    pesdx->Buffer = av_malloc(PES_MAX_PAYLOAD + AV_INPUT_BUFFER_PADDING_SIZE);
     if (!pesdx->Buffer) {
 	Fatal(_("pesdemux: out of memory\n"));
     }
