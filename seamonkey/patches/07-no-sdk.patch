diff -Naur orig/mozilla/browser/build.mk patched/mozilla/browser/build.mk
--- orig/mozilla/browser/build.mk	2018-02-05 12:47:35.000000000 +0100
+++ patched/mozilla/browser/build.mk	2018-03-04 01:09:34.890997953 +0100
@@ -14,9 +14,6 @@
 stage-package:
 	@$(MAKE) -C browser/installer stage-package
 
-sdk:
-	@$(MAKE) -C browser/installer make-sdk
-
 install::
 	@$(MAKE) -C browser/installer install
 
diff -Naur orig/mozilla/browser/installer/Makefile.in patched/mozilla/browser/installer/Makefile.in
--- orig/mozilla/browser/installer/Makefile.in	2018-02-05 12:47:36.000000000 +0100
+++ patched/mozilla/browser/installer/Makefile.in	2018-03-04 01:10:14.523436572 +0100
@@ -99,8 +99,6 @@
 MOZ_PKG_MAC_EXTRA=--symlink '/Applications:/ '
 endif
 
-INSTALL_SDK = 1
-
 include $(topsrcdir)/toolkit/mozapps/installer/signing.mk
 include $(topsrcdir)/toolkit/mozapps/installer/packager.mk
 
diff -Naur orig/mozilla/toolkit/mozapps/installer/packager.mk patched/mozilla/toolkit/mozapps/installer/packager.mk
--- orig/mozilla/toolkit/mozapps/installer/packager.mk	2018-02-05 12:50:47.000000000 +0100
+++ patched/mozilla/toolkit/mozapps/installer/packager.mk	2018-03-04 00:55:45.378706720 +0100
@@ -121,12 +121,6 @@
 	cp $(DEPTH)/mozinfo.json $(MOZ_MOZINFO_FILE)
 
 # The install target will install the application to prefix/lib/appname-version
-# In addition if INSTALL_SDK is set, it will install the development headers,
-# libraries, and IDL files as follows:
-# dist/include -> prefix/include/appname-version
-# dist/idl -> prefix/share/idl/appname-version
-# dist/sdk/lib -> prefix/lib/appname-devel-version/lib
-# prefix/lib/appname-devel-version/* symlinks to the above directories
 install:: prepare-package
 ifeq ($(OS_ARCH),WINNT)
 	$(error "make install" is not supported on this platform. Use "make package" instead.)
@@ -140,70 +134,7 @@
 	$(NSINSTALL) -D $(DESTDIR)$(bindir)
 	$(RM) -f $(DESTDIR)$(bindir)/$(MOZ_APP_NAME)
 	ln -s $(installdir)/$(MOZ_APP_NAME) $(DESTDIR)$(bindir)
-ifdef INSTALL_SDK # Here comes the hard part
-	$(NSINSTALL) -D $(DESTDIR)$(includedir)
-	(cd $(DIST)/include && $(TAR) $(TAR_CREATE_FLAGS) - .) | \
-	  (cd $(DESTDIR)$(includedir) && tar -xf -)
-	$(NSINSTALL) -D $(DESTDIR)$(idldir)
-	(cd $(DIST)/idl && $(TAR) $(TAR_CREATE_FLAGS) - .) | \
-	  (cd $(DESTDIR)$(idldir) && tar -xf -)
-# SDK directory is the libs + a bunch of symlinks
-	$(NSINSTALL) -D $(DESTDIR)$(sdkdir)/sdk/lib
-	$(NSINSTALL) -D $(DESTDIR)$(sdkdir)/sdk/bin
-	if test -f $(DIST)/include/xpcom-config.h; then \
-	  $(SYSINSTALL) $(IFLAGS1) $(DIST)/include/xpcom-config.h $(DESTDIR)$(sdkdir); \
-	fi
-	find $(DIST)/sdk -name '*.pyc' | xargs rm -f
-	(cd $(DIST)/sdk/lib && $(TAR) $(TAR_CREATE_FLAGS) - .) | (cd $(DESTDIR)$(sdkdir)/sdk/lib && tar -xf -)
-	(cd $(DIST)/sdk/bin && $(TAR) $(TAR_CREATE_FLAGS) - .) | (cd $(DESTDIR)$(sdkdir)/sdk/bin && tar -xf -)
-	$(RM) -f $(DESTDIR)$(sdkdir)/lib $(DESTDIR)$(sdkdir)/bin $(DESTDIR)$(sdkdir)/include $(DESTDIR)$(sdkdir)/include $(DESTDIR)$(sdkdir)/sdk/idl $(DESTDIR)$(sdkdir)/idl
-	ln -s $(sdkdir)/sdk/lib $(DESTDIR)$(sdkdir)/lib
-	ln -s $(installdir) $(DESTDIR)$(sdkdir)/bin
-	ln -s $(includedir) $(DESTDIR)$(sdkdir)/include
-	ln -s $(idldir) $(DESTDIR)$(sdkdir)/idl
-endif # INSTALL_SDK
 
-make-sdk:
-ifndef SDK_UNIFY
-	$(MAKE) stage-package UNIVERSAL_BINARY= STAGE_SDK=1 MOZ_PKG_DIR=sdk-stage
-endif
-	@echo 'Packaging SDK...'
-	$(RM) -rf $(DIST)/$(MOZ_APP_NAME)-sdk
-	$(NSINSTALL) -D $(DIST)/$(MOZ_APP_NAME)-sdk/bin
-ifdef SDK_UNIFY
-	(cd $(UNIFY_DIST)/sdk-stage && $(TAR) $(TAR_CREATE_FLAGS) - .) | \
-	  (cd $(DIST)/$(MOZ_APP_NAME)-sdk/bin && tar -xf -)
-else
-	(cd $(DIST)/sdk-stage && $(TAR) $(TAR_CREATE_FLAGS) - .) | \
-	  (cd $(DIST)/$(MOZ_APP_NAME)-sdk/bin && tar -xf -)
-endif
-	$(NSINSTALL) -D $(DIST)/$(MOZ_APP_NAME)-sdk/host/bin
-	(cd $(DIST)/host/bin && $(TAR) $(TAR_CREATE_FLAGS) - .) | \
-	  (cd $(DIST)/$(MOZ_APP_NAME)-sdk/host/bin && tar -xf -)
-	$(NSINSTALL) -D $(DIST)/$(MOZ_APP_NAME)-sdk/sdk
-	find $(DIST)/sdk -name '*.pyc' | xargs rm -f
-	(cd $(DIST)/sdk && $(TAR) $(TAR_CREATE_FLAGS) - .) | \
-	  (cd $(DIST)/$(MOZ_APP_NAME)-sdk/sdk && tar -xf -)
-	$(NSINSTALL) -D $(DIST)/$(MOZ_APP_NAME)-sdk/include
-	(cd $(DIST)/include && $(TAR) $(TAR_CREATE_FLAGS) - .) | \
-	  (cd $(DIST)/$(MOZ_APP_NAME)-sdk/include && tar -xf -)
-	$(NSINSTALL) -D $(DIST)/$(MOZ_APP_NAME)-sdk/idl
-	(cd $(DIST)/idl && $(TAR) $(TAR_CREATE_FLAGS) - .) | \
-	  (cd $(DIST)/$(MOZ_APP_NAME)-sdk/idl && tar -xf -)
-	$(NSINSTALL) -D $(DIST)/$(MOZ_APP_NAME)-sdk/lib
-# sdk/lib is the same as sdk/sdk/lib
-	(cd $(DIST)/sdk/lib && $(TAR) $(TAR_CREATE_FLAGS) - .) | \
-	  (cd $(DIST)/$(MOZ_APP_NAME)-sdk/lib && tar -xf -)
-	$(NSINSTALL) -D $(DIST)/$(SDK_PATH)
-ifndef PKG_SKIP_STRIP
-	USE_ELF_HACK= $(PYTHON) $(MOZILLA_DIR)/toolkit/mozapps/installer/strip.py $(DIST)/$(MOZ_APP_NAME)-sdk
-endif
-	cd $(DIST) && $(MAKE_SDK)
-ifdef UNIFY_DIST
-ifndef SDK_UNIFY
-	$(MAKE) -C $(UNIFY_DIST)/.. sdk SDK_UNIFY=1
-endif
-endif
 
 checksum:
 	mkdir -p `dirname $(CHECKSUM_FILE)`
diff -Naur orig/mozilla/toolkit/mozapps/installer/upload-files.mk patched/mozilla/toolkit/mozapps/installer/upload-files.mk
--- orig/mozilla/toolkit/mozapps/installer/upload-files.mk	2018-02-05 12:50:46.000000000 +0100
+++ patched/mozilla/toolkit/mozapps/installer/upload-files.mk	2018-03-04 01:02:32.478334796 +0100
@@ -49,14 +49,6 @@
 PACKAGE_BASE_DIR = $(ABS_DIST)
 PACKAGE       = $(PKG_PATH)$(PKG_BASENAME)$(PKG_SUFFIX)
 
-# By default, the SDK uses the same packaging type as the main bundle,
-# but on mac it is a .tar.bz2
-SDK_SUFFIX    = $(PKG_SUFFIX)
-SDK           = $(SDK_PATH)$(PKG_BASENAME).sdk$(SDK_SUFFIX)
-ifdef UNIVERSAL_BINARY
-SDK           = $(SDK_PATH)$(PKG_BASENAME)-$(TARGET_CPU).sdk$(SDK_SUFFIX)
-endif
-
 # JavaScript Shell packaging
 JSSHELL_BINS  = \
   js$(BIN_SUFFIX) \
@@ -101,14 +93,12 @@
   PKG_SUFFIX	= .tar
   INNER_MAKE_PACKAGE 	= $(CREATE_FINAL_TAR) - $(MOZ_PKG_DIR) > $(PACKAGE)
   INNER_UNMAKE_PACKAGE	= $(UNPACK_TAR) < $(UNPACKAGE)
-  MAKE_SDK = $(CREATE_FINAL_TAR) - $(MOZ_APP_NAME)-sdk > '$(SDK)'
 endif
 
 ifeq ($(MOZ_PKG_FORMAT),TGZ)
   PKG_SUFFIX	= .tar.gz
   INNER_MAKE_PACKAGE 	= $(CREATE_FINAL_TAR) - $(MOZ_PKG_DIR) | gzip -vf9 > $(PACKAGE)
   INNER_UNMAKE_PACKAGE	= gunzip -c $(UNPACKAGE) | $(UNPACK_TAR)
-  MAKE_SDK = $(CREATE_FINAL_TAR) - $(MOZ_APP_NAME)-sdk | gzip -vf9 > '$(SDK)'
 endif
 
 ifeq ($(MOZ_PKG_FORMAT),BZ2)
@@ -119,7 +109,6 @@
     INNER_MAKE_PACKAGE 	= $(CREATE_FINAL_TAR) - $(MOZ_PKG_DIR) | bzip2 -vf > $(PACKAGE)
   endif
   INNER_UNMAKE_PACKAGE	= bunzip2 -c $(UNPACKAGE) | $(UNPACK_TAR)
-  MAKE_SDK = $(CREATE_FINAL_TAR) - $(MOZ_APP_NAME)-sdk | bzip2 -vf > '$(SDK)'
 endif
 
 ifeq ($(MOZ_PKG_FORMAT),ZIP)
@@ -131,7 +120,6 @@
   INNER_MAKE_PACKAGE	= $(ZIP) -r9D $(PACKAGE) $(MOZ_PKG_DIR) \
     -x \*/.mkdir.done
   INNER_UNMAKE_PACKAGE	= $(UNZIP) $(UNPACKAGE)
-  MAKE_SDK = $(call py_action,zip,'$(SDK)' $(MOZ_APP_NAME)-sdk)
 endif
 
 ifeq ($(MOZ_PKG_FORMAT),SFX7Z)
@@ -202,15 +190,7 @@
       --define '_testsinstalldir $(shell basename $(installdir))'
   endif
 
-  ifdef INSTALL_SDK
-    RPM_CMD += \
-      --define 'createdevel yes' \
-      --define '_idldir $(idldir)' \
-      --define '_sdkdir $(sdkdir)' \
-      --define '_includedir $(includedir)'
-  endif
-
-  #For each of the main, tests, sdk rpms we want to make sure that
+  #For each of the main/tests rpms we want to make sure that
   #if they exist that they are in objdir/dist/ and that they get
   #uploaded and that they are beside the other build artifacts
   MAIN_RPM= $(MOZ_APP_NAME)-$(MOZ_NUMERIC_APP_VERSION)-$(MOZ_RPM_RELEASE).$(BUILDID).$(TARGET_CPU)$(PKG_SUFFIX)
@@ -223,12 +203,6 @@
     RPM_CMD += && mv $(TARGET_CPU)/$(TESTS_RPM) $(ABS_DIST)/
   endif
 
-  ifdef INSTALL_SDK
-    SDK_RPM=$(MOZ_APP_NAME)-devel-$(MOZ_NUMERIC_APP_VERSION)-$(MOZ_RPM_RELEASE).$(BUILDID).$(TARGET_CPU)$(PKG_SUFFIX)
-    UPLOAD_EXTRA_FILES += $(SDK_RPM)
-    RPM_CMD += && mv $(TARGET_CPU)/$(SDK_RPM) $(ABS_DIST)/
-  endif
-
   INNER_MAKE_PACKAGE = $(RPM_CMD)
   #Avoiding rpm repacks, going to try creating/uploading xpi in rpm files instead
   INNER_UNMAKE_PACKAGE = $(error Try using rpm2cpio and cpio)
@@ -265,10 +239,6 @@
       { /Developer/Tools/DeRez -skip plst -skip blkx $(MOZ_PKG_APPNAME).tmp.dmg > '$(MOZ_PKG_MAC_RSRC)' || { rm -f $(MOZ_PKG_APPNAME).tmp.dmg && false; }; } && \
       rm -f $(MOZ_PKG_APPNAME).tmp.dmg; \
     fi
-  # The plst and blkx resources are skipped because they belong to each
-  # individual dmg and are created by hdiutil.
-  SDK_SUFFIX = .tar.bz2
-  MAKE_SDK = $(CREATE_FINAL_TAR) - $(MOZ_APP_NAME)-sdk | bzip2 -vf > '$(SDK)'
 endif
 
 ifdef MOZ_INTERNAL_SIGNING_FORMAT
@@ -304,10 +274,6 @@
   MAKE_PACKAGE    += && $(MOZ_SIGN_PACKAGE_CMD) '$(PACKAGE)'
 endif
 
-ifdef MOZ_SIGN_CMD
-  MAKE_SDK           += && $(MOZ_SIGN_CMD) -f gpg '$(SDK)'
-endif
-
 NO_PKG_FILES += \
 	core \
 	bsdecho \
@@ -454,8 +420,6 @@
   $(call QUOTED_WILDCARD,$(DIST)/$(PKG_PATH)$(WP_TEST_PACKAGE)) \
   $(call QUOTED_WILDCARD,$(DIST)/$(PKG_PATH)$(GTEST_PACKAGE)) \
   $(call QUOTED_WILDCARD,$(DIST)/$(PKG_PATH)$(SYMBOL_ARCHIVE_BASENAME).zip) \
-  $(call QUOTED_WILDCARD,$(DIST)/$(SDK)) \
-  $(call QUOTED_WILDCARD,$(DIST)/$(SDK).asc) \
   $(call QUOTED_WILDCARD,$(MOZ_SOURCESTAMP_FILE)) \
   $(call QUOTED_WILDCARD,$(MOZ_BUILDINFO_FILE)) \
   $(call QUOTED_WILDCARD,$(MOZ_BUILDID_INFO_TXT_FILE)) \
@@ -470,13 +434,6 @@
     $(call QUOTED_WILDCARD,$(DIST)/$(PKG_PATH)$(CODE_COVERAGE_ARCHIVE_BASENAME).zip)
 endif
 
-ifdef UNIFY_DIST
-  UNIFY_ARCH := $(notdir $(patsubst %/,%,$(dir $(UNIFY_DIST))))
-  UPLOAD_FILES += \
-    $(call QUOTED_WILDCARD,$(UNIFY_DIST)/$(SDK_PATH)$(PKG_BASENAME)-$(UNIFY_ARCH).sdk$(SDK_SUFFIX)) \
-    $(call QUOTED_WILDCARD,$(UNIFY_DIST)/$(SDK_PATH)$(PKG_BASENAME)-$(UNIFY_ARCH).sdk$(SDK_SUFFIX).asc)
-endif
-
 SIGN_CHECKSUM_CMD=
 ifdef MOZ_SIGN_CMD
   # If we're signing with gpg, we'll have a bunch of extra detached signatures to
