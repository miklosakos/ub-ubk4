diff -Nur orig/scripts/gengraph.py mod/scripts/gengraph.py
--- orig/scripts/gengraph.py	2004-11-19 06:29:33.000000000 +0100
+++ mod/scripts/gengraph.py	2020-03-30 14:13:40.629905625 +0200
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 #
 """Usage: %s [options] <nccout> <function> ...
 valid options:
@@ -14,6 +14,7 @@
 Sample usage:
 gengraph.py -i "exit strlen" nccout main |dot -Tsvg -o func.svg
 """
+from __future__ import print_function
 #
 # Author: Jose Vasconcellos <jvasco@bellatlantic.net>
 # Copyright (C) 2004 Jose Vasconcellos
@@ -43,8 +44,8 @@
 show = []
 shown = []
 
-cfile = None    #current file
-cfunc = None    #current func
+cfile = None    # current file
+cfunc = None    # current func
 rfunc = {}
 
 # funcs: function dictionary
@@ -53,12 +54,14 @@
 
 ####################
 
+
 def usage():
-    print __doc__ % os.path.basename(sys.argv[0])
+    print(__doc__ % os.path.basename(sys.argv[0]))
     sys.exit(1)
 
 ####################
 
+
 def addfunc(f, d):
     if f in funcs:
         # already exists, just append
@@ -67,6 +70,7 @@
         # new function entry; 1st item holds file name
         funcs[f] = [None, d]
 
+
 def addfile(f, p):
     if f in funcs:
         # existing entry, put file name in 1st entry in list
@@ -77,11 +81,13 @@
 
 ####################
 
+
 def word(w):
     return w.rstrip(" ()\t\n")
 
 ####################
 
+
 def gengraph(s, d=0):
     if s:
         shown.append(s)
@@ -92,19 +98,20 @@
             edge = ""
             if f1[0] == '*':
                 edge = "[color=blue]"
-                while rfunc.has_key(f1):
+                while f1 in rfunc:
                     f1 = rfunc[f1]
-            print '"%s" -> "%s" %s;' % (s, f1, edge)
+            print('"%s" -> "%s" %s;' % (s, f1, edge))
             if d < maxdepth and f1 == f and f not in shown:
-                gengraph(f,d+1)
+                gengraph(f, d+1)
 
 ####################
 # start of main program
 
+
 # process command line options
 try:
     opts, args = getopt.getopt(sys.argv[1:], "hvVD:d:i:l:s:", \
-	["help","version","depth","dot","ignore","location","show"])
+    ["help", "version", "depth", "dot", "ignore", "location", "show"])
 
 except getopt.GetoptError:
     # print help information and exit:
@@ -112,20 +119,20 @@
 
 for o, a in opts:
     if o in ("-h", "--help"):
-	usage()
+        usage()
     elif o in ("-V", "--version"):
-        print "$Id: gengraph.py 5 2004-11-18 03:21:58Z Jose $"
-	sys.exit(1)
+        print("$Id: gengraph.py 5 2004-11-18 03:21:58Z Jose $")
+    sys.exit(1)
     elif o in ("-i", "--ignore"):
-	ignore = string.split(a)
+        ignore = string.split(a)
     elif o in ("-D", "--dot"):
-	dot = a
+        dot = a
     elif o in ("-d", "--depth"):
-	maxdepth = int(a)
+        maxdepth = int(a)
     elif o in ("-l", "--location"):
-	location = 1
+        location = 1
     elif o in ("-s", "--show"):
-	show = string.split(a)
+        show = string.split(a)
 
 if len(args) < 2:
     usage()
@@ -162,29 +169,29 @@
         cfile = None
 
 # generate graph
-print "digraph gengraph {"
+print("digraph gengraph {")
 if dot:
-    print dot
+    print(dot)
 
 # traverse graph
 for s in start:
     gengraph(s)
 
 if location:
-    pass        #todo
+    pass        # todo
 else:
     # mark special nodes
     for s in shown:
         if s in show:
-            print '"%s" [ style="bold", color="red", shape="box" ];' % s
+            print('"%s" [ style="bold", color="red", shape="box" ];' % s)
         if s[0] == '*':
-            print '"%s" [ shape="hexagon" ];' % s
+            print('"%s" [ shape="hexagon" ];' % s)
         elif s.find('/') >= 0:
-            print '"%s" [ shape="octagon" ];' % s
+            print('"%s" [ shape="octagon" ];' % s)
     # mark start nodes
     for s in start:
-        print '"%s" [ style="filled,bold", fillcolor="#dddddd", shape="box" ];' % s
+        print('"%s" [ style="filled,bold", fillcolor="#dddddd", shape="box" ];' % s)
 
-print "}"
+print("}")
 
 # vim: set ai sw=4 et :
diff -Nur orig/scripts/nccstrip2.py mod/scripts/nccstrip2.py
--- orig/scripts/nccstrip2.py	2008-10-13 17:05:10.000000000 +0200
+++ mod/scripts/nccstrip2.py	2020-03-30 13:57:26.867032066 +0200
@@ -1,71 +1,82 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 
 # This file is installed and used automatically by ncc each time it
 # "links" nccout object files.
 
+from __future__ import print_function
 import sys
 
 have = {}
 
-def getsub (line, set):
+
+def getsub(line, set):
     global outlines
     TS = ''
-    TL = [ line ]
+    TL = [line]
     for j in instream:
         if j[0] not in set:
             break
-	j = j[:-1]
-	TS += j
-	TL.append (j)
+    j = j[:-1]
+    TS += j
+    TL.append(j)
     if line in have:
-	X = have [line]
-	if type(X) == type (''):
-	    if X == TS:
-		return
-	    have [line] = [X, TS]
-	else:
-	    for k in have [line]:
-	        if k == TS:
-		    return
-	    have [line].append (TS)
+        X = have[line]
+    if type(X) == type(''):
+        if X == TS:
+            return
+        have[line] = [X, TS]
+    else:
+        for k in have[line]:
+            if k == TS:
+                return
+        have[line].append(TS)
     else:
-	have [line] = TS
-    outlines += len (TL)
-    output ("\n".join (TL) + "\n")
+        have[line] = TS
+    outlines += len(TL)
+    output("\n".join(TL) + "\n")
+
+
+infile, outfile = sys.argv[1:]
+
 
-infile, outfile = sys.argv [1:]
 outlines = inlines = 0
-def readinput (infile):
-	global inlines
-	for l in infile:
-		yield l
-		inlines += 1
 
-instream = readinput (open (infile))
+
+def readinput(infile):
+    global inlines
+    for l in infile:
+        yield l
+        inlines += 1
+
+
+instream = readinput(open(infile))
 if infile == outfile:
-	replace = True
-	outfile = "nccstriptmp"
+    replace = True
+    outfile = "nccstriptmp"
 else:
-	replace = False
+    replace = False
+
+write = open(outfile, "w").write
 
-write = open (outfile, "w").write
-def output (x):
+
+def output(x):
     global outlines
     outlines += 1
-    write (x + "\n")
+    write(x + "\n")
+
 
 for i in instream:
-    if i [0] == '#':
-	continue
-    if i [0] == 'D':
-	getsub (i[:-1], 'FgGsS')
-    elif i [0] == 'P':
-	getsub (i[:-1], 'YL')
+    if i[0] == '#':
+        continue
+    if i[0] == 'D':
+        getsub(i[:-1], 'FgGsS')
+    elif i[0] == 'P':
+        getsub(i[:-1], 'YL')
     else:
-	output (i[:-1])
+        output(i[:-1])
 
 if inlines:
-	print "nccstrip: -%.2f%%"% ((inlines - outlines) * 100.0 / inlines)
+    print("nccstrip: -%.2f%%" % ((inlines - outlines) * 100.0 / inlines))
 if replace:
-	import os
-	os.rename ("nccstriptmp", infile)
+    import os
+    os.rename("nccstriptmp", infile)
diff -Nur orig/scripts/nccstrip.py mod/scripts/nccstrip.py
--- orig/scripts/nccstrip.py	2004-12-15 02:06:46.000000000 +0100
+++ mod/scripts/nccstrip.py	2020-03-30 14:06:02.847587822 +0200
@@ -1,48 +1,50 @@
-#!/usr/bin/env python
+#!/usr/bin/python3
 """I'd rather we did this in perl because
 it is strictly a practical extraction and report
 application. Anyway, this compresses nccout files
 by removing duplicate data as structure declarations
 from header files which are reported in every source
 file."""
+from __future__ import print_function
 
 import sys
 
 have = {}
 
-def getsub (line, set):
+
+def getsub(line, set):
     TS = ''
-    TL = [ line ]
+    TL = [line]
     for j in sys.stdin:
         if j[0] not in set:
             break
-	j = j[:-1]
-	TS += j
-	TL.append (j)
+    j = j[:-1]
+    TS += j
+    TL.append(j)
     if line in have:
-	X = have [line]
-	if type(X) == type (''):
-	    if X == TS:
-		return
-	    have [line] = [X, TS]
-	else:
-	    for k in have [line]:
-	        if k == TS:
-		    return
-	    have [line].append (TS)
+        X = have[line]
+    if type(X) == type(''):
+        if X == TS:
+            return
+        have[line] = [X, TS]
+    else:
+        for k in have[line]:
+            if k == TS:
+                return
+        have[line].append(TS)
     else:
-	have [line] = TS
+        have[line] = TS
     for j in TL:
-	print j;
-    print
+        print(j)
+    print()
+
 
 for i in sys.stdin:
-    if i [0] == '#':
-	continue
-    if i [0] == 'D':
-	getsub (i[:-1], 'FgGsS')
-    elif i [0] == 'P':
-	getsub (i[:-1], 'YL')
+    if i[0] == '#':
+        continue
+    if i[0] == 'D':
+        getsub(i[:-1], 'FgGsS')
+    elif i[0] == 'P':
+        getsub(i[:-1], 'YL')
     else:
-	print i[:-1]
-
+        print(i[:-1])
