diff -Naur orig/frontends/cli/vcd-info.c patched/frontends/cli/vcd-info.c
--- orig/frontends/cli/vcd-info.c	2011-03-17 22:26:34.134739579 +0100
+++ patched/frontends/cli/vcd-info.c	2017-12-22 03:25:55.597141965 +0100
@@ -928,7 +928,7 @@
   CdioListNode_t *entnode;
   CdIo_t *cdio = vcdinfo_get_cd_image(obj);
 
-  entlist = iso9660_fs_readdir (cdio, pathname, true);
+  entlist = iso9660_fs_readdir (cdio, pathname);
     
   fprintf (stdout, " %s:\n", pathname);
 
@@ -971,7 +971,7 @@
 
     }
 
-  _cdio_list_free (entlist, true);
+  _cdio_list_free (entlist, true, NULL);
 
   fprintf (stdout, "\n");
 
@@ -984,7 +984,7 @@
       _dump_fs_recurse (obj, _fullname);
     }
 
-  _cdio_list_free (dirlist, true);
+  _cdio_list_free (dirlist, true, NULL);
 }
 
 static void
diff -Naur orig/frontends/xml/vcd_xml_build.c patched/frontends/xml/vcd_xml_build.c
--- orig/frontends/xml/vcd_xml_build.c	2011-03-17 22:26:34.134739579 +0100
+++ patched/frontends/xml/vcd_xml_build.c	2017-12-22 03:35:10.505466625 +0100
@@ -499,10 +504,10 @@
 
   xmlFreeDoc (vcd_doc);
   free(gl.xml_fname);
-  _cdio_list_free (gl.img_options, true);
+  _cdio_list_free (gl.img_options, true, NULL);
   return EXIT_SUCCESS;
  err_exit: 
   free(gl.xml_fname);
-  _cdio_list_free (gl.img_options, true);
+  _cdio_list_free (gl.img_options, true, NULL);
   return EXIT_FAILURE;
 }
diff -Naur orig/frontends/xml/vcdxml.h patched/frontends/xml/vcdxml.h
--- orig/frontends/xml/vcdxml.h	2005-05-15 02:12:02.134739579 +0200
+++ patched/frontends/xml/vcdxml.h	2017-12-22 03:35:41.673933160 +0100
@@ -151,8 +153,8 @@
 
   vcd_assert (p_vcdxml != NULL);
 
-  _cdio_list_free (p_vcdxml->option_list,   true);
-  _cdio_list_free (p_vcdxml->segment_list,  true);
+  _cdio_list_free (p_vcdxml->option_list,   true, NULL);
+  _cdio_list_free (p_vcdxml->segment_list,  true, NULL);
 
   _CDIO_LIST_FOREACH (p_node, p_vcdxml->pbc_list)
     {
@@ -172,8 +174,8 @@
 	  struct entry_point_t *p_entry = _cdio_list_node_data(p_node2);
 	  free(p_entry->id);
 	}
-      _cdio_list_free (p_sequence->entry_point_list, true);
-      _cdio_list_free (p_sequence->autopause_list, true);
+      _cdio_list_free (p_sequence->entry_point_list, true, NULL);
+      _cdio_list_free (p_sequence->autopause_list, true, NULL);
     }
   
   _CDIO_LIST_FOREACH (p_node, p_vcdxml->filesystem)
@@ -183,9 +185,9 @@
       free(p_fs->file_src);
     }
 
-  _cdio_list_free (p_vcdxml->filesystem,    true);
-  _cdio_list_free (p_vcdxml->pbc_list, true);
-  _cdio_list_free (p_vcdxml->sequence_list, true);
+  _cdio_list_free (p_vcdxml->filesystem, true, NULL);
+  _cdio_list_free (p_vcdxml->pbc_list, true, NULL);
+  _cdio_list_free (p_vcdxml->sequence_list, true, NULL);
   free (p_vcdxml->comment);
   free (p_vcdxml->info.album_id);
   free (p_vcdxml->pvd.volume_id);
diff -Naur orig/frontends/xml/vcd_xml_rip.c patched/frontends/xml/vcd_xml_rip.c
--- orig/frontends/xml/vcd_xml_rip.c	2017-12-22 02:20:13.760917771 +0100
+++ patched/frontends/xml/vcd_xml_rip.c	2017-12-22 03:40:01.781837706 +0100
@@ -145,7 +145,7 @@
 _parse_isofs_r (vcdxml_t *p_vcdxml, CdIo_t *p_cdio, 
 		const char pathname[])
 { 
-  CdioList_t *entlist = iso9660_fs_readdir (p_cdio, pathname, true);
+  CdioList_t *entlist = iso9660_fs_readdir (p_cdio, pathname);
   CdioListNode_t *entnode;
 
   if (entlist == NULL)
@@ -184,7 +184,7 @@
       }
     }
 
-  _cdio_list_free (entlist, true);
+  _cdio_list_free (entlist, true, NULL);
 
   return 0;
 }
@@ -837,7 +837,7 @@
   
   if (cdio_read_mode2_sectors (p_cdio, _pbc_ctx.lot, _lot_vcd_sector, false, 
 			       LOT_VCD_SIZE)) {
-    _cdio_list_free (_pbc_ctx.offset_list, true);
+    _cdio_list_free (_pbc_ctx.offset_list, true, NULL);
     free(_pbc_ctx.lot);
     return -1;
   }
@@ -871,7 +871,7 @@
     }
 
  free_and_return:
-  _cdio_list_free (_pbc_ctx.offset_list, true);
+  _cdio_list_free (_pbc_ctx.offset_list, true, NULL);
   free(_pbc_ctx.lot);
   free(_pbc_ctx.psd);
   return 0;
diff -Naur orig/lib/data_structures.c patched/lib/data_structures.c
--- orig/lib/data_structures.c	2017-12-22 02:20:13.764917831 +0100
+++ patched/lib/data_structures.c	2017-12-22 03:03:46.392582152 +0100
@@ -180,7 +181,7 @@
   if (p_node->children)
     {
       vcd_assert (_cdio_list_length (p_node->children) == 0);
-      _cdio_list_free (p_node->children, true);
+      _cdio_list_free (p_node->children, true, NULL);
       p_node->children = NULL;
     }
 
@@ -188,7 +189,7 @@
     free (_vcd_tree_node_set_data (p_node, NULL));
 
   if (p_node->parent)
-    _cdio_list_node_free (p_node->listnode, true);
+    _cdio_list_node_free (p_node->listnode, true, NULL);
   else
     _vcd_tree_node_set_data (p_node, NULL);
 }
@@ -302,7 +303,7 @@
       VcdTreeNode_t  *treenode = _cdio_list_node_data (lastnode);
       VcdTreeNode_t  *childnode;
 
-      _cdio_list_node_free (lastnode, false);
+      _cdio_list_node_free (lastnode, false, NULL);
 
       trav_func (treenode, p_user_data);
       
@@ -312,7 +313,7 @@
         }
     }
 
-  _cdio_list_free (queue, false);
+  _cdio_list_free (queue, false, NULL);
 }
 
 VcdTreeNode_t *_vcd_tree_node_parent (VcdTreeNode_t *p_node)
diff -Naur orig/lib/dict.h patched/lib/dict.h
--- orig/lib/dict.h	2017-12-22 02:20:13.764917831 +0100
+++ patched/lib/dict.h	2017-12-22 02:45:28.860501185 +0100
@@ -158,7 +158,7 @@
       free (p->key);
       free (p->buf);
 
-      _cdio_list_node_free (node, true);
+      _cdio_list_node_free (node, true, NULL);
     }
 }
 
diff -Naur orig/lib/files.c patched/lib/files.c
--- orig/lib/files.c	2017-12-22 02:20:13.764917831 +0100
+++ patched/lib/files.c	2017-12-22 03:06:32.639284667 +0100
@@ -712,7 +712,7 @@
 
   }
 
-  _cdio_list_free (p_all_aps, true);
+  _cdio_list_free (p_all_aps, true, NULL);
 
   vcd_assert (scanpoints == _cdio_list_length (p_scantable));
 
@@ -754,7 +754,7 @@
 
   vcd_assert (n = _get_scanpoint_count (p_vcdobj));
 
-  _cdio_list_free (p_scantable, true);
+  _cdio_list_free (p_scantable, true, NULL);
 }
 
 static uint32_t 
diff -Naur orig/lib/info.c patched/lib/info.c
--- orig/lib/info.c	2005-08-03 10:15:37.134739579 +0200
+++ patched/lib/info.c	2017-12-22 02:35:57.673120577 +0100
@@ -106,7 +106,7 @@
 
   if (NULL == p_obj->seg_sizes || 0 == num_segments) return;
 
-  entlist = iso9660_fs_readdir(p_obj->img, "SEGMENT", true);
+  entlist = iso9660_fs_readdir(p_obj->img, "SEGMENT");
 
   i=0;
   _CDIO_LIST_FOREACH (entnode, entlist) {
@@ -141,7 +141,7 @@
     vcd_warn ("Number of segments found %d is not number of segments %d", 
               i, num_segments);
 
-  _cdio_list_free (entlist, true);
+  _cdio_list_free (entlist, true, NULL);
 
   
 #if 0
@@ -1747,10 +1747,10 @@
 
   ret = vcdinf_visit_lot(&pbc_ctx);
   if (NULL != p_obj->offset_x_list) 
-    _cdio_list_free(p_obj->offset_x_list, true);
+    _cdio_list_free(p_obj->offset_x_list, true, NULL);
   p_obj->offset_x_list = pbc_ctx.offset_x_list;
   if (NULL != p_obj->offset_list) 
-    _cdio_list_free(p_obj->offset_list, true);
+    _cdio_list_free(p_obj->offset_list, true, NULL);
   p_obj->offset_list = pbc_ctx.offset_list;
   return ret;
 }
@@ -2081,9 +2081,9 @@
 {
   if (p_obj != NULL) {
     if (p_obj->offset_list != NULL) 
-      _cdio_list_free(p_obj->offset_list, true);
+      _cdio_list_free(p_obj->offset_list, true, NULL);
     if (p_obj->offset_x_list != NULL) 
-      _cdio_list_free(p_obj->offset_x_list, true);
+      _cdio_list_free(p_obj->offset_x_list, true, NULL);
     free(p_obj->seg_sizes);
     free(p_obj->lot);
     free(p_obj->lot_x);
diff -Naur orig/lib/info_private.c patched/lib/info_private.c
--- orig/lib/info_private.c	2017-12-22 02:20:13.764917831 +0100
+++ patched/lib/info_private.c	2017-12-22 02:38:44.331182463 +0100
@@ -110,7 +110,7 @@
           if (last_lid > max_seen_lid) max_seen_lid=last_lid;
         }
       }
-    _cdio_list_free(unused_lids, true);
+    _cdio_list_free(unused_lids, true, NULL);
   }
 }
 
diff -Naur orig/lib/mpeg_stream.c patched/lib/mpeg_stream.c
--- orig/lib/mpeg_stream.c	2017-12-22 02:20:13.768917890 +0100
+++ patched/lib/mpeg_stream.c	2017-12-22 03:12:08.624574482 +0100
@@ -84,7 +85,7 @@
 
   for (i = 0; i < 3; i++)
     if (obj->info.shdr[i].aps_list)
-      _cdio_list_free (obj->info.shdr[i].aps_list, true);
+      _cdio_list_free (obj->info.shdr[i].aps_list, true, NULL);
 
   free (obj);
 }
diff -Naur orig/lib/pbc.c patched/lib/pbc.c
--- orig/lib/pbc.c	2005-06-18 05:27:24.134739579 +0200
+++ patched/lib/pbc.c	2017-12-22 03:15:39.603820736 +0100
@@ -848,12 +848,12 @@
   switch (p_pbc->type)
     {
     case PBC_PLAYLIST:
-      _cdio_list_free (p_pbc->item_id_list, false);
+      _cdio_list_free (p_pbc->item_id_list, false, NULL);
       break;
 
     case PBC_SELECTION:
-      _cdio_list_free (p_pbc->select_id_list, true);
-      _cdio_list_free (p_pbc->select_area_list, true);
+      _cdio_list_free (p_pbc->select_id_list, true, NULL);
+      _cdio_list_free (p_pbc->select_area_list, true, NULL);
       break;
       
     case PBC_END:
diff -Naur orig/lib/vcd.c patched/lib/vcd.c
--- orig/lib/vcd.c	2017-12-22 02:20:13.772917950 +0100
+++ patched/lib/vcd.c	2017-12-22 02:48:52.299299083 +0100
@@ -355,7 +355,7 @@
   p_vcdobj->relative_end_extent -= length;
 
   /* shift up */
-  _cdio_list_node_free (node, true);
+  _cdio_list_node_free (node, true, NULL);
 }
 
 int
@@ -708,13 +708,13 @@
       free (p->iso_pathname);
     }
 
-  _cdio_list_free (p_obj->custom_file_list, true);
+  _cdio_list_free (p_obj->custom_file_list, true, NULL);
 
-  _cdio_list_free (p_obj->custom_dir_list, true);
+  _cdio_list_free (p_obj->custom_dir_list, true, NULL);
 
   while (_cdio_list_length (p_obj->mpeg_sequence_list))
     _vcd_obj_remove_mpeg_track (p_obj, 0);
-  _cdio_list_free (p_obj->mpeg_sequence_list, true);
+  _cdio_list_free (p_obj->mpeg_sequence_list, true, NULL);
 
   free (p_obj);
 }
@@ -2248,7 +2248,7 @@
   _vcd_salloc_destroy (p_obj->iso_bitmap);
 
   _dict_clean (p_obj);
-  _cdio_list_free (p_obj->buffer_dict_list, true);
+  _cdio_list_free (p_obj->buffer_dict_list, true, NULL);
 }
 
 int
@@ -2348,7 +2348,7 @@
 
     vcd_image_sink_set_cuesheet (p_image_sink, p_cue_list);
 
-    _cdio_list_free (p_cue_list, true);
+    _cdio_list_free (p_cue_list, true, NULL);
   }
 
   /* and now for the pay load */
