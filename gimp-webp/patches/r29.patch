diff -Naur orig/debian/changelog patched/debian/changelog
--- orig/debian/changelog	2012-05-09 06:39:47.000000000 +0200
+++ patched/debian/changelog	2014-02-08 04:14:30.000000000 +0100
@@ -1,3 +1,12 @@
+gimp-webp (0.2-1) precise; urgency=low
+
+  * Added support for lossless WebP images.
+  * Added support for reading and writing images with alpha channels.
+  * Added preset selection to export dialog.
+  * Progress is now displayed for exporting images.
+
+ -- Nathan Osman <admin@quickmediasolutions.com>  Tue, 07 Aug 2012 16:12:19 -0700
+
 gimp-webp (0.1.1-1) precise; urgency=low
 
   * Updated to support Gimp 2.8
diff -Naur orig/debian/control patched/debian/control
--- orig/debian/control	2012-05-09 06:39:47.000000000 +0200
+++ patched/debian/control	2014-02-08 04:14:30.000000000 +0100
@@ -9,5 +9,6 @@
 Package: gimp-webp
 Architecture: any
 Depends: ${shlibs:Depends}, ${misc:Depends}
-Description: A Gimp plugin that provides WebP support.
- This plugin allows the Gimp to open and save images compressed using the WebP image format.
+Description: Gimp plugin that provides WebP support.
+ This plugin allows the Gimp to open and save images compressed using the WebP
+ image format.
diff -Naur orig/Makefile patched/Makefile
--- orig/Makefile	2012-05-09 06:39:47.000000000 +0200
+++ patched/Makefile	2014-02-08 04:14:30.000000000 +0100
@@ -1,15 +1,12 @@
 # Predefined constants
-CC      = gcc
-TARGET  = file-webp
-SRC_DIR = src
-OBJ_DIR = obj
-CFLAGS  = $(shell pkg-config --cflags gtk+-2.0) \
-          $(shell pkg-config --cflags gimp-2.0)
-LFLAGS  = $(shell pkg-config --libs glib-2.0) \
-          $(shell pkg-config --libs gtk+-2.0) \
-          $(shell pkg-config --libs gimp-2.0) \
-          $(shell pkg-config --libs gimpui-2.0) \
-          -lwebp
+CC         = gcc
+SRC_DIR    = src
+OBJ_DIR    = obj
+CFLAGS     = $(shell pkg-config --cflags gtk+-2.0 gimp-2.0 libwebp)\
+             -Wall
+LFLAGS     = $(shell pkg-config --libs glib-2.0 gtk+-2.0 gimp-2.0 gimpui-2.0 libwebp)
+TARGET     = file-webp
+PLUGIN_DIR = $(shell pkg-config --variable=gimplibdir gimp-2.0)/plug-ins
 
 # File definitions
 SRC_FILES=$(wildcard $(SRC_DIR)/*.c)
@@ -25,14 +22,14 @@
 	test -d $(OBJ_DIR) || mkdir -p $(OBJ_DIR)
 
 clean:
-	rm -rf $(OBJ_DIR)
-	rm $(TARGET)
+	test ! -d $(OBJ_DIR) || rm -rf $(OBJ_DIR)
+	test ! -f $(TARGET) || rm $(TARGET)
 
 install:
-	mkdir -p $(DESTDIR)$(exec_prefix)/lib/gimp/2.0/plug-ins
-	cp $(TARGET) $(DESTDIR)$(exec_prefix)/lib/gimp/2.0/plug-ins
+	mkdir -p $(DESTDIR)$(PLUGIN_DIR)
+	cp $(TARGET) $(DESTDIR)$(PLUGIN_DIR)
 
 uninstall:
-	rm $(DESTDIR)$(exec_prefix)/lib/gimp/2.0/plug-ins/$(TARGET)
+	test ! -f $(DESTDIR)$(PLUGIN_DIRN)/$(TARGET) || rm $(DESTDIR)$(PLUGIN_DIR)/$(TARGET)
 
 .PHONY: clean install uninstall
diff -Naur orig/README patched/README
--- orig/README	2012-05-09 06:39:47.000000000 +0200
+++ patched/README	2014-02-08 04:14:30.000000000 +0100
@@ -6,7 +6,12 @@
 
     http://code.google.com/speed/webp/download.html
 
+You will also need the GTK+ and Gimp header files installed.
+
 After that, you can compile it on Unix / Linux using:
 
-    export LIBS=-lwebp
-    gimptool-2.0 --install file-webp.c
+    make
+
+The plugin can be installed by running:
+
+    sudo make install
diff -Naur orig/src/export-dialog.c patched/src/export-dialog.c
--- orig/src/export-dialog.c	2012-05-09 06:39:47.000000000 +0200
+++ patched/src/export-dialog.c	2014-02-08 04:14:30.000000000 +0100
@@ -16,95 +16,330 @@
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/
 
-#include <stdio.h>
 #include <libgimp/gimp.h>
 #include <libgimp/gimpui.h>
+#include <libgimpbase/gimpbase.h>
+#include <string.h>
 
-extern const char SAVE_PROCEDURE[];
-extern const char BINARY_NAME[];
+#include "export-dialog.h"
+#include "file-webp.h"
 
-// Response structure
-struct webp_data {
-    int       * response;
-    GtkObject * quality_scale;
-    float     * quality;
+/* Map of WebP preset values to text descriptions. */
+typedef struct {
+    WebPPreset id;
+    const gchar * description;
+} WebPPresetDescription;
+
+WebPPresetDescription preset_map[] = {
+    { WEBP_PRESET_DEFAULT, "Default" },
+    { WEBP_PRESET_PICTURE, "Picture" },
+    { WEBP_PRESET_PHOTO,   "Photo"   },
+    { WEBP_PRESET_DRAWING, "Drawing" },
+    { WEBP_PRESET_ICON,    "Icon"    },
+    { WEBP_PRESET_TEXT,    "Text"    },
+    { -1, NULL }
 };
 
-void on_response(GtkDialog * dialog,
-                 gint response_id,
-                 gpointer user_data)
-{
-    // Basically all we want to do is grab the value
-    // of the slider and store it in user_data.
-    struct webp_data * data = user_data;
-    GtkHScale * hscale = GIMP_SCALE_ENTRY_SCALE(data->quality_scale);
-    gdouble returned_quality;
-
-    // Get the value
-    returned_quality = gtk_range_get_value(GTK_RANGE(hscale));
-    *(data->quality) = returned_quality;
+/* Storage for grabbing data from the controls and populating the config. */
+typedef struct {
+    int          response;
+    GtkWidget  * dialog;
+    GtkWidget  * preset;
+    GtkObject  * preset_quality;
+    GtkWidget  * custom_vbox;
+    GtkWidget  * color_lossless;
+    GtkObject  * color_quality;
+    GtkWidget  * alpha_lossless;
+    GtkObject  * alpha_quality;
+    WebPConfig * config;
+} WebPControls;
+
+/* Utility method for obtaining a WebPPreset given its descriptive name.
+   Returns -1 if the name was not found. */
+WebPPreset get_webp_preset_from_description(const gchar * description)
+{
+    /* Loop through the map, comparing the strings. */
+    WebPPresetDescription * i = preset_map;
+    while(i->description && strcmp(i->description, description))
+        ++i;
+    
+    /* Either we found a match or we've reached the
+       terminating entry in the map. */
+    return i->id;
+}
 
-    // Quit the loop
-    gtk_main_quit();
+/* Utility method for filling preset list with values. */
+void fill_preset_list(GtkComboBoxText * preset)
+{
+    /* Loop through the preset map until we reach an entry
+       with a NULL description. */
+    WebPPresetDescription * i = preset_map;
+    while(i->description)
+    {
+        gtk_combo_box_text_append_text(preset, i->description);
+        ++i;
+    }
+    
+    /* Insert "custom" item. */
+    gtk_combo_box_text_append_text(preset, "Custom");
+    
+    /* Activate the first item in the list ("Default"). */
+    gtk_combo_box_set_active(GTK_COMBO_BOX(preset), 0);
+}
 
-    if(response_id == GTK_RESPONSE_OK)
-        *(data->response) = 1;
+/* Event handler for toggling the enabled state of the scale
+   when the associated lossless checkbox is checked. */
+void on_lossless_toggled(GtkWidget * lossless,
+                         gpointer user_data)
+{
+    gboolean enabled = !gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(lossless));
+    
+    /* Enable / disable the spinbox based on the checkbox. */
+    gimp_scale_entry_set_sensitive(GTK_OBJECT(user_data), enabled);
 }
 
-int export_dialog(float * quality)
+/* Utility method for creating scale (and optionally lossless checkbox). */
+void create_quality_widgets(const gchar * label_text,
+                            GtkBox * parent,
+                            GtkWidget ** lossless_radio,
+                            GtkObject ** lossy_quality)
 {
-    int response = 0;
-    struct webp_data data;
-    GtkWidget * dialog;
-    GtkWidget * vbox;
     GtkWidget * label;
+    GtkWidget * hbox,
+              * vbox;
+    GtkWidget * alignment;
     GtkWidget * table;
-    GtkObject * scale;
-
-    // Create the dialog
-    dialog = gimp_export_dialog_new("WebP",
-                                    BINARY_NAME,
-                                    SAVE_PROCEDURE);
-
-    // Create the VBox
-    vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 10);
-    gtk_container_set_border_width(GTK_CONTAINER(vbox), 10);
-    gtk_box_pack_start(GTK_BOX(GTK_DIALOG(dialog)->vbox),
-                       vbox, TRUE, TRUE, 2);
+    
+    /* Create the label if requested. */
+    if(label_text)
+    {
+        label = gtk_label_new(label_text);
+        gtk_misc_set_alignment(GTK_MISC(label), 0, 0);
+        gtk_box_pack_start(parent, label, FALSE, FALSE, 0);
+        gtk_widget_show(label);
+    }
+    
+    /* Create the horizontal box. */
+    hbox = gtk_hbox_new(FALSE, 0);
+    gtk_box_pack_start(parent, hbox, FALSE, FALSE, 0);
+    gtk_widget_show(hbox);
+    
+    /* Insert the spacer. */
+    alignment = gtk_alignment_new(0.0f, 0.0f, 1.0f, 1.0f);
+    gtk_box_pack_start(GTK_BOX(hbox), alignment, FALSE, FALSE, 10);
+    gtk_widget_show(alignment);
+    
+    /* Create the vertical box. */
+    vbox = gtk_vbox_new(FALSE, 0);
+    gtk_box_pack_start(GTK_BOX(hbox), vbox, TRUE, TRUE, 0);
     gtk_widget_show(vbox);
-
-    // Create the label
-    label = gtk_label_new("The options below allow you to customize\nthe WebP image that is created.");
-    gtk_box_pack_start(GTK_BOX(vbox), label, FALSE, FALSE, 2);
-    gtk_widget_show(label);
-
-    // Create the table
+    
+    /* Create the table and scale, but don't pack it yet. */
     table = gtk_table_new(1, 3, FALSE);
-    gtk_box_pack_start(GTK_BOX(vbox), table, FALSE, FALSE, 6);
     gtk_widget_show(table);
+    *lossy_quality = gimp_scale_entry_new(GTK_TABLE(table), 0, 0,
+                                          "Quality:",
+                                          150, 0,
+                                          90.0f, 0.0f, 100.0f, 1.0f, 10.0f,
+                                          0, TRUE, 0.0f, 0.0f,
+                                          "Quality for encoding the channel",
+                                          NULL);
+    
+    if(lossless_radio)
+    {
+        GtkWidget * lossy_radio;
+        GtkWidget * lossy_hbox;
+        
+        /* Create the lossless radio button. */
+        *lossless_radio =
+          gtk_radio_button_new_with_label(NULL, "Lossless");
+        gtk_box_pack_start(GTK_BOX(vbox), *lossless_radio, FALSE, FALSE, 0);
+        gtk_widget_show(*lossless_radio);
+        
+        /* Create the lossy hbox. */
+        lossy_hbox = gtk_hbox_new(FALSE, 0);
+        gtk_box_pack_start(GTK_BOX(vbox), lossy_hbox, FALSE, FALSE, 0);
+        gtk_widget_show(lossy_hbox);
+        
+        /* Create the lossy radio button and set it as toogled. */
+        lossy_radio =
+          gtk_radio_button_new_with_label_from_widget(GTK_RADIO_BUTTON(*lossless_radio), "Lossy - ");
+        gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(lossy_radio), TRUE);
+        gtk_box_pack_start(GTK_BOX(lossy_hbox), lossy_radio, FALSE, FALSE, 0);
+        gtk_widget_show(lossy_radio);
+        
+        /* When the lossy radio button is toggled, we disable the scale. */
+        g_signal_connect(*lossless_radio, "toggled", G_CALLBACK(on_lossless_toggled), *lossy_quality);
+        
+        /* Pack the scale into the lossy radio button. */
+        gtk_box_pack_start(GTK_BOX(lossy_hbox), table, FALSE, FALSE, 0);
+    }
+    else
+        /* Pack the scale into the vbox. */
+        gtk_box_pack_start(GTK_BOX(vbox), table, FALSE, FALSE, 0);
+}
 
-    // Create the scale
-    scale = gimp_scale_entry_new(GTK_TABLE(table), 0, 0,
-                                 "Quality:",
-                                 150, 0,
-                                 90.0f, 0.0f, 100.0f, 1.0f, 10.0f,
-                                 0, TRUE, 0.0f, 0.0f,
-                                 "Quality for encoding the image",
-                                 NULL);
-
-    // Connect to the response signal
-    data.response      = &response;
-    data.quality_scale = scale;
-    data.quality       = quality;
-
-    g_signal_connect(dialog, "response", G_CALLBACK(on_response),   &data);
-    g_signal_connect(dialog, "destroy",  G_CALLBACK(gtk_main_quit), NULL);
-
-    // Show the dialog and run it
-    gtk_widget_show(dialog);
-    gimp_dialog_run(GIMP_DIALOG(dialog));
+/* Handler for showing / hiding the custom settings when the preset is changed. */
+void on_preset_changed(GtkWidget * preset,
+                       WebPControls * controls)
+{
+    /* Determine which preset the user has selected (if any). */
+    gchar * selection = gtk_combo_box_text_get_active_text(GTK_COMBO_BOX_TEXT(preset));
+    
+    /* Look through our map to try to find a match. */
+    WebPPreset selected_preset = get_webp_preset_from_description(selection);
+    g_free(selection);
+    
+    /* Enable controls based on if "custom" is selected. */
+    gtk_widget_set_visible(controls->custom_vbox, selected_preset == -1);
+    gimp_scale_entry_set_sensitive(GTK_OBJECT(controls->preset_quality), selected_preset != -1);
+    
+    /* Recalculate the size of the dialog (there ought to be an easier way...). */
+    gtk_window_reshow_with_initial_size(GTK_WINDOW(controls->dialog));
+}
 
+/* Handler for accepting or rejecting the dialog box. */
+void on_dialog_response(GtkWidget * dialog,
+                        gint response_id,
+                        WebPControls * controls)
+{
+    controls->response = response_id;
+    
+    /* Only do anything if the user has accepted the dialog. */
+    if(response_id == GTK_RESPONSE_OK)
+    {
+        /* Determine which preset the user has selected (if any). */
+        gchar * selection = gtk_combo_box_text_get_active_text(GTK_COMBO_BOX_TEXT(controls->preset));
+        
+        /* Look through our map to try to find a match. */
+        WebPPreset selected_preset = get_webp_preset_from_description(selection);
+        g_free(selection);
+        
+        /* Check to see if we found one. */
+        if(selected_preset != -1)
+        {
+            /* Load the preset. */
+            /* TODO: check for error here. */
+            WebPConfigPreset(controls->config,
+                             selected_preset,
+                             gtk_range_get_value(GTK_RANGE(GIMP_SCALE_ENTRY_SCALE(controls->preset_quality))));
+        }
+        else
+        {
+            /* TODO: check for error here too. */
+            WebPConfigInit(controls->config);
+            
+            /* Otherwise, the user has selected the custom preset (which... really isn't
+               a preset :P) Fetch the lossless and quality values for the color channel. */
+            controls->config->lossless =
+              gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(controls->color_lossless));
+            controls->config->quality =
+              gtk_range_get_value(GTK_RANGE(GIMP_SCALE_ENTRY_SCALE(controls->color_quality)));
+            
+            /* Do the same thing for the alpha channel. */
+            controls->config->alpha_quality =
+              gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(controls->alpha_lossless))?
+              100:gtk_range_get_value(GTK_RANGE(GIMP_SCALE_ENTRY_SCALE(controls->alpha_quality)));
+        }
+    }
+    
     gtk_widget_destroy(dialog);
+}
+
+/* Displays the dialog. */
+int export_dialog(WebPConfig * config)
+{
+    GtkWidget * description_label;
+    GtkWidget * preset_box;
+    GtkWidget * preset_label;
+    GtkWidget * separator;
+    WebPControls controls;
+    
+    controls.config = config;
+    
+    /* Create the dialog - using the new export dialog for Gimp 2.7+
+       and falling back to a standard dialog for < Gimp 2.7. */
+#if (GIMP_MAJOR_VERSION == 2 && GIMP_MINOR_VERSION >= 7) || GIMP_MAJOR_VERSION > 2
+    controls.dialog = gimp_export_dialog_new("WebP",
+                                             BINARY_NAME,
+                                             SAVE_PROCEDURE);
+#else
+    controls.dialog = gimp_dialog_new("WebP",
+                                      BINARY_NAME,
+                                      NULL, 0,
+                                      NULL,
+                                      SAVE_PROCEDURE,
+                                      GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,
+                                      GTK_STOCK_SAVE,   GTK_RESPONSE_OK,
+                                      NULL);
+#endif
+    
+    /* Set the window border to 10 pixels and the spacing to 5 pixels. */
+    gtk_container_set_border_width(GTK_CONTAINER(controls.dialog), 10);
+    gtk_box_set_spacing(GTK_BOX(GTK_DIALOG(controls.dialog)->vbox), 5);
+    
+    /* Create the description label. */
+    description_label = gtk_label_new("The options below allow you to customize the WebP image\nthat is created.");
+    gtk_misc_set_alignment(GTK_MISC(description_label), 0, 0);
+    gtk_box_pack_start(GTK_BOX(GTK_DIALOG(controls.dialog)->vbox), description_label, FALSE, FALSE, 0);
+    gtk_widget_show(description_label);
+    
+    /* Create the horizontal box for the preset. */
+    preset_box = gtk_hbox_new(FALSE, 20);
+    gtk_box_pack_start(GTK_BOX(GTK_DIALOG(controls.dialog)->vbox), preset_box, FALSE, FALSE, 0);
+    gtk_widget_show(preset_box);
+    
+    /* Create the preset label. */
+    preset_label = gtk_label_new("Preset:");
+    gtk_box_pack_start(GTK_BOX(preset_box), preset_label, FALSE, FALSE, 0);
+    gtk_widget_show(preset_label);
+    
+    /* Create the preset combo box. */
+    controls.preset = gtk_combo_box_text_new();
+    gtk_box_pack_start(GTK_BOX(preset_box), controls.preset, TRUE, TRUE, 0);
+    gtk_widget_show(controls.preset);
+    
+    /* Add some presets. */
+    fill_preset_list(GTK_COMBO_BOX_TEXT(controls.preset));
+    
+    /* Create the quality controls for the presets. */
+    create_quality_widgets(NULL,
+                           GTK_BOX(GTK_DIALOG(controls.dialog)->vbox),
+                           NULL,
+                           &controls.preset_quality);
+    
+    /* Create the vbox for the custom settings. */
+    controls.custom_vbox = gtk_vbox_new(FALSE, 10);
+    gtk_box_pack_start(GTK_BOX(GTK_DIALOG(controls.dialog)->vbox), controls.custom_vbox, FALSE, FALSE, 0);
+    
+    /* Insert a separator. */
+    separator = gtk_hseparator_new();
+    gtk_box_pack_start(GTK_BOX(controls.custom_vbox), separator, FALSE, FALSE, 0);
+    gtk_widget_show(separator);
+    
+    /* Create the controls for the channel options. */
+    create_quality_widgets("Color channels:",
+                           GTK_BOX(controls.custom_vbox),
+                           &controls.color_lossless,
+                           &controls.color_quality);
+    
+    create_quality_widgets("Alpha channel:",
+                           GTK_BOX(controls.custom_vbox),
+                           &controls.alpha_lossless,
+                           &controls.alpha_quality);
+    
+    /* Connect to the changed signal in the preset list so we can
+       enable / disable the controls for custom settings. */
+    g_signal_connect(controls.preset, "changed", G_CALLBACK(on_preset_changed), &controls);
+    
+    /* We need to store the response in the WebPControls structure
+       when the dialog box is accepted. */
+    g_signal_connect(controls.dialog, "response", G_CALLBACK(on_dialog_response), &controls);
+    g_signal_connect(controls.dialog, "destroy",  G_CALLBACK(gtk_main_quit),      NULL);
+
+    /* Show the dialog and run the main loop. */
+    gtk_widget_show(controls.dialog);
+    gtk_main();
 
-    return response;
+    return controls.response == GTK_RESPONSE_OK;
 }
diff -Naur orig/src/export-dialog.h patched/src/export-dialog.h
--- orig/src/export-dialog.h	2012-05-09 06:39:47.000000000 +0200
+++ patched/src/export-dialog.h	2014-02-08 04:14:30.000000000 +0100
@@ -16,4 +16,15 @@
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/
 
-int export_dialog(float *);
+#ifndef EXPORT_DIALOG_H
+#define EXPORT_DIALOG_H
+
+#include <webp/encode.h>
+
+/* Displays the export dialog and returns 1 if the user
+   accepted the export and 0 if the user cancelled the
+   process. The chosen parameters are entered into the
+   specified config. */
+int export_dialog(WebPConfig *);
+
+#endif // EXPORT_DIALOG_H
diff -Naur orig/src/file-webp.c patched/src/file-webp.c
--- orig/src/file-webp.c	2012-05-09 06:39:47.000000000 +0200
+++ patched/src/file-webp.c	2014-02-08 04:14:30.000000000 +0100
@@ -16,23 +16,24 @@
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/
 
-#include <string.h>
 #include <libgimp/gimp.h>
 #include <libgimp/gimpui.h>
+#include <string.h>
+#include <webp/encode.h>
 
 #include "read-webp.h"
 #include "write-webp.h"
 #include "export-dialog.h"
 
+const char BINARY_NAME[]    = "file-webp";
 const char LOAD_PROCEDURE[] = "file-webp-load";
 const char SAVE_PROCEDURE[] = "file-webp-save";
-const char BINARY_NAME[]    = "file-webp";
 
-// Predeclare our entrypoints
+/* Predeclare our entrypoints. */
 void query();
 void run(const gchar *, gint, const GimpParam *, gint *, GimpParam **);
 
-// Declare our plugin entry points
+/* Declare our plugin entry points. */
 GimpPlugInInfo PLUG_IN_INFO = {
     NULL,
     NULL,
@@ -42,10 +43,10 @@
 
 MAIN()
 
-// The query function
+/* This function registers our load and save handlers. */
 void query()
 {
-    // Load arguments
+    /* Load arguments. */
     static const GimpParamDef load_arguments[] =
     {
         { GIMP_PDB_INT32,  "run-mode",     "Interactive, non-interactive" },
@@ -53,24 +54,24 @@
         { GIMP_PDB_STRING, "raw-filename", "The name entered" }
     };
 
-    // Load return values
+    /* Load return values. */
     static const GimpParamDef load_return_values[] =
     {
         { GIMP_PDB_IMAGE, "image", "Output image" }
     };
 
-    // Save arguments
+    /* Save arguments. */
     static const GimpParamDef save_arguments[] =
     {
         { GIMP_PDB_INT32,    "run-mode",     "Interactive, non-interactive" },
         { GIMP_PDB_IMAGE,    "image",        "Input image" },
         { GIMP_PDB_DRAWABLE, "drawable",     "Drawable to save" },
-        { GIMP_PDB_STRING,   "filename",     "The name of the file to save the image in" },
+        { GIMP_PDB_STRING,   "filename",     "The name of the file to save the image to" },
         { GIMP_PDB_STRING,   "raw-filename", "The name entered" },
         { GIMP_PDB_FLOAT,    "quality",      "Quality of the image (0 <= quality <= 100)" }
     };
 
-    // Install the load procedure
+    /* Install the load procedure. */
     gimp_install_procedure(LOAD_PROCEDURE,
                            "Loads images in the WebP file format",
                            "Loads images in the WebP file format",
@@ -85,7 +86,7 @@
                            load_arguments,
                            load_return_values);
 
-    // Install the save procedure
+    /* Install the save procedure. */
     gimp_install_procedure(SAVE_PROCEDURE,
                            "Saves files in the WebP image format",
                            "Saves files in the WebP image format",
@@ -100,54 +101,54 @@
                            save_arguments,
                            NULL);
 
-    // Register the load handlers
+    /* Register the load handlers. */
     gimp_register_file_handler_mime(LOAD_PROCEDURE, "image/webp");
     gimp_register_load_handler(LOAD_PROCEDURE, "webp", "");
 
-    // Now register the save handlers
+    /* Now register the save handlers. */
     gimp_register_file_handler_mime(SAVE_PROCEDURE, "image/webp");
     gimp_register_save_handler(SAVE_PROCEDURE, "webp", "");
 }
 
-// The run function
+/* This function is called when one of our methods is invoked. */
 void run(const gchar * name,
          gint nparams,
          const GimpParam * param,
          gint * nreturn_vals,
          GimpParam ** return_vals)
 {
-    // Create the return value.
+    /* Create the return value. */
     static GimpParam return_values[2];
     *nreturn_vals = 1;
     *return_vals  = return_values;
 
-    // Set the return value to success by default
+    /* Set the return value to success by default. */
     return_values[0].type          = GIMP_PDB_STATUS;
     return_values[0].data.d_status = GIMP_PDB_SUCCESS;
 
-    // Check to see if this is the load procedure
+    /* Check to see if this is the load procedure. */
     if(!strcmp(name, LOAD_PROCEDURE))
     {
         int new_image_id;
 
-        // Check to make sure all parameters were supplied
+        /* Check to make sure all parameters were supplied. */
         if(nparams != 3)
         {
             return_values[0].data.d_status = GIMP_PDB_CALLING_ERROR;
             return;
         }
 
-        // Now read the image
+        /* Now read the image. */
         new_image_id = read_webp(param[1].data.d_string);
 
-        // Check for an error
+        /* Check for an error. */
         if(new_image_id == -1)
         {
             return_values[0].data.d_status = GIMP_PDB_EXECUTION_ERROR;
             return;
         }
 
-        // Fill in the second return value
+        /* Fill in the second return value. */
         *nreturn_vals = 2;
 
         return_values[1].type         = GIMP_PDB_IMAGE;
@@ -156,44 +157,49 @@
     else if(!strcmp(name, SAVE_PROCEDURE))
     {
         gint32 image_id, drawable_id;
-        int status = 1;
-        float quality;
+        int status = 0;
+        WebPConfig config;
         GimpExportReturn export_ret;
 
-        // Check to make sure all of the parameters were supplied
+        /* Check to make sure all of the parameters were supplied. */
         if(nparams != 6)
         {
             return_values[0].data.d_status = GIMP_PDB_CALLING_ERROR;
             return;
         }
 
+        /* Grab the image and drawable from the list of parameters. */
         image_id    = param[1].data.d_int32;
         drawable_id = param[2].data.d_int32;
 
-        // Try to export the image
+        /* Try to export the image. */
         gimp_ui_init(BINARY_NAME, FALSE);
         export_ret = gimp_export_image(&image_id,
                                        &drawable_id,
                                        "WEBP",
-                                       GIMP_EXPORT_CAN_HANDLE_RGB);
-
+                                       GIMP_EXPORT_CAN_HANDLE_RGB | GIMP_EXPORT_CAN_HANDLE_ALPHA);
+        
+        /* If the user can successfully export or chose to ignore warnings, then
+           we can continue with the export process. */
         switch(export_ret)
         {
             case GIMP_EXPORT_EXPORT:
             case GIMP_EXPORT_IGNORE:
 
-                // Now get the settings
-                if(!export_dialog(&quality))
+                /* Display the export settings dialog, */
+                if(!export_dialog(&config))
                 {
                     return_values[0].data.d_status = GIMP_PDB_CANCEL;
                     return;
                 }
 
-                status = write_webp(param[3].data.d_string,
-                                    drawable_id, quality);
+                /* Make an attempt to write the image to disk. */
+                status = write_webp(param[3].data.d_string, drawable_id, &config);
                 gimp_image_delete(image_id);
 
                 break;
+
+            /* The user cancelled the process, so we abort it. */
             case GIMP_EXPORT_CANCEL:
                 return_values[0].data.d_status = GIMP_PDB_CANCEL;
                 return;
diff -Naur orig/src/file-webp.h patched/src/file-webp.h
--- orig/src/file-webp.h	1970-01-01 01:00:00.000000000 +0100
+++ patched/src/file-webp.h	2014-02-08 04:14:30.000000000 +0100
@@ -0,0 +1,25 @@
+/*=======================================================================
+              WebP load / save plugin for the GIMP
+                 Copyright 2012 - Nathan Osman
+
+ This program is free software: you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation, either version 3 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program.  If not, see <http://www.gnu.org/licenses/>.
+=======================================================================*/
+
+#ifndef FILE_WEBP_H
+#define FILE_WEBP_H
+
+extern const char BINARY_NAME[];
+extern const char SAVE_PROCEDURE[];
+
+#endif // FILE_WEBP_H
diff -Naur orig/src/read-webp.c patched/src/read-webp.c
--- orig/src/read-webp.c	2012-05-09 06:39:47.000000000 +0200
+++ patched/src/read-webp.c	2014-02-08 04:14:30.000000000 +0100
@@ -16,13 +16,13 @@
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/
 
-#include "read-webp.h"
-
 #include <stdio.h>
 #include <stdlib.h>
 #include <libgimp/gimp.h>
 #include <webp/decode.h>
 
+#include "read-webp.h"
+
 int read_webp(const gchar * filename)
 {
     FILE * file;
@@ -35,71 +35,68 @@
     GimpDrawable * drawable;
     GimpPixelRgn rgn;
 
-
-    // Try to open the file
+    /* Try to open the file. */
     file = fopen(filename, "rb");
     if(!file)
         return -1;
 
-    // Get the file size
+    /* Get the file size. */
     fseek(file, 0, SEEK_END);
     filesize = ftell(file);
     fseek(file, 0, SEEK_SET);
 
-    // Now prepare a buffer of that size
-    // and read the data.
+    /* Now prepare a buffer of that size and read the data. */
     data = malloc(filesize);
-    fread(data, filesize, 1, file);
+    if(!data || !fread(data, filesize, 1, file))
+        return -1;
 
-    // Close the file
+    /* Close the file. */
     fclose(file);
 
-    // Perform the load procedure and free the raw data.
-    image_data = WebPDecodeRGB(data, filesize, &width, &height);
+    /* Perform the load procedure and free the raw data. */
+    image_data = WebPDecodeRGBA(data, filesize, &width, &height);
     free(data);
 
-    // Check to make sure that the load was successful
+    /* Check to make sure that the load was successful. */
     if(!image_data)
         return -1;
 
-    // Now create the new RGBA image.
+    /* Now create the new RGBA image. */
     new_image_id = gimp_image_new(width, height, GIMP_RGB);
 
-    // Create the new layer
+    /* Create the new layer. */
     new_layer_id = gimp_layer_new(new_image_id,
                                   "Background",
                                   width, height,
-                                  GIMP_RGB_IMAGE,
+                                  GIMP_RGBA_IMAGE,
                                   100,
                                   GIMP_NORMAL_MODE);
 
-    // Get the drawable for the layer
+    /* Get the drawable for the layer. */
     drawable = gimp_drawable_get(new_layer_id);
 
-    // Get a pixel region from the layer
+    /* Get a pixel region from the layer. */
     gimp_pixel_rgn_init(&rgn,
                         drawable,
                         0, 0,
                         width, height,
                         TRUE, FALSE);
 
-    // Now FINALLY set the pixel data
+    /* Now FINALLY set the pixel data. */
     gimp_pixel_rgn_set_rect(&rgn,
                             image_data,
                             0, 0,
                             width, height);
 
-    // We're done with the drawable
+    /* We're done with the drawable. */
     gimp_drawable_flush(drawable);
     gimp_drawable_detach(drawable);
 
-    // Free the image data
-    free((void *)image_data);
+    /* Free the image data. */
+    free(image_data);
 
-    // Add the layer to the image
+    /* Add the layer to the image and set the filename. */
     gimp_image_add_layer(new_image_id, new_layer_id, 0);
-
-    // Set the filename
     gimp_image_set_filename(new_image_id, filename);
 
     return new_image_id;
diff -Naur orig/src/read-webp.h patched/src/read-webp.h
--- orig/src/read-webp.h	2012-05-09 06:39:47.000000000 +0200
+++ patched/src/read-webp.h	2014-02-08 04:14:30.000000000 +0100
@@ -16,6 +16,11 @@
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/
 
+#ifndef READ_WEBP_H
+#define READ_WEBP_H
+
 #include <glib.h>
 
 int read_webp(const gchar *);
+
+#endif // READ_WEBP_H
diff -Naur orig/src/write-webp.c patched/src/write-webp.c
--- orig/src/write-webp.c	2012-05-09 06:39:47.000000000 +0200
+++ patched/src/write-webp.c	2014-02-08 04:14:30.000000000 +0100
@@ -16,82 +16,135 @@
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/
 
-#include "write-webp.h"
-
 #include <stdio.h>
+#include <stdlib.h>
 #include <libgimp/gimp.h>
-#include <webp/encode.h>
 
-int write_webp(const gchar * filename, gint drawable_id, float quality)
+#include "write-webp.h"
+
+/* Utility method for returning an error message from a WebP error code. */
+const char * webp_error_string(WebPEncodingError error)
 {
-    GimpDrawable * drawable;
-    gint bpp;
-    GimpPixelRgn rgn;
-    long int data_size;
-    void * image_data;
-    size_t output_size;
-    uint8_t * raw_data;
-    FILE * file;
+    switch(error)
+    {
+        case VP8_ENC_OK:                            return "no error";
+        case VP8_ENC_ERROR_OUT_OF_MEMORY:           return "out of memory";
+        case VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY: return "not enough memory to flush bits";
+        case VP8_ENC_ERROR_NULL_PARAMETER:          return "NULL parameter";
+        case VP8_ENC_ERROR_INVALID_CONFIGURATION:   return "invalid configuration";
+        case VP8_ENC_ERROR_BAD_DIMENSION:           return "bad image dimensions";
+        case VP8_ENC_ERROR_PARTITION0_OVERFLOW:     return "partition is bigger than 512K";
+        case VP8_ENC_ERROR_PARTITION_OVERFLOW:      return "partition is bigger than 16M";
+        case VP8_ENC_ERROR_BAD_WRITE:               return "unable to flush bytes";
+        case VP8_ENC_ERROR_FILE_TOO_BIG:            return "file is larger than 4GiB";
+        case VP8_ENC_ERROR_USER_ABORT:              return "user aborted encoding";
+        case VP8_ENC_ERROR_LAST:                    return "list terminator";
+        default:                                    return "unknown error";
+    }
+}
 
-    // Get the drawable
-    drawable = gimp_drawable_get(drawable_id);
+/* Handler for writing the contents to the file. */
+int on_write(const uint8_t * data,
+             size_t data_size,
+             const WebPPicture * picture)
+{
+    /* Obtain a pointer to our current file and write the contents to it. */
+    FILE ** file = (FILE **)picture->custom_ptr;
+    return fwrite(data, data_size, 1, *file);
+}
 
-    // Get the BPP
-    bpp = gimp_drawable_bpp(drawable_id);
+/* Handler for displaying encoding process. */
+int on_progress(int percent,
+                const WebPPicture * picture)
+{
+    return gimp_progress_update(percent / 100.0);
+}
+
+/* TODO: the code below needs more error checking. */
 
-    // Get a pixel region from the layer
-    gimp_pixel_rgn_init(&rgn,
+/* Writes the specified drawable to disk. */
+int write_webp(const gchar * filename,
+               gint drawable_id,
+               WebPConfig * config)
+{
+    gint bpp;
+    GimpDrawable * drawable;
+    GimpPixelRgn region;
+    long int raw_data_size;
+    void * raw_data;
+    WebPPicture picture;
+    FILE * file;
+    int stride;
+    int status;
+    
+    gimp_progress_init_printf("Encoding %s", filename);
+    
+    /* Get the number of bytes-per-pixel (BPP). This tells
+       us if we are dealing with an alpha channel or not. */
+    bpp = gimp_drawable_bpp(drawable_id);
+    
+    /* Use the drawable ID to get the drawable and then
+       the region which is the entire visible image. */
+    drawable = gimp_drawable_get(drawable_id);
+    gimp_pixel_rgn_init(&region,
                         drawable,
                         0, 0,
                         drawable->width,
                         drawable->height,
                         FALSE, FALSE);
-
-    // Determine the size of the array of image data to get
-    // and allocate it.
-    data_size = drawable->width * drawable->height * bpp;
-    image_data = malloc(data_size);
-
-    // Get the image data
-    gimp_pixel_rgn_get_rect(&rgn,
-                            (guchar *)image_data,
+    
+    /* Prepare the WebPPicture structure for the encoding process later on. */
+    WebPPictureInit(&picture);
+    picture.use_argb      = config->lossless;
+    picture.width         = drawable->width;
+    picture.height        = drawable->height;
+    picture.writer        = on_write;
+    picture.custom_ptr    = &file;
+    picture.progress_hook = on_progress;
+    
+    /* Calculate the stride. */
+    stride = drawable->width * bpp;
+    
+    /* Determine exactly how much space we need to allocate for
+       the contents of the image. Then allocate that amount. */
+    raw_data_size = drawable->width * drawable->height * bpp;
+    raw_data = malloc(raw_data_size);
+    
+    /* Ensure the allocation was successful. */
+    if(!raw_data)
+    {
+        gimp_drawable_detach(drawable);
+        return 0;
+    }
+    
+    /* Now copy the image data to our array. */
+    gimp_pixel_rgn_get_rect(&region,
+                            (guchar *)raw_data,
                             0, 0,
                             drawable->width,
                             drawable->height);
-
-    // We have the image data, now encode it.
-    output_size = WebPEncodeRGB((const uint8_t *)image_data,
-                                drawable->width,
-                                drawable->height,
-                                drawable->width * 3,
-                                quality,
-                                &raw_data);
-
-    // Free the image data
-    free(image_data);
-
-    // Detach the drawable
+    
+    /* Detach the drawable. We have the image data now. */
     gimp_drawable_detach(drawable);
-
-    // Make sure that the write was successful
-    if(output_size == FALSE)
-    {
-        free(raw_data);
-        return 0;
-    }
-
-    // Open the file
+    
+    /* Attempt to open the file we are writing to. */
     file = fopen(filename, "wb");
     if(!file)
     {
         free(raw_data);
         return 0;
     }
-
-    // Write the data and be done with it.
-    fwrite(raw_data, output_size, 1, file);
+    
+    /* Now perform the encoding procedure. */
+    if(bpp == 3) status = WebPPictureImportRGB(&picture, raw_data, stride);
+    else         status = WebPPictureImportRGBA(&picture, raw_data, stride);
+    
+    status = WebPEncode(config, &picture);
+    
+    /* Free the picture, raw image data, and close the file. */
+    WebPPictureFree(&picture);
     free(raw_data);
     fclose(file);
-
-    return 1;
+       
+    return status;
 }
diff -Naur orig/src/write-webp.h patched/src/write-webp.h
--- orig/src/write-webp.h	2012-05-09 06:39:47.000000000 +0200
+++ patched/src/write-webp.h	2014-02-08 04:14:30.000000000 +0100
@@ -16,6 +16,12 @@
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 =======================================================================*/
 
+#ifndef WRITE_WEBP_H
+#define WRITE_WEBP_H
+
 #include <glib.h>
+#include <webp/encode.h>
+
+int write_webp(const gchar *, gint, WebPConfig *);
 
-int write_webp(const gchar *, gint, float);
+#endif // WRITE_WEBP_H
