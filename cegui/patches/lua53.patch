diff -Naur orig/cmake/FindLua51.cmake patched/cmake/FindLua51.cmake
--- orig/cmake/FindLua51.cmake	2016-04-23 20:18:29.000000000 +0200
+++ patched/cmake/FindLua51.cmake	2019-08-06 00:49:53.708867860 +0200
@@ -3,22 +3,22 @@
 ################################################################################
 include(FindPackageHandleStandardArgs)
 
-find_path(LUA_H_PATH NAMES lua.h PATH_SUFFIXES lua5.1 lua51 lua-5.1 lua)
-find_library(LUA_LIB NAMES lua5.1 lua51 lua-5.1 lua PATH_SUFFIXES dynamic)
-find_library(LUA_LIB_DBG NAMES lua5.1_d lua51_d lua-5.1_d lua_d PATH_SUFFIXES dynamic)
+find_path(LUA_H_PATH NAMES lua.h PATH_SUFFIXES lua5.3 lua53 lua-5.3 lua)
+find_library(LUA_LIB NAMES lua5.3 lua53 lua-5.3 lua PATH_SUFFIXES dynamic)
+find_library(LUA_LIB_DBG NAMES lua5.3_d lua53_d lua-5.3_d lua_d PATH_SUFFIXES dynamic)
 mark_as_advanced(LUA_H_PATH LUA_LIB LUA_LIB_DBG)
 
 if (WIN32 OR APPLE)
-    find_library(LUA_LIB_STATIC NAMES lua5.1 lua51 lua-5.1 lua PATH_SUFFIXES static)
-    find_library(LUA_LIB_STATIC_DBG NAMES lua5.1_d lua51_d lua-5.1_d lua_d PATH_SUFFIXES static)
+    find_library(LUA_LIB_STATIC NAMES lua5.3 lua53 lua-5.3 lua PATH_SUFFIXES static)
+    find_library(LUA_LIB_STATIC_DBG NAMES lua5.3_d lua53_d lua-5.3_d lua_d PATH_SUFFIXES static)
     mark_as_advanced(LUA_LIB_STATIC LUA_LIB_STATIC_DBG)
 endif()
 
-cegui_find_package_handle_standard_args(LUA51 LUA_LIB LUA_H_PATH)
+cegui_find_package_handle_standard_args(LUA53 LUA_LIB LUA_H_PATH)
 
 
 # set up output vars
-if (LUA51_FOUND)
+if (LUA53_FOUND)
     set (LUA51_INCLUDE_DIR ${LUA_H_PATH})
 
     if (UNIX AND NOT APPLE)
diff -Naur orig/CMakeLists.txt patched/CMakeLists.txt
--- orig/CMakeLists.txt	2016-04-28 21:12:57.000000000 +0200
+++ patched/CMakeLists.txt	2019-08-06 00:48:12.271505662 +0200
@@ -210,8 +210,8 @@
 cegui_dependent_option( CEGUI_BUILD_RENDERER_DIRECT3D11 "Specifies whether to build the Direct3D 11 renderer module" "DIRECTXSDK_FOUND;D3DX11EFFECTS_FOUND;NOT DIRECTXSDK_MAX_D3D LESS 11" )
 option( CEGUI_BUILD_RENDERER_NULL "Specifies whether to build the null renderer module" FALSE )
 option( CEGUI_BUILD_RENDERER_OPENGLES "Specifies whether to build the OpenGL ES 1 renderer module" ${OPENGLES_FOUND} )
-cegui_dependent_option( CEGUI_BUILD_LUA_MODULE "Specifies whether to build the Lua based script module" "LUA51_FOUND;TOLUAPP_FOUND" )
-cegui_dependent_option( CEGUI_BUILD_LUA_GENERATOR "Specifies whether to build the custom tolua binding generator 'toluappcegui'" "LUA51_FOUND;TOLUAPP_FOUND" )
+cegui_dependent_option( CEGUI_BUILD_LUA_MODULE "Specifies whether to build the Lua based script module" "LUA53_FOUND;TOLUAPP_FOUND" )
+cegui_dependent_option( CEGUI_BUILD_LUA_GENERATOR "Specifies whether to build the custom tolua binding generator 'toluappcegui'" "LUA53_FOUND;TOLUAPP_FOUND" )
 
 cegui_dependent_option( CEGUI_BUILD_PYTHON_MODULES "Specifies whether to build the Python extension module(s)" "PYTHONINTERP_FOUND;PYTHONLIBS_FOUND;Boost_PYTHON_FOUND" )
 
@@ -231,7 +231,7 @@
         option (CEGUI_USE_EPOXY "Specifies whether to use Epoxy as an OpenGL loading library." FALSE)
         if (CEGUI_USE_GLEW AND CEGUI_USE_EPOXY)
             message (FATAL_ERROR "You may not enable both \"CEGUI_USE_GLEW\" and \"CEGUI_USE_EPOXY\". Please choose only one of these options.")
-        endif ()           
+        endif ()
     else ()
         set (CEGUI_USE_GLEW "${GLEW_FOUND}")
         set (CEGUI_USE_EPOXY "${EPOXY_FOUND}")
