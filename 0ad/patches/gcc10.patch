diff -Naur orig/libraries/source/fcollada/src/FColladaPlugins/FArchiveXML/FArchiveXML.h patched/libraries/source/fcollada/src/FColladaPlugins/FArchiveXML/FArchiveXML.h
--- orig/libraries/source/fcollada/src/FColladaPlugins/FArchiveXML/FArchiveXML.h	2008-09-08 00:13:25.000000000 +0200
+++ patched/libraries/source/fcollada/src/FColladaPlugins/FArchiveXML/FArchiveXML.h	2020-09-09 01:41:25.267430658 +0200
@@ -553,7 +553,16 @@
 
 	static void WritePhysicsRigidBodyParameters(FCDPhysicsRigidBodyParameters* physicsRigidBodyParameters, xmlNode* techniqueNode);
 	template <class TYPE, int QUAL>
-	static xmlNode* AddPhysicsParameter(xmlNode* parentNode, const char* name, FCDParameterAnimatableT<TYPE,QUAL>& value);
+	static xmlNode* AddPhysicsParameter(xmlNode* parentNode, const char* name, FCDParameterAnimatableT<TYPE,QUAL>& value) {
+		xmlNode* paramNode = AddChild(parentNode, name);
+		AddContent(paramNode, FUStringConversion::ToString((TYPE&) value));
+		if (value.IsAnimated())
+		{
+			const FCDAnimated* animated = value.GetAnimated();
+			FArchiveXML::WriteAnimatedValue(animated, paramNode, name);
+		}
+		return paramNode;
+	}
 
 
 	//
diff -Naur orig/libraries/source/fcollada/src/FColladaPlugins/FArchiveXML/FAXPhysicsExport.cpp patched/libraries/source/fcollada/src/FColladaPlugins/FArchiveXML/FAXPhysicsExport.cpp
--- orig/libraries/source/fcollada/src/FColladaPlugins/FArchiveXML/FAXPhysicsExport.cpp	2008-09-08 00:13:25.000000000 +0200
+++ patched/libraries/source/fcollada/src/FColladaPlugins/FArchiveXML/FAXPhysicsExport.cpp	2020-09-09 01:39:53.115163281 +0200
@@ -329,16 +329,3 @@
 		FArchiveXML::LetWriteObject(physicsRigidBodyParameters->GetPhysicsShape(i), techniqueNode);
 	}
 }
-
-template <class TYPE, int QUAL>
-xmlNode* FArchiveXML::AddPhysicsParameter(xmlNode* parentNode, const char* name, FCDParameterAnimatableT<TYPE,QUAL>& value)
-{
-	xmlNode* paramNode = AddChild(parentNode, name);
-	AddContent(paramNode, FUStringConversion::ToString((TYPE&) value));
-	if (value.IsAnimated())
-	{
-		const FCDAnimated* animated = value.GetAnimated();
-		FArchiveXML::WriteAnimatedValue(animated, paramNode, name);
-	}
-	return paramNode;
-}
diff -Naur orig/source/simulation2/helpers/HierarchicalPathfinder.cpp patched/source/simulation2/helpers/HierarchicalPathfinder.cpp
--- orig/source/simulation2/helpers/HierarchicalPathfinder.cpp	2017-12-10 09:59:43.000000000 +0100
+++ patched/source/simulation2/helpers/HierarchicalPathfinder.cpp	2020-09-09 01:48:25.808744814 +0200
@@ -697,28 +697,6 @@
 	jGoal = jBest;
 }
 
-void HierarchicalPathfinder::FindReachableRegions(RegionID from, std::set<RegionID>& reachable, pass_class_t passClass)
-{
-	// Flood-fill the region graph, starting at 'from',
-	// collecting all the regions that are reachable via edges
-
-	std::vector<RegionID> open;
-	open.push_back(from);
-	reachable.insert(from);
-
-	while (!open.empty())
-	{
-		RegionID curr = open.back();
-		open.pop_back();
-
-		for (const RegionID& region : m_Edges[passClass][curr])
-			// Add to the reachable set; if this is the first time we added
-			// it then also add it to the open list
-			if (reachable.insert(region).second)
-				open.push_back(region);
-	}
-}
-
 void HierarchicalPathfinder::FindPassableRegions(std::set<RegionID>& regions, pass_class_t passClass)
 {
 	// Construct a set of all regions of all chunks for this pass class
diff -Naur orig/source/simulation2/helpers/HierarchicalPathfinder.h patched/source/simulation2/helpers/HierarchicalPathfinder.h
--- orig/source/simulation2/helpers/HierarchicalPathfinder.h	2017-12-10 09:59:43.000000000 +0100
+++ patched/source/simulation2/helpers/HierarchicalPathfinder.h	2020-09-09 02:05:09.227724220 +0200
@@ -148,7 +148,27 @@
 
 	void FindEdges(u8 ci, u8 cj, pass_class_t passClass, EdgesMap& edges);
 
-	void FindReachableRegions(RegionID from, std::set<RegionID>& reachable, pass_class_t passClass);
+    void FindReachableRegions(RegionID from, std::set<RegionID>& reachable, pass_class_t passClass)
+    {
+	    // Flood-fill the region graph, starting at 'from',
+	    // collecting all the regions that are reachable via edges
+
+	    std::vector<RegionID> open;
+	    open.push_back(from);
+	    reachable.insert(from);
+
+	    while (!open.empty())
+	    {
+	    	RegionID curr = open.back();
+	    	open.pop_back();
+
+	    	for (const RegionID& region : m_Edges[passClass][curr])
+	    		// Add to the reachable set; if this is the first time we added
+	    		// it then also add it to the open list
+	    		if (reachable.insert(region).second)
+	    			open.push_back(region);
+	    }
+    }
 
 	void FindPassableRegions(std::set<RegionID>& regions, pass_class_t passClass);
 
