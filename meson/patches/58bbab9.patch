diff -Naur orig/mesonbuild/build.py patched/mesonbuild/build.py
--- orig/mesonbuild/build.py	2018-04-23 02:24:26.000000000 +0200
+++ patched/mesonbuild/build.py	2018-05-02 23:28:04.611051144 +0200
@@ -817,16 +817,22 @@
     def get_extra_args(self, language):
         return self.extra_args.get(language, [])
 
-    def get_dependencies(self, exclude=None):
+    def get_dependencies(self, exclude=None, internal=True):
         transitive_deps = []
         if exclude is None:
             exclude = []
-        for t in itertools.chain(self.link_targets, self.link_whole_targets):
+        if internal:
+            link_targets = itertools.chain(self.link_targets, self.link_whole_targets)
+        else:
+            # We don't want the 'internal' libraries when generating the
+            # `Libs:` and `Libs.private:` lists in pkg-config files.
+            link_targets = self.link_targets
+        for t in link_targets:
             if t in transitive_deps or t in exclude:
                 continue
             transitive_deps.append(t)
             if isinstance(t, StaticLibrary):
-                transitive_deps += t.get_dependencies(transitive_deps + exclude)
+                transitive_deps += t.get_dependencies(transitive_deps + exclude, internal)
         return transitive_deps
 
     def get_source_subdir(self):
diff -Naur orig/mesonbuild/modules/pkgconfig.py patched/mesonbuild/modules/pkgconfig.py
--- orig/mesonbuild/modules/pkgconfig.py	2018-04-23 02:24:26.000000000 +0200
+++ patched/mesonbuild/modules/pkgconfig.py	2018-05-02 23:30:06.812178135 +0200
@@ -123,10 +123,10 @@
                     if not hasattr(obj, 'generated_pc'):
                         obj.generated_pc = self.name
                 if isinstance(obj, build.StaticLibrary) and public:
-                    self.add_pub_libs(obj.get_dependencies())
+                    self.add_pub_libs(obj.get_dependencies(internal=False))
                     self.add_pub_libs(obj.get_external_deps())
                 else:
-                    self.add_priv_libs(obj.get_dependencies())
+                    self.add_priv_libs(obj.get_dependencies(internal=False))
                     self.add_priv_libs(obj.get_external_deps())
             elif isinstance(obj, str):
                 processed_libs.append(obj)
