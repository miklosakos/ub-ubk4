diff -Naur orig/src/Android.mk patched/src/Android.mk
--- orig/src/Android.mk	1970-01-01 01:00:00.000000000 +0100
+++ patched/src/Android.mk	2019-05-22 22:50:29.091376534 +0200
@@ -0,0 +1,60 @@
+#
+# Copyright (C) 2019 The Android-x86 Open Source Project
+#
+# Licensed under the GNU Lesser General Public License Version 2.1.
+# You may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.gnu.org/licenses/lgpl-2.1.html
+#
+
+LOCAL_PATH := $(call my-dir)
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := makeguids
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/include
+LOCAL_CFLAGS := -DEFIVAR_BUILD_ENVIRONMENT
+LOCAL_SRC_FILES := guid.c makeguids.c
+LOCAL_LDLIBS := -ldl
+include $(BUILD_HOST_EXECUTABLE)
+
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libefivar
+LOCAL_MODULE_CLASS := STATIC_LIBRARIES
+LIBEFIBOOT_SOURCES := \
+	crc32.c \
+	creator.c \
+	disk.c \
+	gpt.c \
+	loadopt.c \
+	path-helpers.c \
+	$(notdir $(wildcard $(LOCAL_PATH)/linux*.c))
+
+LIBEFIVAR_SOURCES := \
+	dp.c \
+	dp-acpi.c \
+	dp-hw.c \
+	dp-media.c \
+	dp-message.c \
+	efivarfs.c \
+	error.c \
+	export.c \
+	guid.c \
+	guids.S \
+	lib.c \
+	vars.c
+
+LOCAL_SRC_FILES := $(LIBEFIBOOT_SOURCES) $(LIBEFIVAR_SOURCES)
+LOCAL_CFLAGS := -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE -std=gnu11
+LOCAL_C_INCLUDES := $(LOCAL_PATH)/include
+LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_C_INCLUDES) $(LOCAL_C_INCLUDES)/efivar $(local-generated-sources-dir)
+LIBEFIVAR_GUIDS_H := $(local-generated-sources-dir)/efivar/efivar-guids.h
+LOCAL_GENERATED_SOURCES := $(LIBEFIVAR_GUIDS_H) $(local-generated-sources-dir)/guid-symbols.c
+$(LIBEFIVAR_GUIDS_H): PRIVATE_CUSTOM_TOOL = $^ $(addprefix $(dir $(@D)),guids.bin names.bin guid-symbols.c efivar/efivar-guids.h)
+$(LIBEFIVAR_GUIDS_H): $(BUILD_OUT_EXECUTABLES)/makeguids $(LOCAL_PATH)/guids.txt
+	$(transform-generated-source)
+$(lastword $(LOCAL_GENERATED_SOURCES)): $(LIBEFIVAR_GUIDS_H)
+
+include $(BUILD_STATIC_LIBRARY)
diff -Naur orig/src/dp.h patched/src/dp.h
--- orig/src/dp.h	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/dp.h	2019-05-22 22:50:29.095376576 +0200
@@ -70,8 +70,11 @@
 #define format_guid(buf, size, off, dp_type, guid) ({			\
 		int _rc;						\
 		char *_guidstr = NULL;					\
+		efi_guid_t _guid;					\
+		const efi_guid_t * const _guid_p = &_guid;		\
 									\
-		_rc = efi_guid_to_str(guid, &_guidstr);			\
+		memmove(&_guid, guid, sizeof(_guid));			\
+		_rc = efi_guid_to_str(_guid_p, &_guidstr);		\
 		if (_rc < 0) {						\
 			efi_error("could not build %s GUID DP string",	\
 				  dp_type);				\
@@ -79,7 +82,7 @@
 			_guidstr = onstack(_guidstr,			\
 					   strlen(_guidstr)+1);		\
 			_rc = format(buf, size, off, dp_type, "%s",	\
-				     _guidstr);	\
+				     _guidstr);				\
 		}							\
 		_rc;							\
 	})
diff -Naur orig/src/dp-media.c patched/src/dp-media.c
--- orig/src/dp-media.c	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/dp-media.c	2019-05-22 22:50:29.091376534 +0200
@@ -46,8 +46,7 @@
 			break;
 		case EFIDP_HD_SIGNATURE_GUID:
 			format(buf, size, off, "HD", "GPT,");
-			format_guid(buf, size, off, "HD",
-				    (efi_guid_t *)dp->hd.signature);
+			format_guid(buf, size, off, "HD", dp->hd.signature);
 			format(buf, size, off, "HD",
 			       ",0x%"PRIx64",0x%"PRIx64")",
 			       dp->hd.start, dp->hd.size);
diff -Naur orig/src/dp-message.c patched/src/dp-message.c
--- orig/src/dp-message.c	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/dp-message.c	2019-05-22 22:50:29.095376576 +0200
@@ -364,7 +364,7 @@
 			       dp->infiniband.port_gid[1],
 			       dp->infiniband.port_gid[0]);
 			format_guid(buf, size, off, "Infiniband",
-				    (efi_guid_t *)&dp->infiniband.ioc_guid);
+				    &dp->infiniband.ioc_guid);
 			format(buf, size, off, "Infiniband",
 			       ",%"PRIu64",%"PRIu64")",
 			       dp->infiniband.target_port_id,
@@ -620,11 +620,13 @@
 			  ) / sizeof(efi_ip_addr_t);
 		format(buf, size, off, "Dns", "Dns(");
 		for (int i=0; i < end; i++) {
-			const efi_ip_addr_t *addr = &dp->dns.addrs[i];
+			efi_ip_addr_t addr;
+
+			memcpy(&addr, &dp->dns.addrs[i], sizeof(addr));
 			if (i != 0)
 				format(buf, size, off, "Dns", ",");
 			format_ip_addr(buf, size, off, "Dns",
-				       dp->dns.is_ipv6, addr);
+				       dp->dns.is_ipv6, &addr);
 		}
 		format(buf, size, off, "Dns", ")");
 		break;
@@ -676,16 +678,16 @@
 					EFIDP_MSG_IPv4, sizeof (*ipv4));
 	ssize_t req = sizeof (*ipv4);
 	if (size && sz == req) {
-		*((char *)ipv4->local_ipv4_addr) = htonl(local);
-		*((char *)ipv4->remote_ipv4_addr) = htonl(remote);
+		*((uint32_t *)ipv4->local_ipv4_addr) = htonl(local);
+		*((uint32_t *)ipv4->remote_ipv4_addr) = htonl(remote);
 		ipv4->local_port = htons(local_port);
 		ipv4->remote_port = htons(remote_port);
 		ipv4->protocol = htons(protocol);
 		ipv4->static_ip_addr = 0;
 		if (is_static)
 			ipv4->static_ip_addr = 1;
-		*((char *)ipv4->gateway) = htonl(gateway);
-		*((char *)ipv4->netmask) = htonl(netmask);
+		*((uint32_t *)ipv4->gateway) = htonl(gateway);
+		*((uint32_t *)ipv4->netmask) = htonl(netmask);
 	}
 
 	if (sz < 0)
diff -Naur orig/src/guid.c patched/src/guid.c
--- orig/src/guid.c	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/guid.c	2019-05-22 22:50:29.095376576 +0200
@@ -31,7 +31,7 @@
 extern const efi_guid_t efi_guid_zero;
 
 int NONNULL(1, 2) PUBLIC
-efi_guid_cmp(const efi_guid_t *a, const efi_guid_t *b)
+efi_guid_cmp(const void * const a, const void * const b)
 {
 	return memcmp(a, b, sizeof (efi_guid_t));
 }
diff -Naur orig/src/include/efivar/efivar.h patched/src/include/efivar/efivar.h
--- orig/src/include/efivar/efivar.h	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/include/efivar/efivar.h	2019-05-22 22:50:29.095376576 +0200
@@ -128,7 +128,7 @@
 
 extern int efi_guid_is_zero(const efi_guid_t *guid);
 extern int efi_guid_is_empty(const efi_guid_t *guid);
-extern int efi_guid_cmp(const efi_guid_t *a, const efi_guid_t *b);
+extern int efi_guid_cmp(const void * const a, const void * const b);
 
 /* import / export functions */
 typedef struct efi_variable efi_variable_t;
diff -Naur orig/src/linux-acpi-root.c patched/src/linux-acpi-root.c
--- orig/src/linux-acpi-root.c	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/linux-acpi-root.c	2019-05-22 22:50:29.099376618 +0200
@@ -51,13 +51,6 @@
         char *colon;
 
         const char *devpart = current;
-        char *spaces;
-
-        pos = strlen(current);
-        spaces = alloca(pos+1);
-        memset(spaces, ' ', pos+1);
-        spaces[pos] = '\0';
-        pos = 0;
 
         debug("entry");
 
diff -Naur orig/src/linux.c patched/src/linux.c
--- orig/src/linux.c	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/linux.c	2019-05-22 22:50:29.103376661 +0200
@@ -252,15 +252,6 @@
         NULL
 };
 
-static inline bool
-supports_iface(struct dev_probe *probe, enum interface_type iftype)
-{
-        for (unsigned int i = 0; probe->iftypes[i] != unknown; i++)
-                if (probe->iftypes[i] == iftype)
-                        return true;
-        return false;
-}
-
 void HIDDEN
 device_free(struct device *dev)
 {
diff -Naur orig/src/linux-emmc.c patched/src/linux-emmc.c
--- orig/src/linux-emmc.c	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/linux-emmc.c	2019-05-22 22:50:29.099376618 +0200
@@ -50,13 +50,6 @@
         int rc;
         int32_t tosser0, tosser1, tosser2, tosser3, slot_id, partition;
         int pos0 = 0, pos1 = 0;
-        char *spaces;
-
-        pos0 = strlen(current);
-        spaces = alloca(pos0+1);
-        memset(spaces, ' ', pos0+1);
-        spaces[pos0] = '\0';
-        pos0 = 0;
 
         debug("entry");
 
@@ -65,8 +58,6 @@
                     &tosser0, &tosser1, &tosser2, &slot_id,
                     &pos0, &tosser3, &partition, &pos1);
         debug("current:\"%s\" rc:%d pos0:%d pos1:%d\n", current, rc, pos0, pos1);
-        arrow(LOG_DEBUG, spaces, 9, pos0, rc, 4);
-        arrow(LOG_DEBUG, spaces, 9, pos1, rc, 6);
         /*
          * If it isn't of that form, it's not one of our emmc devices.
          */
diff -Naur orig/src/linux-md.c patched/src/linux-md.c
--- orig/src/linux-md.c	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/linux-md.c	2019-05-22 22:50:29.099376618 +0200
@@ -44,13 +44,6 @@
         int rc;
         int32_t md, tosser0, part;
         int pos0 = 0, pos1 = 0;
-        char *spaces;
-
-        pos0 = strlen(current);
-        spaces = alloca(pos0+1);
-        memset(spaces, ' ', pos0+1);
-        spaces[pos0] = '\0';
-        pos0 = 0;
 
         debug("entry");
 
@@ -58,7 +51,6 @@
         rc = sscanf(current, "md%d/%nmd%dp%d%n",
                     &md, &pos0, &tosser0, &part, &pos1);
         debug("current:\"%s\" rc:%d pos0:%d pos1:%d\n", current, rc, pos0, pos1);
-        arrow(LOG_DEBUG, spaces, 9, pos0, rc, 3);
         /*
          * If it isn't of that form, it's not one of our partitioned md devices.
          */
diff -Naur orig/src/linux-nvme.c patched/src/linux-nvme.c
--- orig/src/linux-nvme.c	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/linux-nvme.c	2019-05-22 22:50:29.099376618 +0200
@@ -54,13 +54,6 @@
         int32_t tosser0, tosser1, tosser2, ctrl_id, ns_id, partition;
         uint8_t *filebuf = NULL;
         int pos0 = 0, pos1 = 0;
-        char *spaces;
-
-        pos0 = strlen(current);
-        spaces = alloca(pos0+1);
-        memset(spaces, ' ', pos0+1);
-        spaces[pos0] = '\0';
-        pos0 = 0;
 
         debug("entry");
 
@@ -69,8 +62,6 @@
                     &tosser0, &ctrl_id, &ns_id, &pos0,
                     &tosser1, &tosser2, &partition, &pos1);
         debug("current:\"%s\" rc:%d pos0:%d pos1:%d\n", current, rc, pos0, pos1);
-        arrow(LOG_DEBUG, spaces, 9, pos0, rc, 3);
-        arrow(LOG_DEBUG, spaces, 9, pos1, rc, 6);
         /*
          * If it isn't of that form, it's not one of our nvme devices.
          */
diff -Naur orig/src/linux-pci.c patched/src/linux-pci.c
--- orig/src/linux-pci.c	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/linux-pci.c	2019-05-22 22:50:29.099376618 +0200
@@ -48,13 +48,6 @@
         int rc;
         int pos;
         const char *devpart = current;
-        char *spaces;
-
-        pos = strlen(current);
-        spaces = alloca(pos+1);
-        memset(spaces, ' ', pos+1);
-        spaces[pos] = '\0';
-        pos = 0;
 
         debug("entry");
 
@@ -75,7 +68,6 @@
                 rc = sscanf(devpart, "%hx:%hhx:%hhx.%hhx/%n",
                             &domain, &bus, &device, &function, &pos);
                 debug("current:\"%s\" rc:%d pos:%d", devpart, rc, pos);
-                arrow(LOG_DEBUG, spaces, 9, pos, rc, 3);
                 if (rc != 4)
                         break;
                 devpart += pos;
diff -Naur orig/src/linux-pci-root.c patched/src/linux-pci-root.c
--- orig/src/linux-pci-root.c	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/linux-pci-root.c	2019-05-22 22:50:29.099376618 +0200
@@ -48,13 +48,6 @@
         uint16_t root_domain;
         uint8_t root_bus;
         const char *devpart = current;
-        char *spaces;
-
-        pos = strlen(current);
-        spaces = alloca(pos+1);
-        memset(spaces, ' ', pos+1);
-        spaces[pos] = '\0';
-        pos = 0;
 
         debug("entry");
 
@@ -115,7 +108,6 @@
                         return new;
                 }
         }
-        off += new;
         sz += new;
 
         debug("returning %zd", sz);
diff -Naur orig/src/linux-sata.c patched/src/linux-sata.c
--- orig/src/linux-sata.c	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/linux-sata.c	2019-05-22 22:50:29.103376661 +0200
@@ -148,13 +148,6 @@
         uint64_t scsi_lun, tosser3;
         int pos = 0;
         int rc;
-        char *spaces;
-
-        pos = strlen(current);
-        spaces = alloca(pos+1);
-        memset(spaces, ' ', pos+1);
-        spaces[pos] = '\0';
-        pos = 0;
 
         debug("entry");
         if (is_pata(dev)) {
@@ -169,7 +162,6 @@
         debug("searching for ata1/");
         rc = sscanf(current, "ata%"PRIu32"/%n", &print_id, &pos);
         debug("current:\"%s\" rc:%d pos:%d\n", current, rc, pos);
-        arrow(LOG_DEBUG, spaces, 9, pos, rc, 1);
         /*
          * If we don't find this one, it isn't an ata device, so return 0 not
          * error.  Later errors mean it is an ata device, but we can't parse
@@ -183,7 +175,6 @@
         debug("searching for host0/");
         rc = sscanf(current, "host%"PRIu32"/%n", &scsi_bus, &pos);
         debug("current:\"%s\" rc:%d pos:%d\n", current, rc, pos);
-        arrow(LOG_DEBUG, spaces, 9, pos, rc, 1);
         if (rc != 1)
                 return -1;
         current += pos;
@@ -193,7 +184,6 @@
         rc = sscanf(current, "target%"PRIu32":%"PRIu32":%"PRIu64"/%n",
                     &scsi_device, &scsi_target, &scsi_lun, &pos);
         debug("current:\"%s\" rc:%d pos:%d\n", current, rc, pos);
-        arrow(LOG_DEBUG, spaces, 9, pos, rc, 3);
         if (rc != 3)
                 return -1;
         current += pos;
@@ -203,7 +193,6 @@
         rc = sscanf(current, "%"PRIu32":%"PRIu32":%"PRIu32":%"PRIu64"/%n",
                     &tosser0, &tosser1, &tosser2, &tosser3, &pos);
         debug("current:\"%s\" rc:%d pos:%d\n", current, rc, pos);
-        arrow(LOG_DEBUG, spaces, 9, pos, rc, 4);
         if (rc != 4)
                 return -1;
         current += pos;
diff -Naur orig/src/linux-scsi.c patched/src/linux-scsi.c
--- orig/src/linux-scsi.c	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/linux-scsi.c	2019-05-22 22:50:29.103376661 +0200
@@ -45,13 +45,6 @@
         int rc;
         int sz = 0;
         int pos0 = 0, pos1 = 0;
-        char *spaces;
-
-        sz = strlen(current);
-        spaces = alloca(sz+1);
-        memset(spaces, ' ', sz+1);
-        spaces[sz] = '\0';
-        sz = 0;
 
         debug("entry");
         /*
@@ -108,7 +101,6 @@
         debug("searching for host4/");
         rc = sscanf(current, "host%d/%n", scsi_host, &pos0);
         debug("current:\"%s\" rc:%d pos0:%d\n", current+sz, rc, pos0);
-        arrow(LOG_DEBUG, spaces, 9, pos0, rc, 1);
         if (rc != 1)
                 return -1;
         sz += pos0;
@@ -126,8 +118,6 @@
         rc = sscanf(current+sz, "port-%d:%d%n:%d%n", &tosser0,
                     &tosser1, &pos0, &tosser2, &pos1);
         debug("current:\"%s\" rc:%d pos0:%d pos1:%d\n", current+sz, rc, pos0, pos1);
-        arrow(LOG_DEBUG, spaces, 9, pos0, rc, 2);
-        arrow(LOG_DEBUG, spaces, 9, pos1, rc, 3);
         if (rc == 2 || rc == 3) {
                 sz += pos0;
                 pos0 = 0;
@@ -153,7 +143,6 @@
                 debug("searching for expander-4:0/");
                 rc = sscanf(current+sz, "expander-%d:%d/%n", &tosser0, &tosser1, &pos0);
                 debug("current:\"%s\" rc:%d pos0:%d\n", current+sz, rc, pos0);
-                arrow(LOG_DEBUG, spaces, 9, pos0, rc, 2);
                 if (rc == 2) {
                         if (!remote_target_id) {
                                 efi_error("Device is PHY is a remote target, but remote_target_id is NULL");
@@ -169,7 +158,6 @@
                         debug("searching for port-2:0:2/");
                         rc = sscanf(current+sz, "port-%d:%d:%d/%n", &tosser0, &tosser1, &tosser2, &pos0);
                         debug("current:\"%s\" rc:%d pos0:%d\n", current+sz, rc, pos0);
-                        arrow(LOG_DEBUG, spaces, 9, pos0, rc, 3);
                         if (rc != 3) {
                                 efi_error("Couldn't parse port expander port string");
                                 return -1;
@@ -192,8 +180,6 @@
 
                 pos1 = 0;
                 rc = sscanf(current + sz + pos0, ":%d%n", &tosser2, &pos1);
-                arrow(LOG_DEBUG, spaces, 9, pos0, rc + 2, 2);
-                arrow(LOG_DEBUG, spaces, 9, pos0 + pos1, rc + 2, 3);
                 if (rc != 0 && rc != 1)
                         return -1;
                 if (remote_port_id && rc == 1)
@@ -217,7 +203,6 @@
         rc = sscanf(current + sz, "target%d:%d:%"PRIu64"/%n", &tosser0, &tosser1,
                     &tosser3, &pos0);
         debug("current:\"%s\" rc:%d pos0:%d\n", current+sz, rc, pos0);
-        arrow(LOG_DEBUG, spaces, 9, pos0, rc, 3);
         if (rc != 3)
                 return -1;
         sz += pos0;
@@ -230,7 +215,6 @@
         rc = sscanf(current + sz, "%d:%d:%d:%"PRIu64"/%n",
                     scsi_bus, scsi_device, scsi_target, scsi_lun, &pos0);
         debug("current:\"%s\" rc:%d pos0:%d\n", current+sz, rc, pos0);
-        arrow(LOG_DEBUG, spaces, 9, pos0, rc, 4);
         if (rc != 4)
                 return -1;
         sz += pos0;
@@ -247,13 +231,6 @@
         ssize_t sz;
         int pos;
         int rc;
-        char *spaces;
-
-        pos = strlen(current);
-        spaces = alloca(pos+1);
-        memset(spaces, ' ', pos+1);
-        spaces[pos] = '\0';
-        pos = 0;
 
         debug("entry");
 
@@ -265,7 +242,6 @@
                     &dev->scsi_info.scsi_lun,
                     &pos);
         debug("current:\"%s\" rc:%d pos:%d\n", dev->device, rc, pos);
-        arrow(LOG_DEBUG, spaces, 9, pos, rc, 3);
         if (rc != 4)
                 return 0;
 
diff -Naur orig/src/linux-soc-root.c patched/src/linux-soc-root.c
--- orig/src/linux-soc-root.c	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/linux-soc-root.c	2019-05-22 22:50:29.103376661 +0200
@@ -43,13 +43,6 @@
         int rc;
         int pos;
         const char *devpart = current;
-        char *spaces;
-
-        pos = strlen(current);
-        spaces = alloca(pos+1);
-        memset(spaces, ' ', pos+1);
-        spaces[pos] = '\0';
-        pos = 0;
 
         debug("entry");
 
diff -Naur orig/src/linux-virtblk.c patched/src/linux-virtblk.c
--- orig/src/linux-virtblk.c	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/linux-virtblk.c	2019-05-22 22:50:29.103376661 +0200
@@ -50,20 +50,12 @@
         uint32_t tosser;
         int pos;
         int rc;
-        char *spaces;
-
-        pos = strlen(current);
-        spaces = alloca(pos+1);
-        memset(spaces, ' ', pos+1);
-        spaces[pos] = '\0';
-        pos = 0;
 
         debug("entry");
 
         debug("searching for virtio0/");
         rc = sscanf(current, "virtio%x/%n", &tosser, &pos);
         debug("current:\"%s\" rc:%d pos:%d\n", current, rc, pos);
-        arrow(LOG_DEBUG, spaces, 9, pos, rc, 1);
         /*
          * If we couldn't find virtioX/ then it isn't a virtio device.
          */
diff -Naur orig/src/ucs2.h patched/src/ucs2.h
--- orig/src/ucs2.h	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/ucs2.h	2019-05-22 22:50:29.103376661 +0200
@@ -23,16 +23,20 @@
 	(((val) & ((mask) << (shift))) >> (shift))
 
 static inline size_t UNUSED
-ucs2len(const uint16_t * const s, ssize_t limit)
+ucs2len(const void *vs, ssize_t limit)
 {
 	ssize_t i;
-	for (i = 0; i < (limit >= 0 ? limit : i+1) && s[i] != (uint16_t)0; i++)
+	const uint8_t *s8 = vs;
+
+	for (i = 0;
+	     i < (limit >= 0 ? limit : i+1) && !(s8[0] == 0 && s8[1] == 0);
+	     i++, s8 += 2)
 		;
 	return i;
 }
 
 static inline size_t UNUSED
-ucs2size(const uint16_t * const s, ssize_t limit)
+ucs2size(const void *s, ssize_t limit)
 {
 	size_t rc = ucs2len(s, limit);
 	rc *= sizeof (uint16_t);
@@ -69,10 +73,11 @@
 }
 
 static inline unsigned char * UNUSED
-ucs2_to_utf8(const uint16_t * const chars, ssize_t limit)
+ucs2_to_utf8(const void * const voidchars, ssize_t limit)
 {
 	ssize_t i, j;
 	unsigned char *ret;
+	const uint16_t * const chars = voidchars;
 
 	if (limit < 0)
 		limit = ucs2len(chars, -1);
@@ -124,10 +129,12 @@
 }
 
 static inline ssize_t UNUSED NONNULL(4)
-utf8_to_ucs2(uint16_t *ucs2, ssize_t size, int terminate, uint8_t *utf8)
+utf8_to_ucs2(void *ucs2void, ssize_t size, int terminate, uint8_t *utf8)
 {
 	ssize_t req;
 	ssize_t i, j;
+	uint16_t *ucs2 = ucs2void;
+	uint16_t val16;
 
 	if (!ucs2 && size > 0) {
 		errno = EINVAL;
@@ -162,10 +169,13 @@
 			val = utf8[i] & 0x7f;
 			i += 1;
 		}
-		ucs2[j] = val;
+		val16 = val;
+		ucs2[j] = val16;
+	}
+	if (terminate) {
+		val16 = 0;
+		ucs2[j++] = val16;
 	}
-	if (terminate)
-		ucs2[j++] = (uint16_t)0;
 	return j;
 };
 
diff -Naur orig/src/util.h patched/src/util.h
--- orig/src/util.h	2018-12-05 17:17:42.000000000 +0100
+++ patched/src/util.h	2019-05-22 22:50:29.103376661 +0200
@@ -52,6 +52,15 @@
 #define PACKED __attribute__((__packed__))
 #define VERSION(sym, ver) __asm__(".symver " # sym "," # ver)
 
+#define __branch_check__(x, expect, is_constant) \
+	__builtin_expect(!!(x), expect)
+#ifndef likely
+#define likely(x) (__branch_check__(x, 1, __builtin_constant_p(x)))
+#endif
+#ifndef unlikely
+#define unlikely(x) (__branch_check__(x, 0, __builtin_constant_p(x)))
+#endif
+
 /*
  * I'm not actually sure when these appear, but they're present in the
  * version in front of me.
@@ -243,6 +252,17 @@
         return (x / n) * y;
 }
 
+#ifndef strdupa
+#define strdupa(s)                                                      \
+       (__extension__ ({                                                \
+                const char *__in = (s);                                 \
+                size_t __len = strlen (__in);                           \
+                char *__out = (char *) alloca (__len + 1);              \
+                strcpy(__out, __in);                                    \
+                __out;                                                  \
+        }))
+#endif
+
 #ifndef strndupa
 #define strndupa(s, l)                                                  \
        (__extension__ ({                                                \
@@ -379,7 +399,6 @@
 #undef log
 #endif
 #define log(level, fmt, args...) log_(__FILE__, __LINE__, __func__, level, fmt, ## args)
-#define arrow(l,b,o,p,n,m) ({if(n==m){char c_=b[p+1]; b[o]='^'; b[p+o]='^';b[p+o+1]='\0';log(l,"%s",b);b[o]=' ';b[p+o]=' ';b[p+o+1]=c_;}})
 #define debug(fmt, args...) log(LOG_DEBUG, fmt, ## args)
 
 #endif /* EFIVAR_UTIL_H */
