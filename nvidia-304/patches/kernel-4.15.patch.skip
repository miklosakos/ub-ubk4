diff -ur a/nv.c b/nv.c
--- a/nv.c	2017-09-14 22:51:09.000000000 +0200
+++ b/nv.c	2019-02-11 23:59:07.123013012 +0100
@@ -301,7 +301,7 @@
 #else
 irqreturn_t   nv_kern_isr(int, void *);
 #endif
-void          nv_kern_rc_timer(unsigned long);
+void          nv_kern_rc_timer(struct timer_list *t);
 #if defined(NV_PM_SUPPORT_OLD_STYLE_APM)
 static int    nv_kern_apm_event(struct pm_dev *, pm_request_t, void *);
 #endif
@@ -2075,10 +2075,10 @@
 }
 
 void nv_kern_rc_timer(
-    unsigned long data
+    struct timer_list *t
 )
 {
-    nv_linux_state_t *nvl = (nv_linux_state_t *) data;
+    nv_linux_state_t *nvl = from_timer(nvl, t, rc_timer);
     nv_state_t *nv = NV_STATE_PTR(nvl);
 
     NV_CHECK_PCI_CONFIG_SPACE(nvl->timer_sp, nv, TRUE, TRUE, FALSE);
@@ -3029,9 +3029,7 @@
         return -1;
 
     nv_printf(NV_DBG_INFO, "NVRM: initializing rc timer\n");
-    init_timer(&nvl->rc_timer);
-    nvl->rc_timer.function = nv_kern_rc_timer;
-    nvl->rc_timer.data = (unsigned long) nv;
+    timer_setup(&nvl->rc_timer, nv_kern_rc_timer, 0);
     nv->rc_timer_enabled = 1;
     mod_timer(&nvl->rc_timer, jiffies + HZ); /* set our timeout for 1 second */
     nv_printf(NV_DBG_INFO, "NVRM: rc timer initialized\n");
diff -ur a/nv-drm.c b/nv-drm.c
--- a/nv-drm.c	2019-02-11 23:51:01.162061177 +0100
+++ b/nv-drm.c	2019-02-11 23:52:54.575216832 +0100
@@ -22,6 +22,15 @@
 #include <drm/drm_gem.h>
 #endif
 
+/*
+ * drm_pci_(init|exit) were renamed to drm_legacy_pci_(init|exit)
+ * in 4.14; map the new interface names to the old ones.
+ */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 14, 0)
+# define drm_pci_init drm_legacy_pci_init
+# define drm_pci_exit drm_legacy_pci_exit
+#endif
+
 extern nv_linux_state_t *nv_linux_devices;
 
 static int nv_drm_load(
