diff -Naur orig/Cargo.lock patched/Cargo.lock
--- orig/Cargo.lock	2021-11-22 06:48:07.000000000 +0100
+++ patched/Cargo.lock	2021-12-04 17:07:36.874961285 +0100
@@ -15,6 +15,15 @@
 checksum = "aae1277d39aeec15cb388266ecc24b11c80469deae6067e17a1a7aa9e5c1f234"
 
 [[package]]
+name = "aho-corasick"
+version = "0.7.18"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
 name = "alsa"
 version = "0.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -38,18 +47,18 @@
 
 [[package]]
 name = "ansi_term"
-version = "0.11.0"
+version = "0.12.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b"
+checksum = "d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2"
 dependencies = [
  "winapi",
 ]
 
 [[package]]
 name = "anyhow"
-version = "1.0.45"
+version = "1.0.51"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ee10e43ae4a853c0a3591d4e2ada1719e553be18199d9da9d4a83f5927c2f5c7"
+checksum = "8b26702f315f53b6071259e15dd9d64528213b44d61de1ec926eca7715d62203"
 
 [[package]]
 name = "arrayref"
@@ -312,9 +321,9 @@
 
 [[package]]
 name = "clap"
-version = "2.33.3"
+version = "2.34.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "37e58ac78573c40708d45522f0d80fa2f01cc4f9b4e2bf749807255454312002"
+checksum = "a0610544180c38b88101fecf2dd634b174a62eef6946f84dfc6a7127512b381c"
 dependencies = [
  "ansi_term",
  "atty",
@@ -405,9 +414,9 @@
 
 [[package]]
 name = "crc32fast"
-version = "1.2.1"
+version = "1.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "81156fece84ab6a9f2afdb109ce3ae577e42b1228441eded99bd77f627953b1a"
+checksum = "738c290dfaea84fc1ca15ad9c168d083b05a714e1efddd8edaab678dc28d2836"
 dependencies = [
  "cfg-if",
 ]
@@ -476,6 +485,7 @@
  "crc32fast",
  "crossbeam-channel",
  "directories-next",
+ "ffmpeg_cmdline_utils",
  "futures",
  "hamming",
  "humansize",
@@ -484,6 +494,7 @@
  "rayon",
  "rodio",
  "tempfile",
+ "vid_dup_finder_lib",
  "xxhash-rust",
  "zip",
 ]
@@ -505,6 +516,7 @@
  "image",
  "img_hash",
  "open",
+ "regex",
  "trash",
  "winapi",
 ]
@@ -602,6 +614,19 @@
 checksum = "e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457"
 
 [[package]]
+name = "ffmpeg_cmdline_utils"
+version = "0.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2f156b1f5ba5f16135ec1efd32d9f90d0dad3ef8f8b77ca9928d4d0e3b24dd41"
+dependencies = [
+ "image",
+ "rayon",
+ "serde",
+ "serde_json",
+ "thiserror",
+]
+
+[[package]]
 name = "field-offset"
 version = "0.3.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -637,9 +662,9 @@
 
 [[package]]
 name = "futures"
-version = "0.3.17"
+version = "0.3.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a12aa0eb539080d55c3f2d45a67c3b58b6b0773c1a3ca2dfec66d58c97fd66ca"
+checksum = "8cd0210d8c325c245ff06fd95a3b13689a1a276ac8cfa8e8720cb840bfb84b9e"
 dependencies = [
  "futures-channel",
  "futures-core",
@@ -652,9 +677,9 @@
 
 [[package]]
 name = "futures-channel"
-version = "0.3.17"
+version = "0.3.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5da6ba8c3bb3c165d3c7319fc1cc8304facf1fb8db99c5de877183c08a273888"
+checksum = "7fc8cd39e3dbf865f7340dce6a2d401d24fd37c6fe6c4f0ee0de8bfca2252d27"
 dependencies = [
  "futures-core",
  "futures-sink",
@@ -662,15 +687,15 @@
 
 [[package]]
 name = "futures-core"
-version = "0.3.17"
+version = "0.3.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "88d1c26957f23603395cd326b0ffe64124b818f4449552f960d815cfba83a53d"
+checksum = "629316e42fe7c2a0b9a65b47d159ceaa5453ab14e8f0a3c5eedbb8cd55b4a445"
 
 [[package]]
 name = "futures-executor"
-version = "0.3.17"
+version = "0.3.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "45025be030969d763025784f7f355043dc6bc74093e4ecc5000ca4dc50d8745c"
+checksum = "7b808bf53348a36cab739d7e04755909b9fcaaa69b7d7e588b37b6ec62704c97"
 dependencies = [
  "futures-core",
  "futures-task",
@@ -679,18 +704,16 @@
 
 [[package]]
 name = "futures-io"
-version = "0.3.17"
+version = "0.3.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "522de2a0fe3e380f1bc577ba0474108faf3f6b18321dbf60b3b9c39a75073377"
+checksum = "e481354db6b5c353246ccf6a728b0c5511d752c08da7260546fc0933869daa11"
 
 [[package]]
 name = "futures-macro"
-version = "0.3.17"
+version = "0.3.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "18e4a4b95cea4b4ccbcf1c5675ca7c4ee4e9e75eb79944d07defde18068f79bb"
+checksum = "a89f17b21645bc4ed773c69af9c9a0effd4a3f1a3876eadd453469f8854e7fdd"
 dependencies = [
- "autocfg",
- "proc-macro-hack",
  "proc-macro2",
  "quote",
  "syn",
@@ -698,23 +721,22 @@
 
 [[package]]
 name = "futures-sink"
-version = "0.3.17"
+version = "0.3.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "36ea153c13024fe480590b3e3d4cad89a0cfacecc24577b68f86c6ced9c2bc11"
+checksum = "996c6442437b62d21a32cd9906f9c41e7dc1e19a9579843fad948696769305af"
 
 [[package]]
 name = "futures-task"
-version = "0.3.17"
+version = "0.3.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1d3d00f4eddb73e498a54394f228cd55853bdf059259e8e7bc6e69d408892e99"
+checksum = "dabf1872aaab32c886832f2276d2f5399887e2bd613698a02359e4ea83f8de12"
 
 [[package]]
 name = "futures-util"
-version = "0.3.17"
+version = "0.3.18"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "36568465210a3a6ee45e1f165136d68671471a501e632e9a98d96872222b5481"
+checksum = "41d22213122356472061ac0f1ab2cee28d2bac8491410fd68c2af53d1cedb83e"
 dependencies = [
- "autocfg",
  "futures-channel",
  "futures-core",
  "futures-io",
@@ -724,8 +746,6 @@
  "memchr",
  "pin-project-lite",
  "pin-utils",
- "proc-macro-hack",
- "proc-macro-nested",
  "slab",
 ]
 
@@ -1051,7 +1071,7 @@
 dependencies = [
  "base64",
  "image",
- "rustdct",
+ "rustdct 0.4.0",
  "serde",
  "transpose 0.2.1",
 ]
@@ -1075,6 +1095,12 @@
 ]
 
 [[package]]
+name = "itoa"
+version = "0.4.8"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b71991ff56294aa922b450139ee08b3bfc70982c6b2c7562771375cf73542dd4"
+
+[[package]]
 name = "jni"
 version = "0.19.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -1146,15 +1172,15 @@
 
 [[package]]
 name = "libc"
-version = "0.2.107"
+version = "0.2.108"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fbe5e23404da5b4f555ef85ebed98fb4083e55a00c317800bc2a50ede9f3d219"
+checksum = "8521a1b57e76b1ec69af7599e75e38e7b7fad6610f037db8c79b127201b5d119"
 
 [[package]]
 name = "libloading"
-version = "0.7.1"
+version = "0.7.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0cf036d15402bea3c5d4de17b3fce76b3e4a56ebc1f577be0e7a72f7c607cf0"
+checksum = "afe203d669ec979b7128619bae5a63b7b42e9203c1b29146079ee05e2f604b52"
 dependencies = [
  "cfg-if",
  "winapi",
@@ -1336,9 +1362,9 @@
 
 [[package]]
 name = "ndk-sys"
-version = "0.2.1"
+version = "0.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c44922cb3dbb1c70b5e5f443d63b64363a898564d739ba5198e3a9138442868d"
+checksum = "e1bcdd74c20ad5d95aacd60ef9ba40fdf77f767051040541df557b7a9b2a2121"
 
 [[package]]
 name = "nix"
@@ -1373,6 +1399,15 @@
 ]
 
 [[package]]
+name = "num-complex"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "747d632c0c558b87dbabbe6a82f3b4ae03720d0646ac5b7b4dae89394be5f2c5"
+dependencies = [
+ "num-traits",
+]
+
+[[package]]
 name = "num-derive"
 version = "0.3.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -1496,9 +1531,9 @@
 
 [[package]]
 name = "open"
-version = "2.0.1"
+version = "2.0.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b46b233de7d83bc167fe43ae2dda3b5b84e80e09cceba581e4decb958a4896bf"
+checksum = "176ee4b630d174d2da8241336763bb459281dddc0f4d87f72c3b1efc9a6109b7"
 dependencies = [
  "pathdiff",
  "winapi",
@@ -1612,6 +1647,15 @@
 checksum = "ed0cfbc8191465bed66e1718596ee0b0b35d5ee1f41c5df2189d0fe8bde535ba"
 
 [[package]]
+name = "primal-check"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "01419cee72c1a1ca944554e23d83e483e1bccf378753344e881de28b5487511d"
+dependencies = [
+ "num-integer",
+]
+
+[[package]]
 name = "proc-macro-crate"
 version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -1655,18 +1699,6 @@
 ]
 
 [[package]]
-name = "proc-macro-hack"
-version = "0.5.19"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "dbf0c48bc1d91375ae5c3cd81e3722dff1abcf81a30960240640d223f59fe0e5"
-
-[[package]]
-name = "proc-macro-nested"
-version = "0.1.7"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bc881b2c22681370c6a780e47af9840ef841837bc98118431d4e1868bd0c1086"
-
-[[package]]
 name = "proc-macro2"
 version = "1.0.32"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -1774,6 +1806,8 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "d07a8629359eb56f1e2fb1652bb04212c072a87ba68546a04065d525673ac461"
 dependencies = [
+ "aho-corasick",
+ "memchr",
  "regex-syntax",
 ]
 
@@ -1826,7 +1860,16 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ef4d167674b4cf68c2114bdbcd34c95aa9071652b73b0f43b19298f1d2780b7d"
 dependencies = [
- "rustfft",
+ "rustfft 3.0.1",
+]
+
+[[package]]
+name = "rustdct"
+version = "0.6.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fadcb505b98aa64da1dadb1498b912e3642aae4606623cb3ae952cd8da33f80d"
+dependencies = [
+ "rustfft 5.1.1",
 ]
 
 [[package]]
@@ -1835,7 +1878,7 @@
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "77008ed59a8923c8b4ac2e5eaa6d28fbe893d3b9515098a4a5fc7767d6430fe5"
 dependencies = [
- "num-complex",
+ "num-complex 0.2.4",
  "num-integer",
  "num-traits",
  "strength_reduce",
@@ -1843,6 +1886,26 @@
 ]
 
 [[package]]
+name = "rustfft"
+version = "5.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1869bb2a6ff77380d52ff4bc631f165637035a55855c76aa462c85474dadc42f"
+dependencies = [
+ "num-complex 0.3.1",
+ "num-integer",
+ "num-traits",
+ "primal-check",
+ "strength_reduce",
+ "transpose 0.2.1",
+]
+
+[[package]]
+name = "ryu"
+version = "1.0.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3c9613b5a66ab9ba26415184cfc41156594925a9cf3a2057e57f31ff145f6568"
+
+[[package]]
 name = "same-file"
 version = "1.0.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -1902,6 +1965,17 @@
 ]
 
 [[package]]
+name = "serde_json"
+version = "1.0.72"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d0ffa0837f2dfa6fb90868c2b5468cad482e175f7dad97e7421951e663f2b527"
+dependencies = [
+ "itoa",
+ "ryu",
+ "serde",
+]
+
+[[package]]
 name = "shlex"
 version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -1998,9 +2072,9 @@
 
 [[package]]
 name = "syn"
-version = "1.0.81"
+version = "1.0.82"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f2afee18b8beb5a596ecb4a2dce128c719b4ba399d34126b9e4396e3f9860966"
+checksum = "8daf5dd0bb60cbd4137b1b587d2fc0ae729bc07cf01cd70b36a1ed5ade3b9d59"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -2194,6 +2268,22 @@
 checksum = "5fecdca9a5291cc2b8dcf7dc02453fee791a280f3743cb0905f8822ae463b3fe"
 
 [[package]]
+name = "vid_dup_finder_lib"
+version = "0.1.0"
+source = "git+https://github.com/qarmin/vid_dup_finder_lib#a4809772aea8f73c9a22da6fb43df50bfdd1b31d"
+dependencies = [
+ "ffmpeg_cmdline_utils",
+ "image",
+ "rand",
+ "rayon",
+ "rustdct 0.6.0",
+ "serde",
+ "serde_json",
+ "thiserror",
+ "transpose 0.2.1",
+]
+
+[[package]]
 name = "walkdir"
 version = "2.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
diff -Naur orig/Changelog.md patched/Changelog.md
--- orig/Changelog.md	2021-11-22 06:48:07.000000000 +0100
+++ patched/Changelog.md	2021-12-04 17:07:36.874961285 +0100
@@ -1,5 +1,22 @@
-## Version 3.3.1 - 22.11.2021r
+## Version 4.0.0 - ?
+- Add support for finding similar videos - [#460](https://github.com/qarmin/czkawka/pull/460)
+- GUI code refactoring(could fix some bugs) - [#462](https://github.com/qarmin/czkawka/pull/462)
+- Fixed crash when trying to hard/symlink 0 files - [#462](https://github.com/qarmin/czkawka/pull/462)
+- GTK 4 compatibility improvements for future change of toolkit - [#467](https://github.com/qarmin/czkawka/pull/467), [#468](https://github.com/qarmin/czkawka/pull/468), [#473](https://github.com/qarmin/czkawka/pull/473), [#474](https://github.com/qarmin/czkawka/pull/474)
+- Change minimal supported OS to Ubuntu 20.04(needed by GTK) - [#468](https://github.com/qarmin/czkawka/pull/468)
+- Increased performance when using image previews - [#468](https://github.com/qarmin/czkawka/pull/468)
+- Improved performance due caching hash of broken/not supported images/videos = [#471](https://github.com/qarmin/czkawka/pull/471)
+- Option to not remove cache from non existent files(e.g. from unplugged pendrive) - [#472](https://github.com/qarmin/czkawka/pull/472)
+- Add multiple tooltips with helpful messages - [#472](https://github.com/qarmin/czkawka/pull/472)
+- Allow to cache prehash - [#477](https://github.com/qarmin/czkawka/pull/477)
+- Improve custom selecting of records(allows to use Rust red regex) - [#489](https://github.com/qarmin/czkawka/pull/478)
+- Remove support for finding zeroed files - [#461](https://github.com/qarmin/czkawka/pull/461)
+- Remove HashMB mode - [#476](https://github.com/qarmin/czkawka/pull/476)
+- Approximate comparison of music - [#483](https://github.com/qarmin/czkawka/pull/483)
 
+## Version 3.3.1 - 22.11.2021r
+- Fix crash when moving buttons [#457](https://github.com/qarmin/czkawka/pull/457)
+- Hide move button at start [c9ca230](https://github.com/qarmin/czkawka/commit/c9ca230dfd05e2166b2d68683b091cfd45037edd)
 
 ## Version 3.3.0 - 20.11.2021r
 - Select files by pressing space key [#415](https://github.com/qarmin/czkawka/pull/415)
@@ -198,7 +215,7 @@
 - Added support for finding similar pictures in GUI [#69](https://github.com/qarmin/czkawka/issues/69)
 
 ## Version 1.0.0 - 02.10.2020r
-- Added confirmation button to delete button
+- Added confirmation dialog to delete button
 - Updated Readme
 - Tested a lot app, so I think that it version 1.0.0 can be freely released
 
diff -Naur orig/czkawka_cli/src/commands.rs patched/czkawka_cli/src/commands.rs
--- orig/czkawka_cli/src/commands.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_cli/src/commands.rs	2021-12-04 17:07:36.874961285 +0100
@@ -1,14 +1,16 @@
+use std::path::PathBuf;
+
+use img_hash::{FilterType, HashAlg};
+use structopt::StructOpt;
+
 use czkawka_core::duplicate::{CheckingMethod, DeleteMethod, HashType};
 use czkawka_core::same_music::MusicSimilarity;
 use czkawka_core::similar_images::SimilarityPreset;
-use img_hash::{FilterType, HashAlg};
-use std::path::PathBuf;
-use structopt::StructOpt;
 
 #[derive(Debug, StructOpt)]
 #[structopt(name = "czkawka", help_message = HELP_MESSAGE, template = HELP_TEMPLATE)]
 pub enum Commands {
-    #[structopt(name = "dup", about = "Finds duplicate files", help_message = HELP_MESSAGE, after_help = "EXAMPLE:\n    czkawka dup -d /home/rafal -e /home/rafal/Obrazy  -m 25 -x 7z rar IMAGE -s hashmb -f results.txt -D aeo")]
+    #[structopt(name = "dup", about = "Finds duplicate files", help_message = HELP_MESSAGE, after_help = "EXAMPLE:\n    czkawka dup -d /home/rafal -e /home/rafal/Obrazy  -m 25 -x 7z rar IMAGE -s hash -f results.txt -D aeo")]
     Duplicates {
         #[structopt(flatten)]
         directories: Directories,
@@ -20,15 +22,15 @@
         minimal_file_size: u64,
         #[structopt(short = "i", long, parse(try_from_str = parse_maximal_file_size), default_value = "18446744073709551615", help = "Maximum size in bytes", long_help = "Maximum size of checked files in bytes, assigning lower value may speed up searching")]
         maximal_file_size: u64,
-        #[structopt(short = "c", long, parse(try_from_str = parse_minimal_file_size), default_value = "2097152", help = "Minimum cached file size in bytes", long_help = "Minimum size of cached files in bytes, assigning bigger value may speed up will cause that lower amount of files will be cached, but loading of cache will be faster")]
+        #[structopt(short = "c", long, parse(try_from_str = parse_minimal_file_size), default_value = "257144", help = "Minimum cached file size in bytes", long_help = "Minimum size of cached files in bytes, assigning bigger value may speed up will cause that lower amount of files will be cached, but loading of cache will be faster")]
         minimal_cached_file_size: u64,
         #[structopt(flatten)]
         allowed_extensions: AllowedExtensions,
-        #[structopt(short, long, default_value = "HASH", parse(try_from_str = parse_checking_method), help = "Search method (NAME, SIZE, HASH, HASHMB)", long_help = "Methods to search files.\nNAME - Fast but but rarely usable,\nSIZE - Fast but not accurate, checking by the file's size,\nHASHMB - More accurate but slower, checking by the hash of the file's first mebibyte\nHASH - The slowest method, checking by the hash of the entire file")]
+        #[structopt(short, long, default_value = "HASH", parse(try_from_str = parse_checking_method), help = "Search method (NAME, SIZE, HASH)", long_help = "Methods to search files.\nNAME - Fast but but rarely usable,\nSIZE - Fast but not accurate, checking by the file's size,\nHASH - The slowest method, checking by the hash of the entire file")]
         search_method: CheckingMethod,
         #[structopt(short = "D", long, default_value = "NONE", parse(try_from_str = parse_delete_method), help = "Delete method (AEN, AEO, ON, OO, HARD)", long_help = "Methods to delete the files.\nAEN - All files except the newest,\nAEO - All files except the oldest,\nON - Only 1 file, the newest,\nOO - Only 1 file, the oldest\nHARD - create hard link\nNONE - not delete files")]
         delete_method: DeleteMethod,
-        #[structopt(short = "ht", long, default_value = "BLAKE3", parse(try_from_str = parse_hash_type), help="Hash type (BLAKE3, CRC32, XXH3)")]
+        #[structopt(short = "ht", long, default_value = "BLAKE3", parse(try_from_str = parse_hash_type), help = "Hash type (BLAKE3, CRC32, XXH3)")]
         hash_type: HashType,
         #[structopt(flatten)]
         file_to_save: FileToSave,
@@ -121,34 +123,13 @@
         file_to_save: FileToSave,
         #[structopt(flatten)]
         not_recursive: NotRecursive,
-        #[structopt(short = "g", long, default_value = "Gradient", parse(try_from_str = parse_similar_hash_algorithm), help="Hash algorithm (allowed: Mean, Gradient, Blockhash, VertGradient, DoubleGradient)")]
+        #[structopt(short = "g", long, default_value = "Gradient", parse(try_from_str = parse_similar_hash_algorithm), help = "Hash algorithm (allowed: Mean, Gradient, Blockhash, VertGradient, DoubleGradient)")]
         hash_alg: HashAlg,
-        #[structopt(short = "f", long, default_value = "Lanczos3", parse(try_from_str = parse_similar_image_filter), help="Hash algorithm (allowed: Lanczos3, Nearest, Triangle, Faussian, Catmullrom)")]
+        #[structopt(short = "z", long, default_value = "Lanczos3", parse(try_from_str = parse_similar_image_filter), help = "Hash algorithm (allowed: Lanczos3, Nearest, Triangle, Faussian, Catmullrom)")]
         image_filter: FilterType,
-        #[structopt(short = "c", long, default_value = "8", parse(try_from_str = parse_image_hash_size), help="Hash size (allowed: 4, 8, 16)")]
+        #[structopt(short = "c", long, default_value = "8", parse(try_from_str = parse_image_hash_size), help = "Hash size (allowed: 4, 8, 16)")]
         hash_size: u8,
     },
-    #[structopt(name = "zeroed", about = "Finds zeroed files", help_message = HELP_MESSAGE, after_help = "EXAMPLE:\n    czkawka zeroed -d /home/rafal -e /home/rafal/Pulpit -f results.txt")]
-    ZeroedFiles {
-        #[structopt(flatten)]
-        directories: Directories,
-        #[structopt(flatten)]
-        excluded_directories: ExcludedDirectories,
-        #[structopt(flatten)]
-        excluded_items: ExcludedItems,
-        #[structopt(flatten)]
-        allowed_extensions: AllowedExtensions,
-        #[structopt(short = "D", long, help = "Delete found files")]
-        delete_files: bool,
-        #[structopt(flatten)]
-        file_to_save: FileToSave,
-        #[structopt(flatten)]
-        not_recursive: NotRecursive,
-        #[structopt(short, long, parse(try_from_str = parse_minimal_file_size), default_value = "8192", help = "Minimum size in bytes", long_help = "Minimum size of checked files in bytes, assigning bigger value may speed up searching")]
-        minimal_file_size: u64,
-        #[structopt(short = "i", long, parse(try_from_str = parse_maximal_file_size), default_value = "18446744073709551615", help = "Maximum size in bytes", long_help = "Maximum size of checked files in bytes, assigning lower value may speed up searching")]
-        maximal_file_size: u64,
-    },
     #[structopt(name = "music", about = "Finds same music by tags", help_message = HELP_MESSAGE, after_help = "EXAMPLE:\n    czkawka music -d /home/rafal -f results.txt")]
     SameMusic {
         #[structopt(flatten)]
@@ -204,6 +185,29 @@
         #[structopt(flatten)]
         not_recursive: NotRecursive,
     },
+    #[structopt(name = "video", about = "Finds similar video files", help_message = HELP_MESSAGE, after_help = "EXAMPLE:\n    czkawka videos -d /home/rafal -f results.txt")]
+    SimilarVideos {
+        #[structopt(flatten)]
+        directories: Directories,
+        #[structopt(flatten)]
+        excluded_directories: ExcludedDirectories,
+        #[structopt(flatten)]
+        excluded_items: ExcludedItems,
+        // #[structopt(short = "D", long, help = "Delete found files")]
+        // delete_files: bool, TODO
+        #[structopt(flatten)]
+        file_to_save: FileToSave,
+        #[structopt(flatten)]
+        allowed_extensions: AllowedExtensions,
+        #[structopt(flatten)]
+        not_recursive: NotRecursive,
+        #[structopt(short, long, parse(try_from_str = parse_minimal_file_size), default_value = "8192", help = "Minimum size in bytes", long_help = "Minimum size of checked files in bytes, assigning bigger value may speed up searching")]
+        minimal_file_size: u64,
+        #[structopt(short = "i", long, parse(try_from_str = parse_maximal_file_size), default_value = "18446744073709551615", help = "Maximum size in bytes", long_help = "Maximum size of checked files in bytes, assigning lower value may speed up searching")]
+        maximal_file_size: u64,
+        #[structopt(short = "t", long, parse(try_from_str = parse_tolerance), default_value = "10", help = "Video maximium difference (allowed values <0,20>)", long_help = "Maximum difference between video frames, bigger value means that videos can looks more and more different (allowed values <0,20>)")]
+        tolerance: i32,
+    },
     #[structopt(name = "tester", about = "Contains various test", help_message = HELP_MESSAGE, after_help = "EXAMPLE:\n    czkawka tests -i")]
     Tester {
         #[structopt(short = "i", long = "test_image", help = "Test speed of hashing provided test.jpg image with different filters and methods.")]
@@ -283,13 +287,25 @@
     }
 }
 
+fn parse_tolerance(src: &str) -> Result<i32, &'static str> {
+    match src.parse::<i32>() {
+        Ok(t) => {
+            if (0..=20).contains(&t) {
+                Ok(t)
+            } else {
+                Err("Tolerance should be in range <0,20>(Higher and lower similarity )")
+            }
+        }
+        _ => Err("Failed to parse tolerance as i32 value."),
+    }
+}
+
 fn parse_checking_method(src: &str) -> Result<CheckingMethod, &'static str> {
     match src.to_ascii_lowercase().as_str() {
         "name" => Ok(CheckingMethod::Name),
         "size" => Ok(CheckingMethod::Size),
         "hash" => Ok(CheckingMethod::Hash),
-        "hashmb" => Ok(CheckingMethod::HashMb),
-        _ => Err("Couldn't parse the search method (allowed: NAME, SIZE, HASH, HASHMB)"),
+        _ => Err("Couldn't parse the search method (allowed: NAME, SIZE, HASH)"),
     }
 }
 
@@ -349,6 +365,7 @@
     };
     Ok(filter_type)
 }
+
 fn parse_similar_hash_algorithm(src: &str) -> Result<HashAlg, String> {
     let algorithm;
     algorithm = match src.to_lowercase().as_str() {
@@ -365,10 +382,11 @@
 fn parse_image_hash_size(src: &str) -> Result<u8, String> {
     let hash_size;
     hash_size = match src.to_lowercase().as_str() {
-        "4" => 4,
         "8" => 8,
         "16" => 16,
-        _ => return Err("Couldn't parse the image hash size (allowed: 4, 8, 16)".to_string()),
+        "32" => 32,
+        "64" => 64,
+        _ => return Err("Couldn't parse the image hash size (allowed: 8, 16, 32, 64)".to_string()),
     };
     Ok(hash_size)
 }
@@ -422,13 +440,12 @@
     try "{usage} -h" to get more info about a specific tool
 
 EXAMPLES:
-    {bin} dup -d /home/rafal -e /home/rafal/Obrazy  -m 25 -x 7z rar IMAGE -s hashmb -f results.txt -D aeo
+    {bin} dup -d /home/rafal -e /home/rafal/Obrazy  -m 25 -x 7z rar IMAGE -s hash -f results.txt -D aeo
     {bin} empty-folders -d /home/rafal/rr /home/gateway -f results.txt
     {bin} big -d /home/rafal/ /home/piszczal -e /home/rafal/Roman -n 25 -x VIDEO -f results.txt
     {bin} empty-files -d /home/rafal /home/szczekacz -e /home/rafal/Pulpit -R -f results.txt
     {bin} temp -d /home/rafal/ -E */.git */tmp* *Pulpit -f results.txt -D
     {bin} image -d /home/rafal -e /home/rafal/Pulpit -f results.txt
-    {bin} zeroed -d /home/rafal -e /home/krzak -f results.txt"
     {bin} music -d /home/rafal -e /home/rafal/Pulpit -z "artist,year, ARTISTALBUM, ALBUM___tiTlE"  -f results.txt
     {bin} symlinks -d /home/kicikici/ /home/szczek -e /home/kicikici/jestempsem -x jpg -f results.txt
     {bin} broken -d /home/mikrut/ -e /home/mikrut/trakt -f results.txt"#;
diff -Naur orig/czkawka_cli/src/main.rs patched/czkawka_cli/src/main.rs
--- orig/czkawka_cli/src/main.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_cli/src/main.rs	2021-12-04 17:07:36.874961285 +0100
@@ -1,10 +1,10 @@
-mod commands;
+use std::process;
 
-use commands::Commands;
+use structopt::StructOpt;
 
+use commands::Commands;
 #[allow(unused_imports)] // It is used in release for print_results().
 use czkawka_core::common_traits::*;
-
 use czkawka_core::similar_images::test_image_conversion_speed;
 use czkawka_core::{
     big_file::{self, BigFile},
@@ -16,11 +16,11 @@
     invalid_symlinks::InvalidSymlinks,
     same_music::SameMusic,
     similar_images::{return_similarity_from_similarity_preset, SimilarImages},
+    similar_videos::SimilarVideos,
     temporary::{self, Temporary},
-    zeroed::{self, ZeroedFiles},
 };
-use std::process;
-use structopt::StructOpt;
+
+mod commands;
 
 fn main() {
     let command = Commands::from_args();
@@ -242,44 +242,6 @@
             sf.print_results();
             sf.get_text_messages().print_messages();
         }
-        Commands::ZeroedFiles {
-            directories,
-            excluded_directories,
-            excluded_items,
-            allowed_extensions,
-            delete_files,
-            file_to_save,
-            not_recursive,
-            minimal_file_size,
-            maximal_file_size,
-        } => {
-            let mut zf = ZeroedFiles::new();
-
-            zf.set_included_directory(directories.directories);
-            zf.set_excluded_directory(excluded_directories.excluded_directories);
-            zf.set_excluded_items(excluded_items.excluded_items);
-            zf.set_allowed_extensions(allowed_extensions.allowed_extensions.join(","));
-            zf.set_minimal_file_size(minimal_file_size);
-            zf.set_maximal_file_size(maximal_file_size);
-            zf.set_recursive_search(!not_recursive.not_recursive);
-
-            if delete_files {
-                zf.set_delete_method(zeroed::DeleteMethod::Delete);
-            }
-
-            zf.find_zeroed_files(None, None);
-
-            if let Some(file_name) = file_to_save.file_name() {
-                if !zf.save_results_to_file(file_name) {
-                    zf.get_text_messages().print_messages();
-                    process::exit(1);
-                }
-            }
-
-            #[cfg(not(debug_assertions))] // This will show too much probably unnecessary data to debug, comment line only if needed
-            zf.print_results();
-            zf.get_text_messages().print_messages();
-        }
         Commands::SameMusic {
             directories,
             excluded_directories,
@@ -385,6 +347,41 @@
             br.print_results();
             br.get_text_messages().print_messages();
         }
+        Commands::SimilarVideos {
+            directories,
+            excluded_directories,
+            excluded_items,
+            file_to_save,
+            not_recursive,
+            tolerance,
+            minimal_file_size,
+            maximal_file_size,
+            allowed_extensions,
+        } => {
+            let mut vr = SimilarVideos::new();
+
+            vr.set_included_directory(directories.directories);
+            vr.set_excluded_directory(excluded_directories.excluded_directories);
+            vr.set_excluded_items(excluded_items.excluded_items);
+            vr.set_allowed_extensions(allowed_extensions.allowed_extensions.join(","));
+            vr.set_recursive_search(!not_recursive.not_recursive);
+            vr.set_minimal_file_size(minimal_file_size);
+            vr.set_maximal_file_size(maximal_file_size);
+            vr.set_tolerance(tolerance);
+
+            vr.find_similar_videos(None, None);
+
+            if let Some(file_name) = file_to_save.file_name() {
+                if !vr.save_results_to_file(file_name) {
+                    vr.get_text_messages().print_messages();
+                    process::exit(1);
+                }
+            }
+
+            #[cfg(not(debug_assertions))] // This will show too much probably unnecessary data to debug, comment line only if needed
+            vr.print_results();
+            vr.get_text_messages().print_messages();
+        }
         Commands::Tester { test_image } => {
             if test_image {
                 test_image_conversion_speed();
diff -Naur orig/czkawka_core/Cargo.toml patched/czkawka_core/Cargo.toml
--- orig/czkawka_core/Cargo.toml	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/Cargo.toml	2021-12-04 17:07:36.874961285 +0100
@@ -34,13 +34,17 @@
 zip = "0.5.13"
 rodio = { version = "0.14.0", optional = true }
 
-# Hashes
+# Hashes for duplicate files
 blake3 = "1.2.0"
 crc32fast = "1.2.1"
 xxhash-rust = { version = "0.8.2", features = ["xxh3"] }
 
 tempfile = "3.2.0"
 
+# Video Duplactes
+vid_dup_finder_lib = { git = "https://github.com/qarmin/vid_dup_finder_lib" }
+ffmpeg_cmdline_utils = "0.1.0"
+
 [features]
 default = []
 
diff -Naur orig/czkawka_core/src/big_file.rs patched/czkawka_core/src/big_file.rs
--- orig/czkawka_core/src/big_file.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/big_file.rs	2021-12-04 17:07:36.874961285 +0100
@@ -1,11 +1,3 @@
-use crate::common::Common;
-use crate::common_directory::Directories;
-use crate::common_extensions::Extensions;
-use crate::common_items::ExcludedItems;
-use crate::common_messages::Messages;
-use crate::common_traits::{DebugPrint, PrintResults, SaveResults};
-use crossbeam_channel::Receiver;
-use humansize::{file_size_opts as options, FileSize};
 use std::collections::BTreeMap;
 use std::ffi::OsStr;
 use std::fs::{File, Metadata};
@@ -19,6 +11,16 @@
 use std::time::{SystemTime, UNIX_EPOCH};
 use std::{fs, thread};
 
+use crossbeam_channel::Receiver;
+use humansize::{file_size_opts as options, FileSize};
+
+use crate::common::Common;
+use crate::common_directory::Directories;
+use crate::common_extensions::Extensions;
+use crate::common_items::ExcludedItems;
+use crate::common_messages::Messages;
+use crate::common_traits::{DebugPrint, PrintResults, SaveResults};
+
 #[derive(Debug)]
 pub struct ProgressData {
     pub files_checked: usize,
@@ -36,6 +38,7 @@
     None,
     Delete,
 }
+
 /// Info struck with helpful information's about results
 #[derive(Default)]
 pub struct Info {
@@ -346,7 +349,7 @@
         println!("Excluded items - {:?}", self.excluded_items.items);
         println!("Included directories - {:?}", self.directories.included_directories);
         println!("Excluded directories - {:?}", self.directories.excluded_directories);
-        println!("Recursive search - {}", self.recursive_search.to_string());
+        println!("Recursive search - {}", self.recursive_search);
         println!("Number of files to check - {:?}", self.number_of_files_to_check);
         println!("-----------------------------------------");
     }
diff -Naur orig/czkawka_core/src/broken_files.rs patched/czkawka_core/src/broken_files.rs
--- orig/czkawka_core/src/broken_files.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/broken_files.rs	2021-12-04 17:07:36.878961290 +0100
@@ -1,23 +1,24 @@
+use std::collections::BTreeMap;
 use std::fs::{File, Metadata, OpenOptions};
 use std::io::prelude::*;
+use std::io::{BufReader, BufWriter};
 use std::path::{Path, PathBuf};
+use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
+use std::sync::Arc;
+use std::thread::sleep;
 use std::time::{Duration, SystemTime, UNIX_EPOCH};
 use std::{fs, mem, thread};
 
+use crossbeam_channel::Receiver;
+use directories_next::ProjectDirs;
+use rayon::prelude::*;
+
 use crate::common::Common;
 use crate::common_directory::Directories;
 use crate::common_extensions::Extensions;
 use crate::common_items::ExcludedItems;
 use crate::common_messages::Messages;
 use crate::common_traits::*;
-use crossbeam_channel::Receiver;
-use directories_next::ProjectDirs;
-use rayon::prelude::*;
-use std::collections::BTreeMap;
-use std::io::{BufReader, BufWriter};
-use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
-use std::sync::Arc;
-use std::thread::sleep;
 
 const CACHE_FILE_NAME: &str = "cache_broken_files.txt";
 
@@ -60,6 +61,7 @@
     pub number_of_removed_files: usize,
     pub number_of_failed_to_remove_files: usize,
 }
+
 impl Info {
     pub fn new() -> Self {
         Default::default()
@@ -487,6 +489,7 @@
         Common::print_time(start_time, SystemTime::now(), "delete_files".to_string());
     }
 }
+
 impl Default for BrokenFiles {
     fn default() -> Self {
         Self::new()
@@ -517,11 +520,12 @@
         println!("Excluded items - {:?}", self.excluded_items.items);
         println!("Included directories - {:?}", self.directories.included_directories);
         println!("Excluded directories - {:?}", self.directories.excluded_directories);
-        println!("Recursive search - {}", self.recursive_search.to_string());
+        println!("Recursive search - {}", self.recursive_search);
         println!("Delete Method - {:?}", self.delete_method);
         println!("-----------------------------------------");
     }
 }
+
 impl SaveResults for BrokenFiles {
     fn save_results_to_file(&mut self, file_name: &str) -> bool {
         let start_time: SystemTime = SystemTime::now();
@@ -560,6 +564,7 @@
         true
     }
 }
+
 impl PrintResults for BrokenFiles {
     /// Print information's about duplicated entries
     /// Only needed for CLI
diff -Naur orig/czkawka_core/src/common_directory.rs patched/czkawka_core/src/common_directory.rs
--- orig/czkawka_core/src/common_directory.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/common_directory.rs	2021-12-04 17:07:36.878961290 +0100
@@ -1,13 +1,15 @@
-use crate::common::Common;
-use crate::common_messages::Messages;
 use std::path::{Path, PathBuf};
 use std::time::SystemTime;
 
+use crate::common::Common;
+use crate::common_messages::Messages;
+
 #[derive(Default)]
 pub struct Directories {
     pub excluded_directories: Vec<PathBuf>,
     pub included_directories: Vec<PathBuf>,
 }
+
 impl Directories {
     pub fn new() -> Self {
         Default::default()
diff -Naur orig/czkawka_core/src/common_extensions.rs patched/czkawka_core/src/common_extensions.rs
--- orig/czkawka_core/src/common_extensions.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/common_extensions.rs	2021-12-04 17:07:36.878961290 +0100
@@ -1,6 +1,7 @@
+use std::time::SystemTime;
+
 use crate::common::Common;
 use crate::common_messages::Messages;
-use std::time::SystemTime;
 
 #[derive(Default)]
 pub struct Extensions {
diff -Naur orig/czkawka_core/src/common_items.rs patched/czkawka_core/src/common_items.rs
--- orig/czkawka_core/src/common_items.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/common_items.rs	2021-12-04 17:07:36.878961290 +0100
@@ -1,8 +1,9 @@
-use crate::common::Common;
-use crate::common_messages::Messages;
 use std::path::Path;
 use std::time::SystemTime;
 
+use crate::common::Common;
+use crate::common_messages::Messages;
+
 #[derive(Default)]
 pub struct ExcludedItems {
     pub items: Vec<String>,
diff -Naur orig/czkawka_core/src/common_messages.rs patched/czkawka_core/src/common_messages.rs
--- orig/czkawka_core/src/common_messages.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/common_messages.rs	2021-12-04 17:07:36.878961290 +0100
@@ -10,30 +10,37 @@
         Default::default()
     }
     pub fn print_messages(&self) {
+        println!("{}", self.create_messages_text());
+    }
+    pub fn create_messages_text(&self) -> String {
+        let mut text_to_return: String = "".to_string();
+
         if !self.messages.is_empty() {
-            println!("-------------------------------MESSAGES--------------------------------");
+            text_to_return += "-------------------------------MESSAGES--------------------------------\n";
             for i in &self.messages {
-                println!("{}", i);
+                text_to_return += format!("{}\n", i).as_str();
             }
-            println!("---------------------------END OF MESSAGES-----------------------------");
+            text_to_return += "---------------------------END OF MESSAGES-----------------------------\n";
         }
 
         if !self.warnings.is_empty() {
-            println!("-------------------------------WARNINGS--------------------------------");
+            text_to_return += "-------------------------------WARNINGS--------------------------------\n";
 
             for i in &self.warnings {
-                println!("{}", i);
+                text_to_return += format!("{}\n", i).as_str();
             }
-            println!("---------------------------END OF WARNINGS-----------------------------");
+            text_to_return += "---------------------------END OF WARNINGS-----------------------------\n";
         }
 
         if !self.errors.is_empty() {
-            println!("--------------------------------ERRORS---------------------------------");
+            text_to_return += "--------------------------------ERRORS---------------------------------\n";
 
             for i in &self.errors {
-                println!("{}", i);
+                text_to_return += format!("{}\n", i).as_str();
             }
-            println!("----------------------------END OF ERRORS------------------------------");
+            text_to_return += "----------------------------END OF ERRORS------------------------------\n";
         }
+
+        text_to_return
     }
 }
diff -Naur orig/czkawka_core/src/common.rs patched/czkawka_core/src/common.rs
--- orig/czkawka_core/src/common.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/common.rs	2021-12-04 17:07:36.878961290 +0100
@@ -6,6 +6,7 @@
 /// Class for common functions used across other class/functions
 
 pub struct Common();
+
 impl Common {
     /// Printing time which took between start and stop point and prints also function name
     #[allow(unused_variables)]
@@ -44,13 +45,9 @@
 
     /// Function to check if directory match expression
     pub fn regex_check(expression: &str, directory: impl AsRef<Path>) -> bool {
-        // if !expression.contains('*') {
-        //     #[cfg(debug_assertions)]
-        //     {
-        //         println!("Invalid expression Warning: Expression should have *,");
-        //     }
-        //     //return false;
-        // }
+        if expression == "*" {
+            return true;
+        }
 
         let temp_splits: Vec<&str> = expression.split('*').collect();
         let mut splits: Vec<&str> = Vec::new();
@@ -126,9 +123,10 @@
 
 #[cfg(test)]
 mod test {
-    use crate::common::Common;
     use std::path::PathBuf;
 
+    use crate::common::Common;
+
     #[test]
     fn test_regex() {
         assert!(Common::regex_check("*home*", "/home/rafal"));
@@ -156,6 +154,7 @@
             assert!(Common::regex_check("*/home", "C:\\home"));
         }
     }
+
     #[test]
     fn test_windows_path() {
         assert_eq!(PathBuf::from("C:\\path.txt"), Common::normalize_windows_path("c:/PATH.tXt"));
diff -Naur orig/czkawka_core/src/common_traits.rs patched/czkawka_core/src/common_traits.rs
--- orig/czkawka_core/src/common_traits.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/common_traits.rs	2021-12-04 17:07:36.878961290 +0100
@@ -1,9 +1,11 @@
 pub trait DebugPrint {
     fn debug_print(&self);
 }
+
 pub trait SaveResults {
     fn save_results_to_file(&mut self, file_name: &str) -> bool;
 }
+
 pub trait PrintResults {
     fn print_results(&self);
 }
diff -Naur orig/czkawka_core/src/duplicate.rs patched/czkawka_core/src/duplicate.rs
--- orig/czkawka_core/src/duplicate.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/duplicate.rs	2021-12-04 17:07:36.878961290 +0100
@@ -1,34 +1,31 @@
-use crossbeam_channel::Receiver;
-use humansize::{file_size_opts as options, FileSize};
 use std::collections::BTreeMap;
 #[cfg(target_family = "unix")]
 use std::collections::HashSet;
 use std::fs::{File, Metadata, OpenOptions};
+use std::hash::Hasher;
 use std::io::prelude::*;
 use std::io::{self, Error, ErrorKind};
+use std::io::{BufReader, BufWriter};
 #[cfg(target_family = "unix")]
 use std::os::unix::fs::MetadataExt;
 use std::path::{Path, PathBuf};
+use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
+use std::sync::Arc;
+use std::thread::sleep;
 use std::time::{Duration, SystemTime, UNIX_EPOCH};
 use std::{fs, mem, thread};
 
+use crossbeam_channel::Receiver;
+use directories_next::ProjectDirs;
+use humansize::{file_size_opts as options, FileSize};
+use rayon::prelude::*;
+
 use crate::common::Common;
 use crate::common_directory::Directories;
 use crate::common_extensions::Extensions;
 use crate::common_items::ExcludedItems;
 use crate::common_messages::Messages;
 use crate::common_traits::*;
-use directories_next::ProjectDirs;
-use rayon::prelude::*;
-use std::hash::Hasher;
-use std::io::{BufReader, BufWriter};
-use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
-use std::sync::Arc;
-use std::thread::sleep;
-
-const HASH_MB_LIMIT_BYTES: u64 = 1024 * 1024; // 1MB
-
-const CACHE_FILE_NAME: &str = "cache_duplicates.txt";
 
 #[derive(Debug)]
 pub struct ProgressData {
@@ -45,7 +42,6 @@
     Name,
     Size,
     Hash,
-    HashMb,
 }
 
 impl MyHasher for blake3::Hasher {
@@ -121,9 +117,6 @@
     pub number_of_duplicated_files_by_name: usize,
     pub lost_space_by_size: u64,
     pub lost_space_by_hash: u64,
-    pub bytes_read_when_hashing: u64,
-    pub number_of_removed_files: usize,
-    pub number_of_failed_to_remove_files: usize,
     pub gained_space: u64,
 }
 
@@ -153,7 +146,10 @@
     dryrun: bool,
     stopped_search: bool,
     use_cache: bool,
+    use_prehash_cache: bool,
     minimal_cache_file_size: u64,
+    minimal_prehash_cache_file_size: u64,
+    delete_outdated_cache: bool,
 }
 
 impl DuplicateFinder {
@@ -177,7 +173,10 @@
             hash_type: HashType::Blake3,
             dryrun: false,
             use_cache: true,
-            minimal_cache_file_size: 2 * 1024 * 1024, // By default cache only >= 1MB files
+            use_prehash_cache: true,
+            minimal_cache_file_size: 1024 * 1024 / 4, // By default cache only >= 256 KB files
+            minimal_prehash_cache_file_size: 0,
+            delete_outdated_cache: true,
         }
     }
 
@@ -197,7 +196,7 @@
                     return;
                 }
             }
-            CheckingMethod::HashMb | CheckingMethod::Hash => {
+            CheckingMethod::Hash => {
                 if !self.check_files_size(stop_receiver, progress_sender) {
                     self.stopped_search = true;
                     return;
@@ -215,6 +214,10 @@
         self.debug_print();
     }
 
+    pub fn set_delete_outdated_cache(&mut self, delete_outdated_cache: bool) {
+        self.delete_outdated_cache = delete_outdated_cache;
+    }
+
     pub const fn get_check_method(&self) -> &CheckingMethod {
         &self.check_method
     }
@@ -227,6 +230,10 @@
         self.minimal_cache_file_size = minimal_cache_file_size;
     }
 
+    pub fn set_minimal_prehash_cache_file_size(&mut self, minimal_prehash_cache_file_size: u64) {
+        self.minimal_prehash_cache_file_size = minimal_prehash_cache_file_size;
+    }
+
     pub const fn get_files_sorted_by_names(&self) -> &BTreeMap<String, Vec<FileEntry>> {
         &self.files_with_identical_names
     }
@@ -235,6 +242,10 @@
         self.use_cache = use_cache;
     }
 
+    pub fn set_use_prehash_cache(&mut self, use_prehash_cache: bool) {
+        self.use_prehash_cache = use_prehash_cache;
+    }
+
     pub const fn get_files_sorted_by_size(&self) -> &BTreeMap<u64, Vec<FileEntry>> {
         &self.files_with_identical_size
     }
@@ -494,7 +505,7 @@
             let checking_method = self.check_method.clone();
             let max_stage = match self.check_method {
                 CheckingMethod::Size => 0,
-                CheckingMethod::HashMb | CheckingMethod::Hash => 2,
+                CheckingMethod::Hash => 2,
                 _ => 255,
             };
             progress_thread_handle = thread::spawn(move || loop {
@@ -657,6 +668,8 @@
 
     /// The slowest checking type, which must be applied after checking for size
     fn check_files_hash(&mut self, stop_receiver: Option<&Receiver<()>>, progress_sender: Option<&futures::channel::mpsc::UnboundedSender<ProgressData>>) -> bool {
+        assert_eq!(self.check_method, CheckingMethod::Hash);
+
         let check_type = Arc::new(self.hash_type);
 
         let start_time: SystemTime = SystemTime::now();
@@ -697,57 +710,134 @@
 
         //// PROGRESS THREAD END
 
-        #[allow(clippy::type_complexity)]
-        let pre_hash_results: Vec<(u64, BTreeMap<String, Vec<FileEntry>>, Vec<String>, u64)> = self
-            .files_with_identical_size
-            .par_iter()
-            .map(|(size, vec_file_entry)| {
-                let mut hashmap_with_hash: BTreeMap<String, Vec<FileEntry>> = Default::default();
-                let mut errors: Vec<String> = Vec::new();
-                let mut bytes_read: u64 = 0;
-                let mut buffer = [0u8; 1024 * 2];
-
-                atomic_file_counter.fetch_add(vec_file_entry.len(), Ordering::Relaxed);
-                for file_entry in vec_file_entry {
-                    if stop_receiver.is_some() && stop_receiver.unwrap().try_recv().is_ok() {
-                        check_was_breaked.store(true, Ordering::Relaxed);
-                        return None;
-                    }
-                    match hash_calculation(&mut buffer, file_entry, &check_type, 0) {
-                        Ok((hash_string, bytes)) => {
-                            bytes_read += bytes;
-                            hashmap_with_hash.entry(hash_string.clone()).or_insert_with(Vec::new);
-                            hashmap_with_hash.get_mut(hash_string.as_str()).unwrap().push(file_entry.clone());
-                        }
-                        Err(s) => errors.push(s),
-                    }
-                }
-                Some((*size, hashmap_with_hash, errors, bytes_read))
-            })
-            .while_some()
-            .collect();
+        ///////////////////////////////////////////////////////////////////////////// PREHASHING START
+        {
+            let loaded_hash_map;
+            let mut records_already_cached: BTreeMap<u64, Vec<FileEntry>> = Default::default();
+            let mut non_cached_files_to_check: BTreeMap<u64, Vec<FileEntry>> = Default::default();
+
+            // Cache algorithm
+            // - Load data from cache
+            // - Convert from BT<u64,Vec<FileEntry>> to BT<String,FileEntry>
+            // - Save to proper values
+            if self.use_prehash_cache {
+                loaded_hash_map = match load_hashes_from_file(&mut self.text_messages, self.delete_outdated_cache, &self.hash_type, true) {
+                    Some(t) => t,
+                    None => Default::default(),
+                };
 
-        // End thread which send info to gui
-        progress_thread_run.store(false, Ordering::Relaxed);
-        progress_thread_handle.join().unwrap();
+                let mut loaded_hash_map2: BTreeMap<String, FileEntry> = Default::default();
+                for vec_file_entry in loaded_hash_map.values() {
+                    for file_entry in vec_file_entry {
+                        loaded_hash_map2.insert(file_entry.path.to_string_lossy().to_string(), file_entry.clone());
+                    }
+                }
 
-        // Check if user aborted search(only from GUI)
-        if check_was_breaked.load(Ordering::Relaxed) {
-            return false;
-        }
+                #[allow(clippy::if_same_then_else)]
+                for vec_file_entry in self.files_with_identical_size.values() {
+                    for file_entry in vec_file_entry {
+                        let name = file_entry.path.to_string_lossy().to_string();
+                        if !loaded_hash_map2.contains_key(&name) {
+                            // If loaded data doesn't contains current image info
+                            non_cached_files_to_check.entry(file_entry.size).or_insert_with(Vec::new);
+                            non_cached_files_to_check.get_mut(&file_entry.size).unwrap().push(file_entry.clone());
+                        } else if file_entry.size != loaded_hash_map2.get(&name).unwrap().size || file_entry.modified_date != loaded_hash_map2.get(&name).unwrap().modified_date {
+                            // When size or modification date of image changed, then it is clear that is different image
+                            non_cached_files_to_check.entry(file_entry.size).or_insert_with(Vec::new);
+                            non_cached_files_to_check.get_mut(&file_entry.size).unwrap().push(file_entry.clone());
+                        } else {
+                            // Checking may be omitted when already there is entry with same size and modification date
+                            records_already_cached.entry(file_entry.size).or_insert_with(Vec::new);
+                            records_already_cached.get_mut(&file_entry.size).unwrap().push(file_entry.clone());
+                        }
+                    }
+                }
+            } else {
+                loaded_hash_map = Default::default();
+                mem::swap(&mut self.files_with_identical_size, &mut non_cached_files_to_check);
+            }
+
+            #[allow(clippy::type_complexity)]
+            let pre_hash_results: Vec<(u64, BTreeMap<String, Vec<FileEntry>>, Vec<String>)> = non_cached_files_to_check
+                .par_iter()
+                .map(|(size, vec_file_entry)| {
+                    let mut hashmap_with_hash: BTreeMap<String, Vec<FileEntry>> = Default::default();
+                    let mut errors: Vec<String> = Vec::new();
+                    let mut buffer = [0u8; 1024 * 2];
+
+                    atomic_file_counter.fetch_add(vec_file_entry.len(), Ordering::Relaxed);
+                    for file_entry in vec_file_entry {
+                        if stop_receiver.is_some() && stop_receiver.unwrap().try_recv().is_ok() {
+                            check_was_breaked.store(true, Ordering::Relaxed);
+                            return None;
+                        }
+                        match hash_calculation(&mut buffer, file_entry, &check_type, 0) {
+                            Ok(hash_string) => {
+                                hashmap_with_hash.entry(hash_string.clone()).or_insert_with(Vec::new);
+                                hashmap_with_hash.get_mut(hash_string.as_str()).unwrap().push(file_entry.clone());
+                            }
+                            Err(s) => errors.push(s),
+                        }
+                    }
+                    Some((*size, hashmap_with_hash, errors))
+                })
+                .while_some()
+                .collect();
+
+            // End thread which send info to gui
+            progress_thread_run.store(false, Ordering::Relaxed);
+            progress_thread_handle.join().unwrap();
+
+            // Check if user aborted search(only from GUI)
+            if check_was_breaked.load(Ordering::Relaxed) {
+                return false;
+            }
 
-        // Check results
-        for (size, hash_map, mut errors, bytes_read) in pre_hash_results {
-            self.information.bytes_read_when_hashing += bytes_read;
-            self.text_messages.warnings.append(&mut errors);
-            for (_hash, mut vec_file_entry) in hash_map {
-                if vec_file_entry.len() > 1 {
-                    pre_checked_map.entry(size).or_insert_with(Vec::new);
-                    pre_checked_map.get_mut(&size).unwrap().append(&mut vec_file_entry);
+            // Add data from cache
+            for (size, vec_file_entry) in &records_already_cached {
+                pre_checked_map.entry(*size).or_insert_with(Vec::new);
+                pre_checked_map.get_mut(size).unwrap().append(&mut vec_file_entry.clone());
+            }
+
+            // Check results
+            for (size, hash_map, errors) in &pre_hash_results {
+                self.text_messages.warnings.append(&mut errors.clone());
+                for vec_file_entry in hash_map.values() {
+                    if vec_file_entry.len() > 1 {
+                        pre_checked_map.entry(*size).or_insert_with(Vec::new);
+                        pre_checked_map.get_mut(size).unwrap().append(&mut vec_file_entry.clone());
+                    }
                 }
             }
+
+            if self.use_prehash_cache {
+                // All results = records already cached + computed results
+                let mut save_cache_to_hashmap: BTreeMap<String, FileEntry> = Default::default();
+
+                for (size, vec_file_entry) in loaded_hash_map {
+                    if size >= self.minimal_prehash_cache_file_size {
+                        for file_entry in vec_file_entry {
+                            save_cache_to_hashmap.insert(file_entry.path.to_string_lossy().to_string(), file_entry.clone());
+                        }
+                    }
+                }
+
+                for (size, hash_map, _errors) in &pre_hash_results {
+                    if *size >= self.minimal_prehash_cache_file_size {
+                        for vec_file_entry in hash_map.values() {
+                            for file_entry in vec_file_entry {
+                                save_cache_to_hashmap.insert(file_entry.path.to_string_lossy().to_string(), file_entry.clone());
+                            }
+                        }
+                    }
+                }
+
+                save_hashes_to_file(&save_cache_to_hashmap, &mut self.text_messages, &self.hash_type, true, self.minimal_prehash_cache_file_size);
+            }
         }
 
+        ///////////////////////////////////////////////////////////////////////////// PREHASHING END
+
         Common::print_time(start_time, SystemTime::now(), "check_files_hash - prehash".to_string());
         let start_time: SystemTime = SystemTime::now();
 
@@ -764,7 +854,7 @@
             let progress_send = progress_sender.clone();
             let progress_thread_run = progress_thread_run.clone();
             let atomic_file_counter = atomic_file_counter.clone();
-            let files_to_check = pre_checked_map.iter().map(|e| e.1.len()).sum();
+            let files_to_check = pre_checked_map.iter().map(|(_size, vec_file_entry)| vec_file_entry.len()).sum();
             let checking_method = self.check_method.clone();
             progress_thread_handle = thread::spawn(move || loop {
                 progress_send
@@ -787,184 +877,152 @@
 
         //// PROGRESS THREAD END
 
-        #[allow(clippy::type_complexity)]
-        let mut full_hash_results: Vec<(u64, BTreeMap<String, Vec<FileEntry>>, Vec<String>, u64)>;
+        ///////////////////////////////////////////////////////////////////////////// HASHING START
+        {
+            #[allow(clippy::type_complexity)]
+            let mut full_hash_results: Vec<(u64, BTreeMap<String, Vec<FileEntry>>, Vec<String>)>;
 
-        match self.check_method {
-            CheckingMethod::HashMb => {
-                full_hash_results = pre_checked_map
-                    .par_iter()
-                    .map(|(size, vec_file_entry)| {
-                        let mut hashmap_with_hash: BTreeMap<String, Vec<FileEntry>> = Default::default();
-                        let mut errors: Vec<String> = Vec::new();
-                        let mut bytes_read: u64 = 0;
-                        let mut buffer = [0u8; 1024 * 128];
-                        atomic_file_counter.fetch_add(vec_file_entry.len(), Ordering::Relaxed);
-                        for file_entry in vec_file_entry {
-                            if stop_receiver.is_some() && stop_receiver.unwrap().try_recv().is_ok() {
-                                check_was_breaked.store(true, Ordering::Relaxed);
-                                return None;
-                            }
+            let loaded_hash_map;
 
-                            match hash_calculation(&mut buffer, file_entry, &check_type, HASH_MB_LIMIT_BYTES) {
-                                Ok((hash_string, bytes)) => {
-                                    bytes_read += bytes;
-                                    hashmap_with_hash.entry(hash_string.to_string()).or_insert_with(Vec::new);
-                                    hashmap_with_hash.get_mut(hash_string.as_str()).unwrap().push(file_entry.to_owned());
-                                }
-                                Err(s) => errors.push(s),
-                            }
-                        }
-                        Some((*size, hashmap_with_hash, errors, bytes_read))
-                    })
-                    .while_some()
-                    .collect();
-            }
-            CheckingMethod::Hash => {
-                let loaded_hash_map;
+            let mut records_already_cached: BTreeMap<u64, Vec<FileEntry>> = Default::default();
+            let mut non_cached_files_to_check: BTreeMap<u64, Vec<FileEntry>> = Default::default();
 
-                let mut records_already_cached: BTreeMap<u64, Vec<FileEntry>> = Default::default();
-                let mut non_cached_files_to_check: BTreeMap<u64, Vec<FileEntry>> = Default::default();
+            if self.use_cache {
+                loaded_hash_map = match load_hashes_from_file(&mut self.text_messages, self.delete_outdated_cache, &self.hash_type, false) {
+                    Some(t) => t,
+                    None => Default::default(),
+                };
 
-                if self.use_cache {
-                    loaded_hash_map = match load_hashes_from_file(&mut self.text_messages, &self.hash_type) {
-                        Some(t) => t,
-                        None => Default::default(),
-                    };
-
-                    for (size, vec_file_entry) in pre_checked_map {
-                        #[allow(clippy::collapsible_if)]
-                        if !loaded_hash_map.contains_key(&size) {
-                            // If loaded data doesn't contains current info
-                            non_cached_files_to_check.insert(size, vec_file_entry);
-                        } else {
-                            let loaded_vec_file_entry = loaded_hash_map.get(&size).unwrap();
+                for (size, vec_file_entry) in pre_checked_map {
+                    #[allow(clippy::collapsible_if)]
+                    if !loaded_hash_map.contains_key(&size) {
+                        // If loaded data doesn't contains current info
+                        non_cached_files_to_check.insert(size, vec_file_entry);
+                    } else {
+                        let loaded_vec_file_entry = loaded_hash_map.get(&size).unwrap();
 
-                            for file_entry in vec_file_entry {
-                                let mut found: bool = false;
-                                for loaded_file_entry in loaded_vec_file_entry {
-                                    if file_entry.path == loaded_file_entry.path && file_entry.modified_date == loaded_file_entry.modified_date {
-                                        records_already_cached.entry(file_entry.size).or_insert_with(Vec::new);
-                                        records_already_cached.get_mut(&file_entry.size).unwrap().push(loaded_file_entry.clone());
-                                        found = true;
-                                        break;
-                                    }
+                        for file_entry in vec_file_entry {
+                            let mut found: bool = false;
+                            for loaded_file_entry in loaded_vec_file_entry {
+                                if file_entry.path == loaded_file_entry.path && file_entry.modified_date == loaded_file_entry.modified_date {
+                                    records_already_cached.entry(file_entry.size).or_insert_with(Vec::new);
+                                    records_already_cached.get_mut(&file_entry.size).unwrap().push(loaded_file_entry.clone());
+                                    found = true;
+                                    break;
                                 }
+                            }
 
-                                if !found {
-                                    non_cached_files_to_check.entry(file_entry.size).or_insert_with(Vec::new);
-                                    non_cached_files_to_check.get_mut(&file_entry.size).unwrap().push(file_entry);
-                                }
+                            if !found {
+                                non_cached_files_to_check.entry(file_entry.size).or_insert_with(Vec::new);
+                                non_cached_files_to_check.get_mut(&file_entry.size).unwrap().push(file_entry);
                             }
                         }
                     }
-                } else {
-                    loaded_hash_map = Default::default();
-                    mem::swap(&mut pre_checked_map, &mut non_cached_files_to_check);
                 }
+            } else {
+                loaded_hash_map = Default::default();
+                mem::swap(&mut pre_checked_map, &mut non_cached_files_to_check);
+            }
 
-                full_hash_results = non_cached_files_to_check
-                    .par_iter()
-                    .map(|(size, vec_file_entry)| {
-                        let mut hashmap_with_hash: BTreeMap<String, Vec<FileEntry>> = Default::default();
-                        let mut errors: Vec<String> = Vec::new();
-                        let mut bytes_read: u64 = 0;
-                        let mut buffer = [0u8; 1024 * 128];
-
-                        atomic_file_counter.fetch_add(vec_file_entry.len(), Ordering::Relaxed);
-                        for file_entry in vec_file_entry {
-                            if stop_receiver.is_some() && stop_receiver.unwrap().try_recv().is_ok() {
-                                check_was_breaked.store(true, Ordering::Relaxed);
-                                return None;
-                            }
-
-                            match hash_calculation(&mut buffer, file_entry, &check_type, u64::MAX) {
-                                Ok((hash_string, bytes)) => {
-                                    bytes_read += bytes;
-                                    let mut file_entry = file_entry.clone();
-                                    file_entry.hash = hash_string.clone();
-                                    hashmap_with_hash.entry(hash_string.clone()).or_insert_with(Vec::new);
-                                    hashmap_with_hash.get_mut(hash_string.as_str()).unwrap().push(file_entry);
-                                }
-                                Err(s) => errors.push(s),
-                            }
+            full_hash_results = non_cached_files_to_check
+                .par_iter()
+                .map(|(size, vec_file_entry)| {
+                    let mut hashmap_with_hash: BTreeMap<String, Vec<FileEntry>> = Default::default();
+                    let mut errors: Vec<String> = Vec::new();
+                    let mut buffer = [0u8; 1024 * 128];
+
+                    atomic_file_counter.fetch_add(vec_file_entry.len(), Ordering::Relaxed);
+                    for file_entry in vec_file_entry {
+                        if stop_receiver.is_some() && stop_receiver.unwrap().try_recv().is_ok() {
+                            check_was_breaked.store(true, Ordering::Relaxed);
+                            return None;
                         }
-                        Some((*size, hashmap_with_hash, errors, bytes_read))
-                    })
-                    .while_some()
-                    .collect();
 
-                if self.use_cache {
-                    'main: for (size, vec_file_entry) in records_already_cached {
-                        // Check if size already exists, if exists we must to change it outside because cannot have mut and non mut reference to full_hash_results
-                        for (full_size, full_hashmap, _errors, _bytes_read) in &mut full_hash_results {
-                            if size == *full_size {
-                                for file_entry in vec_file_entry {
-                                    full_hashmap.entry(file_entry.hash.clone()).or_insert_with(Vec::new);
-                                    full_hashmap.get_mut(&file_entry.hash).unwrap().push(file_entry);
-                                }
-                                continue 'main;
+                        match hash_calculation(&mut buffer, file_entry, &check_type, u64::MAX) {
+                            Ok(hash_string) => {
+                                let mut file_entry = file_entry.clone();
+                                file_entry.hash = hash_string.clone();
+                                hashmap_with_hash.entry(hash_string.clone()).or_insert_with(Vec::new);
+                                hashmap_with_hash.get_mut(hash_string.as_str()).unwrap().push(file_entry);
                             }
+                            Err(s) => errors.push(s),
                         }
-                        // Size doesn't exists add results to files
-                        let mut temp_hashmap: BTreeMap<String, Vec<FileEntry>> = Default::default();
-                        for file_entry in vec_file_entry {
-                            temp_hashmap.entry(file_entry.hash.clone()).or_insert_with(Vec::new);
-                            temp_hashmap.get_mut(&file_entry.hash).unwrap().push(file_entry);
+                    }
+                    Some((*size, hashmap_with_hash, errors))
+                })
+                .while_some()
+                .collect();
+
+            if self.use_cache {
+                'main: for (size, vec_file_entry) in records_already_cached {
+                    // Check if size already exists, if exists we must to change it outside because cannot have mut and non mut reference to full_hash_results
+                    for (full_size, full_hashmap, _errors) in &mut full_hash_results {
+                        if size == *full_size {
+                            for file_entry in vec_file_entry {
+                                full_hashmap.entry(file_entry.hash.clone()).or_insert_with(Vec::new);
+                                full_hashmap.get_mut(&file_entry.hash).unwrap().push(file_entry);
+                            }
+                            continue 'main;
                         }
-                        full_hash_results.push((size, temp_hashmap, Vec::new(), 0));
                     }
+                    // Size doesn't exists add results to files
+                    let mut temp_hashmap: BTreeMap<String, Vec<FileEntry>> = Default::default();
+                    for file_entry in vec_file_entry {
+                        temp_hashmap.entry(file_entry.hash.clone()).or_insert_with(Vec::new);
+                        temp_hashmap.get_mut(&file_entry.hash).unwrap().push(file_entry);
+                    }
+                    full_hash_results.push((size, temp_hashmap, Vec::new()));
+                }
 
-                    // Must save all results to file, old loaded from file with all currently counted results
-                    let mut all_results: BTreeMap<String, FileEntry> = Default::default();
-                    for (_size, vec_file_entry) in loaded_hash_map {
-                        for file_entry in vec_file_entry {
-                            all_results.insert(file_entry.path.to_string_lossy().to_string(), file_entry);
-                        }
+                // Must save all results to file, old loaded from file with all currently counted results
+                let mut all_results: BTreeMap<String, FileEntry> = Default::default();
+                for (_size, vec_file_entry) in loaded_hash_map {
+                    for file_entry in vec_file_entry {
+                        all_results.insert(file_entry.path.to_string_lossy().to_string(), file_entry);
                     }
-                    for (_size, hashmap, _errors, _bytes_read) in &full_hash_results {
-                        for vec_file_entry in hashmap.values() {
-                            for file_entry in vec_file_entry {
-                                all_results.insert(file_entry.path.to_string_lossy().to_string(), file_entry.clone());
-                            }
+                }
+                for (_size, hashmap, _errors) in &full_hash_results {
+                    for vec_file_entry in hashmap.values() {
+                        for file_entry in vec_file_entry {
+                            all_results.insert(file_entry.path.to_string_lossy().to_string(), file_entry.clone());
                         }
                     }
-                    save_hashes_to_file(&all_results, &mut self.text_messages, &self.hash_type, self.minimal_cache_file_size);
                 }
+                save_hashes_to_file(&all_results, &mut self.text_messages, &self.hash_type, false, self.minimal_cache_file_size);
             }
-            _ => panic!("What"),
-        }
 
-        // End thread which send info to gui
-        progress_thread_run.store(false, Ordering::Relaxed);
-        progress_thread_handle.join().unwrap();
+            // End thread which send info to gui
+            progress_thread_run.store(false, Ordering::Relaxed);
+            progress_thread_handle.join().unwrap();
 
-        // Check if user aborted search(only from GUI)
-        if check_was_breaked.load(Ordering::Relaxed) {
-            return false;
-        }
+            // Check if user aborted search(only from GUI)
+            if check_was_breaked.load(Ordering::Relaxed) {
+                return false;
+            }
 
-        for (size, hash_map, mut errors, bytes_read) in full_hash_results {
-            self.information.bytes_read_when_hashing += bytes_read;
-            self.text_messages.warnings.append(&mut errors);
-            for (_hash, vec_file_entry) in hash_map {
-                if vec_file_entry.len() > 1 {
-                    self.files_with_identical_hashes.entry(size).or_insert_with(Vec::new);
-                    self.files_with_identical_hashes.get_mut(&size).unwrap().push(vec_file_entry);
+            for (size, hash_map, mut errors) in full_hash_results {
+                self.text_messages.warnings.append(&mut errors);
+                for (_hash, vec_file_entry) in hash_map {
+                    if vec_file_entry.len() > 1 {
+                        self.files_with_identical_hashes.entry(size).or_insert_with(Vec::new);
+                        self.files_with_identical_hashes.get_mut(&size).unwrap().push(vec_file_entry);
+                    }
                 }
             }
-        }
 
-        /////////////////////////
+            /////////////////////////
 
-        for (size, vector_vectors) in &self.files_with_identical_hashes {
-            for vector in vector_vectors {
-                self.information.number_of_duplicated_files_by_hash += vector.len() - 1;
-                self.information.number_of_groups_by_hash += 1;
-                self.information.lost_space_by_hash += (vector.len() as u64 - 1) * size;
+            for (size, vector_vectors) in &self.files_with_identical_hashes {
+                for vector in vector_vectors {
+                    self.information.number_of_duplicated_files_by_hash += vector.len() - 1;
+                    self.information.number_of_groups_by_hash += 1;
+                    self.information.lost_space_by_hash += (vector.len() as u64 - 1) * size;
+                }
             }
         }
 
+        ///////////////////////////////////////////////////////////////////////////// HASHING END
+
         Common::print_time(start_time, SystemTime::now(), "check_files_hash - full hash".to_string());
 
         // Clean unused data
@@ -986,17 +1044,13 @@
                 for vector in self.files_with_identical_names.values() {
                     let tuple: (u64, usize, usize) = delete_files(vector, &self.delete_method, &mut self.text_messages, self.dryrun);
                     self.information.gained_space += tuple.0;
-                    self.information.number_of_removed_files += tuple.1;
-                    self.information.number_of_failed_to_remove_files += tuple.2;
                 }
             }
-            CheckingMethod::Hash | CheckingMethod::HashMb => {
+            CheckingMethod::Hash => {
                 for vector_vectors in self.files_with_identical_hashes.values() {
                     for vector in vector_vectors.iter() {
                         let tuple: (u64, usize, usize) = delete_files(vector, &self.delete_method, &mut self.text_messages, self.dryrun);
                         self.information.gained_space += tuple.0;
-                        self.information.number_of_removed_files += tuple.1;
-                        self.information.number_of_failed_to_remove_files += tuple.2;
                     }
                 }
             }
@@ -1004,8 +1058,6 @@
                 for vector in self.files_with_identical_size.values() {
                     let tuple: (u64, usize, usize) = delete_files(vector, &self.delete_method, &mut self.text_messages, self.dryrun);
                     self.information.gained_space += tuple.0;
-                    self.information.number_of_removed_files += tuple.1;
-                    self.information.number_of_failed_to_remove_files += tuple.2;
                 }
             }
             CheckingMethod::None => {
@@ -1017,6 +1069,7 @@
         Common::print_time(start_time, SystemTime::now(), "delete_files".to_string());
     }
 }
+
 impl Default for DuplicateFinder {
     fn default() -> Self {
         Self::new()
@@ -1057,13 +1110,6 @@
             self.information.gained_space.file_size(options::BINARY).unwrap(),
             self.information.gained_space
         );
-        println!(
-            "Bytes read when hashing - {} ({} bytes)",
-            self.information.bytes_read_when_hashing.file_size(options::BINARY).unwrap(),
-            self.information.bytes_read_when_hashing
-        );
-        println!("Number of removed files - {}", self.information.number_of_removed_files);
-        println!("Number of failed to remove files - {}", self.information.number_of_failed_to_remove_files);
 
         println!("### Other");
 
@@ -1073,13 +1119,14 @@
         println!("Excluded items - {:?}", self.excluded_items.items);
         println!("Included directories - {:?}", self.directories.included_directories);
         println!("Excluded directories - {:?}", self.directories.excluded_directories);
-        println!("Recursive search - {}", self.recursive_search.to_string());
+        println!("Recursive search - {}", self.recursive_search);
         println!("Minimum file size - {:?}", self.minimal_file_size);
         println!("Checking Method - {:?}", self.check_method);
         println!("Delete Method - {:?}", self.delete_method);
         println!("-----------------------------------------");
     }
 }
+
 impl SaveResults for DuplicateFinder {
     fn save_results_to_file(&mut self, file_name: &str) -> bool {
         let start_time: SystemTime = SystemTime::now();
@@ -1147,7 +1194,7 @@
                     write!(writer, "Not found any duplicates.").unwrap();
                 }
             }
-            CheckingMethod::Hash | CheckingMethod::HashMb => {
+            CheckingMethod::Hash => {
                 if !self.files_with_identical_hashes.is_empty() {
                     writeln!(writer, "-------------------------------------------------Files with same hashes-------------------------------------------------").unwrap();
                     writeln!(
@@ -1178,6 +1225,7 @@
         true
     }
 }
+
 impl PrintResults for DuplicateFinder {
     /// Print information's about duplicated entries
     /// Only needed for CLI
@@ -1201,7 +1249,7 @@
                     println!();
                 }
             }
-            CheckingMethod::Hash | CheckingMethod::HashMb => {
+            CheckingMethod::Hash => {
                 for (_size, vector) in self.files_with_identical_hashes.iter() {
                     for j in vector {
                         number_of_files += j.len() as u64;
@@ -1346,7 +1394,7 @@
     result
 }
 
-fn save_hashes_to_file(hashmap: &BTreeMap<String, FileEntry>, text_messages: &mut Messages, type_of_hash: &HashType, minimal_cache_file_size: u64) {
+pub fn save_hashes_to_file(hashmap: &BTreeMap<String, FileEntry>, text_messages: &mut Messages, type_of_hash: &HashType, is_prehash: bool, minimal_cache_file_size: u64) {
     if let Some(proj_dirs) = ProjectDirs::from("pl", "Qarmin", "Czkawka") {
         let cache_dir = PathBuf::from(proj_dirs.cache_dir());
         if cache_dir.exists() {
@@ -1358,7 +1406,7 @@
             text_messages.messages.push(format!("Cannot create config dir {}, reason {}", cache_dir.display(), e));
             return;
         }
-        let cache_file = cache_dir.join(CACHE_FILE_NAME.replace(".", format!("_{:?}.", type_of_hash).as_str()));
+        let cache_file = cache_dir.join(get_file_hash_name(type_of_hash, is_prehash).as_str());
         let file_handler = match OpenOptions::new().truncate(true).write(true).create(true).open(&cache_file) {
             Ok(t) => t,
             Err(e) => {
@@ -1387,7 +1435,7 @@
     fn finalize(&self) -> String;
 }
 
-fn hash_calculation(buffer: &mut [u8], file_entry: &FileEntry, hash_type: &HashType, limit: u64) -> Result<(String, u64), String> {
+fn hash_calculation(buffer: &mut [u8], file_entry: &FileEntry, hash_type: &HashType, limit: u64) -> Result<String, String> {
     let mut file_handler = match File::open(&file_entry.path) {
         Ok(t) => t,
         Err(e) => return Err(format!("Unable to check hash of file {}, reason {}", file_entry.path.display(), e)),
@@ -1408,17 +1456,21 @@
             break;
         }
     }
-    Ok((hasher.finalize(), current_file_read_bytes))
+    Ok(hasher.finalize())
+}
+
+fn get_file_hash_name(type_of_hash: &HashType, is_prehash: bool) -> String {
+    let prehash_str = if is_prehash { "_prehash" } else { "" };
+    format!("cache_duplicates_{:?}{}.txt", type_of_hash, prehash_str)
 }
 
-fn load_hashes_from_file(text_messages: &mut Messages, type_of_hash: &HashType) -> Option<BTreeMap<u64, Vec<FileEntry>>> {
+pub fn load_hashes_from_file(text_messages: &mut Messages, delete_outdated_cache: bool, type_of_hash: &HashType, is_prehash: bool) -> Option<BTreeMap<u64, Vec<FileEntry>>> {
     if let Some(proj_dirs) = ProjectDirs::from("pl", "Qarmin", "Czkawka") {
         let cache_dir = PathBuf::from(proj_dirs.cache_dir());
-        let cache_file = cache_dir.join(CACHE_FILE_NAME.replace(".", format!("_{:?}.", type_of_hash).as_str()));
+        let cache_file = cache_dir.join(get_file_hash_name(type_of_hash, is_prehash).as_str());
         let file_handler = match OpenOptions::new().read(true).open(&cache_file) {
             Ok(t) => t,
             Err(_inspected) => {
-                // text_messages.messages.push(format!("Cannot find or open cache file {}", cache_file.display())); // This shouldn't be write to output
                 return None;
             }
         };
@@ -1444,7 +1496,7 @@
                 continue;
             }
             // Don't load cache data if destination file not exists
-            if Path::new(uuu[0]).exists() {
+            if !delete_outdated_cache || Path::new(uuu[0]).exists() {
                 let file_entry = FileEntry {
                     path: PathBuf::from(uuu[0]),
                     size: match uuu[1].parse::<u64>() {
@@ -1481,7 +1533,6 @@
 
 #[cfg(test)]
 mod tests {
-    use super::*;
     use std::fs::{read_dir, File};
     use std::io;
     #[cfg(target_family = "windows")]
@@ -1489,10 +1540,13 @@
     #[cfg(target_family = "unix")]
     use std::os::unix::fs::MetadataExt;
 
+    use super::*;
+
     #[cfg(target_family = "unix")]
     fn assert_inode(before: &Metadata, after: &Metadata) {
         assert_eq!(before.ino(), after.ino());
     }
+
     #[cfg(target_family = "windows")]
     fn assert_inode(_: &Metadata, _: &Metadata) {}
 
@@ -1578,8 +1632,7 @@
         file.write_all(b"aa")?;
         let e = FileEntry { path: src, ..Default::default() };
         let r = hash_calculation(&mut buf, &e, &HashType::Blake3, 0).unwrap();
-        assert_eq!(2, r.1);
-        assert!(!r.0.is_empty());
+        assert!(!r.is_empty());
         Ok(())
     }
 
diff -Naur orig/czkawka_core/src/empty_files.rs patched/czkawka_core/src/empty_files.rs
--- orig/czkawka_core/src/empty_files.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/empty_files.rs	2021-12-04 17:07:36.878961290 +0100
@@ -1,20 +1,21 @@
 use std::fs::{File, Metadata};
 use std::io::prelude::*;
+use std::io::BufWriter;
 use std::path::PathBuf;
+use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
+use std::sync::Arc;
+use std::thread::sleep;
 use std::time::{Duration, SystemTime, UNIX_EPOCH};
 use std::{fs, thread};
 
+use crossbeam_channel::Receiver;
+
 use crate::common::Common;
 use crate::common_directory::Directories;
 use crate::common_extensions::Extensions;
 use crate::common_items::ExcludedItems;
 use crate::common_messages::Messages;
 use crate::common_traits::*;
-use crossbeam_channel::Receiver;
-use std::io::BufWriter;
-use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
-use std::sync::Arc;
-use std::thread::sleep;
 
 #[derive(Debug)]
 pub struct ProgressData {
@@ -42,6 +43,7 @@
     pub number_of_removed_files: usize,
     pub number_of_failed_to_remove_files: usize,
 }
+
 impl Info {
     pub fn new() -> Self {
         Default::default()
@@ -289,6 +291,7 @@
         Common::print_time(start_time, SystemTime::now(), "delete_files".to_string());
     }
 }
+
 impl Default for EmptyFiles {
     fn default() -> Self {
         Self::new()
@@ -320,11 +323,12 @@
         println!("Excluded items - {:?}", self.excluded_items.items);
         println!("Included directories - {:?}", self.directories.included_directories);
         println!("Excluded directories - {:?}", self.directories.excluded_directories);
-        println!("Recursive search - {}", self.recursive_search.to_string());
+        println!("Recursive search - {}", self.recursive_search);
         println!("Delete Method - {:?}", self.delete_method);
         println!("-----------------------------------------");
     }
 }
+
 impl SaveResults for EmptyFiles {
     fn save_results_to_file(&mut self, file_name: &str) -> bool {
         let start_time: SystemTime = SystemTime::now();
@@ -363,6 +367,7 @@
         true
     }
 }
+
 impl PrintResults for EmptyFiles {
     /// Print information's about duplicated entries
     /// Only needed for CLI
diff -Naur orig/czkawka_core/src/empty_folder.rs patched/czkawka_core/src/empty_folder.rs
--- orig/czkawka_core/src/empty_folder.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/empty_folder.rs	2021-12-04 17:07:36.878961290 +0100
@@ -1,9 +1,3 @@
-use crate::common::Common;
-use crate::common_directory::Directories;
-use crate::common_items::ExcludedItems;
-use crate::common_messages::Messages;
-use crate::common_traits::{DebugPrint, PrintResults, SaveResults};
-use crossbeam_channel::Receiver;
 use std::collections::BTreeMap;
 use std::fs::{File, Metadata};
 use std::io::{BufWriter, Write};
@@ -14,6 +8,14 @@
 use std::time::{Duration, SystemTime, UNIX_EPOCH};
 use std::{fs, thread};
 
+use crossbeam_channel::Receiver;
+
+use crate::common::Common;
+use crate::common_directory::Directories;
+use crate::common_items::ExcludedItems;
+use crate::common_messages::Messages;
+use crate::common_traits::{DebugPrint, PrintResults, SaveResults};
+
 #[derive(Debug)]
 pub struct ProgressData {
     pub current_stage: u8,
@@ -53,6 +55,7 @@
 pub struct Info {
     pub number_of_empty_folders: usize,
 }
+
 impl Info {
     pub fn new() -> Self {
         Default::default()
@@ -323,6 +326,7 @@
         println!("-----------------------------------------");
     }
 }
+
 impl SaveResults for EmptyFolder {
     fn save_results_to_file(&mut self, file_name: &str) -> bool {
         let start_time: SystemTime = SystemTime::now();
@@ -358,8 +362,8 @@
         true
     }
 }
+
 impl PrintResults for EmptyFolder {
-    /// Prints basic info about empty folders // TODO print better
     fn print_results(&self) {
         if !self.empty_folder_list.is_empty() {
             println!("Found {} empty folders", self.empty_folder_list.len());
diff -Naur orig/czkawka_core/src/invalid_symlinks.rs patched/czkawka_core/src/invalid_symlinks.rs
--- orig/czkawka_core/src/invalid_symlinks.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/invalid_symlinks.rs	2021-12-04 17:07:36.878961290 +0100
@@ -1,20 +1,21 @@
 use std::fs::{File, Metadata};
 use std::io::prelude::*;
+use std::io::BufWriter;
 use std::path::PathBuf;
+use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
+use std::sync::Arc;
+use std::thread::sleep;
 use std::time::{Duration, SystemTime, UNIX_EPOCH};
 use std::{fs, thread};
 
+use crossbeam_channel::Receiver;
+
 use crate::common::Common;
 use crate::common_directory::Directories;
 use crate::common_extensions::Extensions;
 use crate::common_items::ExcludedItems;
 use crate::common_messages::Messages;
 use crate::common_traits::*;
-use crossbeam_channel::Receiver;
-use std::io::BufWriter;
-use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
-use std::sync::Arc;
-use std::thread::sleep;
 
 #[derive(Debug)]
 pub struct ProgressData {
@@ -52,6 +53,7 @@
     pub number_of_removed_files: usize,
     pub number_of_failed_to_remove_files: usize,
 }
+
 impl Info {
     pub fn new() -> Self {
         Default::default()
@@ -336,6 +338,7 @@
         Common::print_time(start_time, SystemTime::now(), "delete_files".to_string());
     }
 }
+
 impl Default for InvalidSymlinks {
     fn default() -> Self {
         Self::new()
@@ -367,11 +370,12 @@
         println!("Excluded items - {:?}", self.excluded_items.items);
         println!("Included directories - {:?}", self.directories.included_directories);
         println!("Excluded directories - {:?}", self.directories.excluded_directories);
-        println!("Recursive search - {}", self.recursive_search.to_string());
+        println!("Recursive search - {}", self.recursive_search);
         println!("Delete Method - {:?}", self.delete_method);
         println!("-----------------------------------------");
     }
 }
+
 impl SaveResults for InvalidSymlinks {
     fn save_results_to_file(&mut self, file_name: &str) -> bool {
         let start_time: SystemTime = SystemTime::now();
@@ -420,6 +424,7 @@
         true
     }
 }
+
 impl PrintResults for InvalidSymlinks {
     /// Print information's about duplicated entries
     /// Only needed for CLI
diff -Naur orig/czkawka_core/src/lib.rs patched/czkawka_core/src/lib.rs
--- orig/czkawka_core/src/lib.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/lib.rs	2021-12-04 17:07:36.878961290 +0100
@@ -9,8 +9,8 @@
 pub mod invalid_symlinks;
 pub mod same_music;
 pub mod similar_images;
+pub mod similar_videos;
 pub mod temporary;
-pub mod zeroed;
 
 pub mod common;
 pub mod common_directory;
diff -Naur orig/czkawka_core/src/same_music.rs patched/czkawka_core/src/same_music.rs
--- orig/czkawka_core/src/same_music.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/same_music.rs	2021-12-04 17:07:36.878961290 +0100
@@ -1,22 +1,23 @@
+use std::collections::BTreeMap;
 use std::fs::{File, Metadata};
 use std::io::prelude::*;
+use std::io::BufWriter;
 use std::path::PathBuf;
+use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
+use std::sync::Arc;
+use std::thread::sleep;
 use std::time::{Duration, SystemTime, UNIX_EPOCH};
 use std::{fs, thread};
 
+use audiotags::Tag;
+use crossbeam_channel::Receiver;
+use rayon::prelude::*;
+
 use crate::common::Common;
 use crate::common_directory::Directories;
 use crate::common_items::ExcludedItems;
 use crate::common_messages::Messages;
 use crate::common_traits::*;
-use audiotags::Tag;
-use crossbeam_channel::Receiver;
-use rayon::prelude::*;
-use std::collections::BTreeMap;
-use std::io::BufWriter;
-use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
-use std::sync::Arc;
-use std::thread::sleep;
 
 #[derive(Debug)]
 pub struct ProgressData {
@@ -72,6 +73,7 @@
     pub number_of_failed_to_remove_files: usize,
     pub number_of_duplicates_music_files: usize,
 }
+
 impl Info {
     pub fn new() -> Self {
         Default::default()
@@ -93,6 +95,7 @@
     delete_method: DeleteMethod,
     music_similarity: MusicSimilarity,
     stopped_search: bool,
+    approximate_comparison: bool,
 }
 
 impl SameMusic {
@@ -111,6 +114,7 @@
             maximal_file_size: u64::MAX,
             duplicated_music_entries: vec![],
             music_to_check: Vec::with_capacity(2048),
+            approximate_comparison: true,
         }
     }
 
@@ -155,6 +159,10 @@
         self.delete_method = delete_method;
     }
 
+    pub fn set_approximate_comparison(&mut self, approximate_comparison: bool) {
+        self.approximate_comparison = approximate_comparison;
+    }
+
     pub fn set_recursive_search(&mut self, recursive_search: bool) {
         self.recursive_search = recursive_search;
     }
@@ -468,7 +476,10 @@
                 }
                 let mut hash_map: BTreeMap<String, Vec<FileEntry>> = Default::default();
                 for file_entry in vec_file_entry {
-                    let title = file_entry.title.to_lowercase().trim().to_string();
+                    let mut title = file_entry.title.to_lowercase().trim().to_string();
+                    if self.approximate_comparison {
+                        get_approximate_conversion(&mut title);
+                    }
                     if !title.is_empty() {
                         hash_map.entry(title.clone()).or_insert_with(Vec::new);
                         hash_map.get_mut(title.as_str()).unwrap().push(file_entry);
@@ -495,7 +506,10 @@
                 }
                 let mut hash_map: BTreeMap<String, Vec<FileEntry>> = Default::default();
                 for file_entry in vec_file_entry {
-                    let artist = file_entry.artist.to_lowercase().trim().to_string();
+                    let mut artist = file_entry.artist.to_lowercase().trim().to_string();
+                    if self.approximate_comparison {
+                        get_approximate_conversion(&mut artist);
+                    }
                     if !artist.is_empty() {
                         hash_map.entry(artist.clone()).or_insert_with(Vec::new);
                         hash_map.get_mut(artist.as_str()).unwrap().push(file_entry);
@@ -522,7 +536,10 @@
                 }
                 let mut hash_map: BTreeMap<String, Vec<FileEntry>> = Default::default();
                 for file_entry in vec_file_entry {
-                    let album_title = file_entry.album_title.to_lowercase().trim().to_string();
+                    let mut album_title = file_entry.album_title.to_lowercase().trim().to_string();
+                    if self.approximate_comparison {
+                        get_approximate_conversion(&mut album_title);
+                    }
                     if !album_title.is_empty() {
                         hash_map.entry(album_title.clone()).or_insert_with(Vec::new);
                         hash_map.get_mut(album_title.as_str()).unwrap().push(file_entry);
@@ -549,7 +566,10 @@
                 }
                 let mut hash_map: BTreeMap<String, Vec<FileEntry>> = Default::default();
                 for file_entry in vec_file_entry {
-                    let album_artist = file_entry.album_artist.to_lowercase().trim().to_string();
+                    let mut album_artist = file_entry.album_artist.to_lowercase().trim().to_string();
+                    if self.approximate_comparison {
+                        get_approximate_conversion(&mut album_artist);
+                    }
                     if !album_artist.is_empty() {
                         hash_map.entry(album_artist.clone()).or_insert_with(Vec::new);
                         hash_map.get_mut(album_artist.as_str()).unwrap().push(file_entry);
@@ -636,6 +656,7 @@
         Common::print_time(start_time, SystemTime::now(), "delete_files".to_string());
     }
 }
+
 impl Default for SameMusic {
     fn default() -> Self {
         Self::new()
@@ -669,11 +690,12 @@
         println!("Found duplicated files music - {}", self.duplicated_music_entries.len());
         println!("Included directories - {:?}", self.directories.included_directories);
         println!("Excluded directories - {:?}", self.directories.excluded_directories);
-        println!("Recursive search - {}", self.recursive_search.to_string());
+        println!("Recursive search - {}", self.recursive_search);
         println!("Delete Method - {:?}", self.delete_method);
         println!("-----------------------------------------");
     }
 }
+
 impl SaveResults for SameMusic {
     fn save_results_to_file(&mut self, file_name: &str) -> bool {
         let start_time: SystemTime = SystemTime::now();
@@ -712,6 +734,7 @@
         true
     }
 }
+
 impl PrintResults for SameMusic {
     /// Print information's about duplicated entries
     /// Only needed for CLI
@@ -721,12 +744,12 @@
         for vec_file_entry in self.duplicated_music_entries.iter() {
             for file_entry in vec_file_entry {
                 println!(
-                    "T: {}  -  A: {}  -  AT: {}  -  AA: {}  -  Y: {}  -  P: {}",
+                    "T: {}  -  A: {}  -  Y: {}  -  AT: {}  -  AA: {}  -  P: {}",
                     file_entry.title,
                     file_entry.artist,
+                    file_entry.year,
                     file_entry.album_title,
                     file_entry.album_artist,
-                    file_entry.year,
                     file_entry.path.display()
                 );
             }
@@ -736,3 +759,56 @@
         Common::print_time(start_time, SystemTime::now(), "print_entries".to_string());
     }
 }
+
+fn get_approximate_conversion(what: &mut String) {
+    let mut new_what = String::with_capacity(what.len());
+    let mut tab_number = 0;
+    let mut space_before = true;
+    for character in what.chars().into_iter() {
+        match character {
+            '(' => {
+                tab_number += 1;
+            }
+            ')' => {
+                if tab_number == 0 {
+                    // Nothing to do, not even save it to output
+                } else {
+                    tab_number -= 1;
+                }
+            }
+            ' ' => {
+                if !space_before {
+                    new_what.push(' ');
+                    space_before = true;
+                }
+            }
+            ch => {
+                if tab_number == 0 {
+                    space_before = false;
+                    new_what.push(ch);
+                }
+            }
+        }
+    }
+
+    if new_what.ends_with(' ') {
+        new_what.pop();
+    }
+    *what = new_what;
+}
+
+#[cfg(test)]
+mod tests {
+    use crate::same_music::get_approximate_conversion;
+
+    #[test]
+    fn test_strings() {
+        let mut what = "roman ( ziemniak ) ".to_string();
+        get_approximate_conversion(&mut what);
+        assert_eq!(what, "roman");
+
+        let mut what = "  HH)    ".to_string();
+        get_approximate_conversion(&mut what);
+        assert_eq!(what, "HH");
+    }
+}
diff -Naur orig/czkawka_core/src/similar_images.rs patched/czkawka_core/src/similar_images.rs
--- orig/czkawka_core/src/similar_images.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/similar_images.rs	2021-12-04 17:07:36.878961290 +0100
@@ -1,15 +1,3 @@
-use crate::common::Common;
-use crate::common_directory::Directories;
-use crate::common_items::ExcludedItems;
-use crate::common_messages::Messages;
-use crate::common_traits::{DebugPrint, PrintResults, SaveResults};
-use bk_tree::BKTree;
-use crossbeam_channel::Receiver;
-use directories_next::ProjectDirs;
-use humansize::{file_size_opts as options, FileSize};
-use image::GenericImageView;
-use img_hash::{FilterType, HashAlg, HasherConfig};
-use rayon::prelude::*;
 use std::collections::{BTreeMap, BTreeSet};
 use std::fs::OpenOptions;
 use std::fs::{File, Metadata};
@@ -22,11 +10,26 @@
 use std::time::{Duration, SystemTime, UNIX_EPOCH};
 use std::{fs, mem, thread};
 
+use bk_tree::BKTree;
+use crossbeam_channel::Receiver;
+use directories_next::ProjectDirs;
+use humansize::{file_size_opts as options, FileSize};
+use image::GenericImageView;
+use img_hash::{FilterType, HashAlg, HasherConfig};
+use rayon::prelude::*;
+
+use crate::common::Common;
+use crate::common_directory::Directories;
+use crate::common_items::ExcludedItems;
+use crate::common_messages::Messages;
+use crate::common_traits::{DebugPrint, PrintResults, SaveResults};
+
 // TODO check for better values
-pub const SIMILAR_VALUES: [[u32; 6]; 3] = [
-    [0, 1, 2, 3, 4, 5],     // 4 - Max 16
-    [0, 2, 5, 7, 14, 20],   // 8 - Max 256
-    [2, 5, 10, 20, 40, 80], // 16 - Max 65536
+pub const SIMILAR_VALUES: [[u32; 6]; 4] = [
+    [0, 2, 5, 7, 14, 20],    // 8
+    [2, 5, 15, 30, 40, 40],  // 16
+    [4, 10, 20, 40, 40, 40], // 32
+    [6, 20, 40, 40, 40, 40], // 64
 ];
 
 #[derive(Debug)]
@@ -97,6 +100,7 @@
     hash_alg: HashAlg,
     image_filter: FilterType,
     use_cache: bool,
+    delete_outdated_cache: bool,
 }
 
 /// Info struck with helpful information's about results
@@ -106,6 +110,7 @@
     pub number_of_failed_to_remove_files: usize,
     pub gained_space: u64,
 }
+
 impl Info {
     pub fn new() -> Self {
         Default::default()
@@ -134,18 +139,23 @@
             hash_alg: HashAlg::Gradient,
             image_filter: FilterType::Lanczos3,
             use_cache: true,
+            delete_outdated_cache: true,
         }
     }
 
     pub fn set_hash_size(&mut self, hash_size: u8) {
         self.hash_size = match hash_size {
-            4 | 8 | 16 => hash_size,
+            8 | 16 | 32 | 64 => hash_size,
             e => {
                 panic!("Invalid value of hash size {}", e);
             }
         }
     }
 
+    pub fn set_delete_outdated_cache(&mut self, delete_outdated_cache: bool) {
+        self.delete_outdated_cache = delete_outdated_cache;
+    }
+
     pub fn set_hash_alg(&mut self, hash_alg: HashAlg) {
         self.hash_alg = hash_alg;
     }
@@ -366,7 +376,7 @@
 
     // Cache algorithm:
     // - Load data from file
-    // - Remove from data to search this already loaded entries(size of image must match)
+    // - Remove from data to search, already loaded entries from cache(size and modified datamust match)
     // - Check hash of files which doesn't have saved entry
     // - Join already read hashes with hashes which were read from file
     // - Join all hashes and save it to file
@@ -380,7 +390,7 @@
         let mut non_cached_files_to_check: BTreeMap<String, FileEntry> = Default::default();
 
         if self.use_cache {
-            loaded_hash_map = match load_hashes_from_file(&mut self.text_messages, self.hash_size, self.hash_alg, self.image_filter) {
+            loaded_hash_map = match load_hashes_from_file(&mut self.text_messages, self.delete_outdated_cache, self.hash_size, self.hash_alg, self.image_filter) {
                 Some(t) => t,
                 None => Default::default(),
             };
@@ -448,7 +458,17 @@
 
                 let image = match image::open(file_entry.path.clone()) {
                     Ok(t) => t,
-                    Err(_inspected) => return Some(None), // Something is wrong with image
+                    // Err(_inspected) => return Some(None), // Something is wrong with image,
+                    // For broken images empty hash is used, because without it will try to resecan files each time when it is called(missing cache file is responsible for it)
+                    // This may cause problems(very rarely), when e.g. file was not available due lack of permissions, but it is available now
+                    Err(_inspected) => {
+                        let mut buf = Vec::new();
+                        for _i in 0..(self.hash_size * self.hash_size / 8) {
+                            buf.push(0);
+                        }
+                        file_entry.hash = buf.clone();
+                        return Some(Some((file_entry, buf)));
+                    }
                 };
                 let dimensions = image.dimensions();
 
@@ -460,16 +480,6 @@
                 let hash = hasher.hash_image(&image);
                 let buf: Vec<u8> = hash.as_bytes().to_vec();
 
-                // Images with hashes with full of 0 or 255 usually means that algorithm fails to decode them because e.g. contains a log of alpha channel
-                {
-                    if buf.iter().all(|e| *e == 0) {
-                        return Some(None);
-                    }
-                    if buf.iter().all(|e| *e == 255) {
-                        return Some(None);
-                    }
-                }
-
                 file_entry.hash = buf.clone();
 
                 Some(Some((file_entry, buf)))
@@ -491,10 +501,14 @@
             vec_file_entry.push((file_entry.clone(), file_entry.hash));
         }
 
+        // All valid entries are used to create bktree used to check for hash similarity
         for (file_entry, buf) in &vec_file_entry {
-            self.bktree.add(buf.clone());
-            self.image_hashes.entry(buf.clone()).or_insert_with(Vec::<FileEntry>::new);
-            self.image_hashes.get_mut(buf).unwrap().push(file_entry.clone());
+            // Only use to comparing, non broken hashes(all 0 or 255 hashes means that algorithm fails to decode them because e.g. contains a log of alpha channel)
+            if !(buf.iter().all(|e| *e == 0) || buf.iter().all(|e| *e == 255)) {
+                self.bktree.add(buf.clone());
+                self.image_hashes.entry(buf.clone()).or_insert_with(Vec::<FileEntry>::new);
+                self.image_hashes.get_mut(buf).unwrap().push(file_entry.clone());
+            }
         }
 
         if self.use_cache {
@@ -526,9 +540,10 @@
         // TODO optimize this for big temp_max_similarity values
         // TODO maybe Simialar(u32) is enough instead SIMILAR_VALUES value?
         let temp_max_similarity = match self.hash_size {
-            4 => SIMILAR_VALUES[0][5],
-            8 => SIMILAR_VALUES[1][5],
-            16 => SIMILAR_VALUES[2][5],
+            8 => SIMILAR_VALUES[0][5],
+            16 => SIMILAR_VALUES[1][4],
+            32 => SIMILAR_VALUES[2][3],
+            64 => SIMILAR_VALUES[3][2],
             _ => panic!(),
         };
 
@@ -623,6 +638,7 @@
         self.excluded_items.set_excluded_items(excluded_items, &mut self.text_messages);
     }
 }
+
 impl Default for SimilarImages {
     fn default() -> Self {
         Self::new()
@@ -643,6 +659,7 @@
         println!("-----------------------------------------");
     }
 }
+
 impl SaveResults for SimilarImages {
     fn save_results_to_file(&mut self, file_name: &str) -> bool {
         let start_time: SystemTime = SystemTime::now();
@@ -695,8 +712,8 @@
         true
     }
 }
+
 impl PrintResults for SimilarImages {
-    /// Prints basic info about empty folders // TODO print better
     fn print_results(&self) {
         if !self.similar_vectors.is_empty() {
             println!("Found {} images which have similar friends", self.similar_vectors.len());
@@ -717,7 +734,7 @@
     }
 }
 
-fn save_hashes_to_file(hashmap: &BTreeMap<String, FileEntry>, text_messages: &mut Messages, hash_size: u8, hash_alg: HashAlg, image_filter: FilterType) {
+pub fn save_hashes_to_file(hashmap: &BTreeMap<String, FileEntry>, text_messages: &mut Messages, hash_size: u8, hash_alg: HashAlg, image_filter: FilterType) {
     if let Some(proj_dirs) = ProjectDirs::from("pl", "Qarmin", "Czkawka") {
         // Lin: /home/username/.cache/czkawka
         // Win: C:\Users\Username\AppData\Local\Qarmin\Czkawka\cache
@@ -744,15 +761,12 @@
         let mut writer = BufWriter::new(file_handler);
 
         for file_entry in hashmap.values() {
-            let mut string: String = String::with_capacity(100);
-
-            string += format!("{}//{}//{}//{}//", file_entry.path.display(), file_entry.size, file_entry.dimensions, file_entry.modified_date).as_str();
+            let mut string: String = format!("{}//{}//{}//{}", file_entry.path.display(), file_entry.size, file_entry.dimensions, file_entry.modified_date);
 
-            for i in 0..file_entry.hash.len() - 1 {
-                string.push_str(file_entry.hash[i].to_string().as_str());
+            for hash in &file_entry.hash {
                 string.push_str("//");
+                string.push_str(hash.to_string().as_str());
             }
-            string += file_entry.hash[file_entry.hash.len() - 1].to_string().as_str();
 
             if let Err(e) = writeln!(writer, "{}", string) {
                 text_messages.messages.push(format!("Failed to save some data to cache file {}, reason {}", cache_file.display(), e));
@@ -761,7 +775,8 @@
         }
     }
 }
-fn load_hashes_from_file(text_messages: &mut Messages, hash_size: u8, hash_alg: HashAlg, image_filter: FilterType) -> Option<BTreeMap<String, FileEntry>> {
+
+pub fn load_hashes_from_file(text_messages: &mut Messages, delete_outdated_cache: bool, hash_size: u8, hash_alg: HashAlg, image_filter: FilterType) -> Option<BTreeMap<String, FileEntry>> {
     if let Some(proj_dirs) = ProjectDirs::from("pl", "Qarmin", "Czkawka") {
         let cache_dir = PathBuf::from(proj_dirs.cache_dir());
         let cache_file = cache_dir.join(get_cache_file(&hash_size, &hash_alg, &image_filter));
@@ -795,13 +810,13 @@
                     index + 1,
                     line,
                     cache_file.display(),
-                    uuu.len(),
-                    number_of_results + 4
+                    number_of_results + 4,
+                    uuu.len()
                 ));
                 continue;
             }
             // Don't load cache data if destination file not exists
-            if Path::new(uuu[0]).exists() {
+            if !delete_outdated_cache || Path::new(uuu[0]).exists() {
                 let mut hash: Vec<u8> = Vec::new();
                 for i in 0..number_of_results {
                     hash.push(match uuu[4 + i as usize].parse::<u8>() {
@@ -815,22 +830,6 @@
                     });
                 }
 
-                #[cfg(debug_assertions)]
-                {
-                    let mut have_at_least: u8 = 0;
-                    for i in hash.iter() {
-                        if *i == 0 {
-                            have_at_least += 1;
-                        }
-                    }
-                    if have_at_least == hash.len() as u8 {
-                        println!("ERROR START - {}", line);
-                        println!("have_at_least == hash.len() as u8");
-                        println!("ERROR END hash.len() - {} == have_at_least - {}", hash.len(), have_at_least);
-                        continue; // Just skip this entry, it is very very unlikelly that something have this hash, but if it has, then just ignore it
-                    }
-                }
-
                 hashmap_loaded_entries.insert(
                     uuu[0].to_string(),
                     FileEntry {
@@ -874,9 +873,10 @@
 
 pub fn get_string_from_similarity(similarity: &Similarity, hash_size: u8) -> String {
     let index_preset = match hash_size {
-        4 => 0,
-        8 => 1,
-        16 => 2,
+        8 => 0,
+        16 => 1,
+        32 => 2,
+        64 => 3,
         _ => panic!(),
     };
 
@@ -927,9 +927,10 @@
 
 pub fn return_similarity_from_similarity_preset(similarity_preset: &SimilarityPreset, hash_size: u8) -> Similarity {
     let index_preset = match hash_size {
-        4 => 0,
-        8 => 1,
-        16 => 2,
+        8 => 0,
+        16 => 1,
+        32 => 2,
+        64 => 3,
         _ => panic!(),
     };
     match similarity_preset {
@@ -973,7 +974,7 @@
         Ok(img_open) => {
             for alg in [HashAlg::Blockhash, HashAlg::Gradient, HashAlg::DoubleGradient, HashAlg::VertGradient, HashAlg::Mean] {
                 for filter in [FilterType::Lanczos3, FilterType::CatmullRom, FilterType::Gaussian, FilterType::Nearest, FilterType::Triangle] {
-                    for size in [2, 4, 8, 16, 32, 64] {
+                    for size in [8, 16, 32, 64] {
                         let hasher_config = HasherConfig::new().hash_alg(alg).resize_filter(filter).hash_size(size, size);
 
                         let start = SystemTime::now();
diff -Naur orig/czkawka_core/src/similar_videos.rs patched/czkawka_core/src/similar_videos.rs
--- orig/czkawka_core/src/similar_videos.rs	1970-01-01 01:00:00.000000000 +0100
+++ patched/czkawka_core/src/similar_videos.rs	2021-12-04 17:07:36.878961290 +0100
@@ -0,0 +1,746 @@
+use std::collections::{BTreeMap, HashMap};
+use std::fs::OpenOptions;
+use std::fs::{File, Metadata};
+use std::io::Write;
+use std::io::*;
+use std::path::{Path, PathBuf};
+use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
+use std::sync::Arc;
+use std::thread::sleep;
+use std::time::{Duration, SystemTime, UNIX_EPOCH};
+use std::{fs, mem, thread};
+
+use crossbeam_channel::Receiver;
+use directories_next::ProjectDirs;
+use ffmpeg_cmdline_utils::FfmpegErrorKind::FfmpegNotFound;
+use humansize::{file_size_opts as options, FileSize};
+use rayon::prelude::*;
+use vid_dup_finder_lib::HashCreationErrorKind::DetermineVideo;
+use vid_dup_finder_lib::{NormalizedTolerance, VideoHash};
+
+use crate::common::Common;
+use crate::common_directory::Directories;
+use crate::common_extensions::Extensions;
+use crate::common_items::ExcludedItems;
+use crate::common_messages::Messages;
+use crate::common_traits::{DebugPrint, PrintResults, SaveResults};
+
+pub const MAX_TOLERANCE: i32 = 20;
+
+const HASH_SIZE: usize = 19;
+
+#[derive(Debug)]
+pub struct ProgressData {
+    pub current_stage: u8,
+    pub max_stage: u8,
+    pub videos_checked: usize,
+    pub videos_to_check: usize,
+}
+
+#[derive(Clone, Debug)]
+pub struct FileEntry {
+    pub path: PathBuf,
+    pub size: u64,
+    pub modified_date: u64,
+    pub vhash: VideoHash,
+    pub error: String,
+}
+
+/// Distance metric to use with the BK-tree.
+struct Hamming;
+
+impl bk_tree::Metric<Vec<u8>> for Hamming {
+    fn distance(&self, a: &Vec<u8>, b: &Vec<u8>) -> u32 {
+        hamming::distance_fast(a, b).unwrap() as u32
+    }
+
+    fn threshold_distance(&self, a: &Vec<u8>, b: &Vec<u8>, _threshold: u32) -> Option<u32> {
+        Some(self.distance(a, b))
+    }
+}
+
+/// Struct to store most basics info about all folder
+pub struct SimilarVideos {
+    information: Info,
+    text_messages: Messages,
+    directories: Directories,
+    excluded_items: ExcludedItems,
+    allowed_extensions: Extensions,
+    similar_vectors: Vec<Vec<FileEntry>>,
+    recursive_search: bool,
+    minimal_file_size: u64,
+    maximal_file_size: u64,
+    videos_hashes: BTreeMap<Vec<u8>, Vec<FileEntry>>,
+    stopped_search: bool,
+    videos_to_check: BTreeMap<String, FileEntry>,
+    use_cache: bool,
+    tolerance: i32,
+    delete_outdated_cache: bool,
+}
+
+/// Info struck with helpful information's about results
+#[derive(Default)]
+pub struct Info {
+    pub number_of_removed_files: usize,
+    pub number_of_failed_to_remove_files: usize,
+    pub gained_space: u64,
+}
+
+impl Info {
+    pub fn new() -> Self {
+        Default::default()
+    }
+}
+
+/// Method implementation for EmptyFolder
+impl SimilarVideos {
+    /// New function providing basics values
+    pub fn new() -> Self {
+        Self {
+            information: Default::default(),
+            text_messages: Messages::new(),
+            directories: Directories::new(),
+            excluded_items: Default::default(),
+            allowed_extensions: Extensions::new(),
+            similar_vectors: vec![],
+            recursive_search: true,
+            minimal_file_size: 1024 * 16,
+            maximal_file_size: u64::MAX,
+            videos_hashes: Default::default(),
+            stopped_search: false,
+            videos_to_check: Default::default(),
+            use_cache: true,
+            tolerance: 10,
+            delete_outdated_cache: false,
+        }
+    }
+
+    pub fn set_delete_outdated_cache(&mut self, delete_outdated_cache: bool) {
+        self.delete_outdated_cache = delete_outdated_cache;
+    }
+
+    pub fn set_tolerance(&mut self, tolerance: i32) {
+        assert!((0..=MAX_TOLERANCE).contains(&tolerance));
+        self.tolerance = tolerance
+    }
+
+    pub fn get_stopped_search(&self) -> bool {
+        self.stopped_search
+    }
+
+    pub const fn get_text_messages(&self) -> &Messages {
+        &self.text_messages
+    }
+
+    pub fn set_allowed_extensions(&mut self, allowed_extensions: String) {
+        self.allowed_extensions.set_allowed_extensions(allowed_extensions, &mut self.text_messages);
+    }
+
+    pub const fn get_similar_videos(&self) -> &Vec<Vec<FileEntry>> {
+        &self.similar_vectors
+    }
+
+    pub const fn get_information(&self) -> &Info {
+        &self.information
+    }
+
+    pub fn set_use_cache(&mut self, use_cache: bool) {
+        self.use_cache = use_cache;
+    }
+
+    pub fn set_recursive_search(&mut self, recursive_search: bool) {
+        self.recursive_search = recursive_search;
+    }
+
+    pub fn set_minimal_file_size(&mut self, minimal_file_size: u64) {
+        self.minimal_file_size = match minimal_file_size {
+            0 => 1,
+            t => t,
+        };
+    }
+    pub fn set_maximal_file_size(&mut self, maximal_file_size: u64) {
+        self.maximal_file_size = match maximal_file_size {
+            0 => 1,
+            t => t,
+        };
+    }
+
+    /// Public function used by CLI to search for empty folders
+    pub fn find_similar_videos(&mut self, stop_receiver: Option<&Receiver<()>>, progress_sender: Option<&futures::channel::mpsc::UnboundedSender<ProgressData>>) {
+        if !check_if_ffmpeg_is_installed() {
+            self.text_messages.errors.push("Cannot find proper installation of FFmpeg.".to_string());
+        } else {
+            self.directories.optimize_directories(true, &mut self.text_messages);
+            if !self.check_for_similar_videos(stop_receiver, progress_sender) {
+                self.stopped_search = true;
+                return;
+            }
+            if !self.sort_videos(stop_receiver, progress_sender) {
+                self.stopped_search = true;
+                return;
+            }
+            // if self.delete_folders {
+            //     self.delete_empty_folders();
+            // }
+        }
+        self.debug_print();
+    }
+
+    // pub fn set_delete_folder(&mut self, delete_folder: bool) {
+    //     self.delete_folders = delete_folder;
+    // }
+
+    /// Function to check if folder are empty.
+    /// Parameter initial_checking for second check before deleting to be sure that checked folder is still empty
+    fn check_for_similar_videos(&mut self, stop_receiver: Option<&Receiver<()>>, progress_sender: Option<&futures::channel::mpsc::UnboundedSender<ProgressData>>) -> bool {
+        let start_time: SystemTime = SystemTime::now();
+        let mut folders_to_check: Vec<PathBuf> = Vec::with_capacity(1024 * 2); // This should be small enough too not see to big difference and big enough to store most of paths without needing to resize vector
+
+        // Add root folders for finding
+        for id in &self.directories.included_directories {
+            folders_to_check.push(id.clone());
+        }
+
+        //// PROGRESS THREAD START
+        const LOOP_DURATION: u32 = 200; //in ms
+        let progress_thread_run = Arc::new(AtomicBool::new(true));
+
+        let atomic_file_counter = Arc::new(AtomicUsize::new(0));
+
+        let progress_thread_handle;
+        if let Some(progress_sender) = progress_sender {
+            let progress_send = progress_sender.clone();
+            let progress_thread_run = progress_thread_run.clone();
+            let atomic_file_counter = atomic_file_counter.clone();
+            progress_thread_handle = thread::spawn(move || loop {
+                progress_send
+                    .unbounded_send(ProgressData {
+                        current_stage: 0,
+                        max_stage: 1,
+                        videos_checked: atomic_file_counter.load(Ordering::Relaxed) as usize,
+                        videos_to_check: 0,
+                    })
+                    .unwrap();
+                if !progress_thread_run.load(Ordering::Relaxed) {
+                    break;
+                }
+                sleep(Duration::from_millis(LOOP_DURATION as u64));
+            });
+        } else {
+            progress_thread_handle = thread::spawn(|| {});
+        }
+        //// PROGRESS THREAD END
+
+        while !folders_to_check.is_empty() {
+            if stop_receiver.is_some() && stop_receiver.unwrap().try_recv().is_ok() {
+                // End thread which send info to gui
+                progress_thread_run.store(false, Ordering::Relaxed);
+                progress_thread_handle.join().unwrap();
+                return false;
+            }
+            let current_folder = folders_to_check.pop().unwrap();
+
+            // Read current dir, if permission are denied just go to next
+            let read_dir = match fs::read_dir(&current_folder) {
+                Ok(t) => t,
+                Err(e) => {
+                    self.text_messages.warnings.push(format!("Cannot open dir {}, reason {}", current_folder.display(), e));
+                    continue;
+                } // Permissions denied
+            };
+
+            // Check every sub folder/file/link etc.
+            'dir: for entry in read_dir {
+                let entry_data = match entry {
+                    Ok(t) => t,
+                    Err(e) => {
+                        self.text_messages.warnings.push(format!("Cannot read entry in dir {}, reason {}", current_folder.display(), e));
+                        continue;
+                    } //Permissions denied
+                };
+                let metadata: Metadata = match entry_data.metadata() {
+                    Ok(t) => t,
+                    Err(e) => {
+                        self.text_messages.warnings.push(format!("Cannot read metadata in dir {}, reason {}", current_folder.display(), e));
+                        continue;
+                    } //Permissions denied
+                };
+                if metadata.is_dir() {
+                    if !self.recursive_search {
+                        continue;
+                    }
+
+                    let next_folder = current_folder.join(entry_data.file_name());
+                    if self.directories.is_excluded(&next_folder) {
+                        continue 'dir;
+                    }
+
+                    if self.excluded_items.is_excluded(&next_folder) {
+                        continue 'dir;
+                    }
+
+                    folders_to_check.push(next_folder);
+                } else if metadata.is_file() {
+                    atomic_file_counter.fetch_add(1, Ordering::Relaxed);
+
+                    let file_name_lowercase: String = match entry_data.file_name().into_string() {
+                        Ok(t) => t,
+                        Err(_inspected) => {
+                            println!("File {:?} has not valid UTF-8 name", entry_data);
+                            continue 'dir;
+                        }
+                    }
+                    .to_lowercase();
+
+                    if !self.allowed_extensions.file_extensions.is_empty() {
+                        let allowed = self.allowed_extensions.file_extensions.iter().any(|e| file_name_lowercase.ends_with((".".to_string() + e.to_lowercase().as_str()).as_str()));
+                        if !allowed {
+                            // Not an allowed extension, ignore it.
+                            continue 'dir;
+                        }
+                    }
+
+                    // Checking allowed video extensions
+                    let allowed_video_extensions = [".mp4", ".mpv", ".flv", ".mp4a", ".webm", ".mpg", ".mp2", ".mpeg", ".m4p", ".m4v", ".avi", ".wmv", ".qt", ".mov", ".swf", ".mkv"];
+                    if !allowed_video_extensions.iter().any(|e| file_name_lowercase.ends_with(e)) {
+                        continue 'dir;
+                    }
+
+                    // Checking files
+                    if (self.minimal_file_size..=self.maximal_file_size).contains(&metadata.len()) {
+                        let current_file_name = current_folder.join(entry_data.file_name());
+                        if self.excluded_items.is_excluded(&current_file_name) {
+                            continue 'dir;
+                        }
+
+                        let fe: FileEntry = FileEntry {
+                            path: current_file_name.clone(),
+                            size: metadata.len(),
+                            modified_date: match metadata.modified() {
+                                Ok(t) => match t.duration_since(UNIX_EPOCH) {
+                                    Ok(d) => d.as_secs(),
+                                    Err(_inspected) => {
+                                        self.text_messages.warnings.push(format!("File {} seems to be modified before Unix Epoch.", current_file_name.display()));
+                                        0
+                                    }
+                                },
+                                Err(e) => {
+                                    self.text_messages.warnings.push(format!("Unable to get modification date from file {}, reason {}", current_file_name.display(), e));
+                                    0
+                                } // Permissions Denied
+                            },
+                            vhash: Default::default(),
+                            error: "".to_string(),
+                        };
+
+                        self.videos_to_check.insert(current_file_name.to_string_lossy().to_string(), fe);
+                    }
+                }
+            }
+        }
+        // End thread which send info to gui
+        progress_thread_run.store(false, Ordering::Relaxed);
+        progress_thread_handle.join().unwrap();
+        Common::print_time(start_time, SystemTime::now(), "check_for_similar_videos".to_string());
+        true
+    }
+
+    fn sort_videos(&mut self, stop_receiver: Option<&Receiver<()>>, progress_sender: Option<&futures::channel::mpsc::UnboundedSender<ProgressData>>) -> bool {
+        let hash_map_modification = SystemTime::now();
+
+        let loaded_hash_map;
+
+        let mut records_already_cached: BTreeMap<String, FileEntry> = Default::default();
+        let mut non_cached_files_to_check: BTreeMap<String, FileEntry> = Default::default();
+
+        if self.use_cache {
+            loaded_hash_map = match load_hashes_from_file(&mut self.text_messages, self.delete_outdated_cache) {
+                Some(t) => t,
+                None => Default::default(),
+            };
+
+            for (name, file_entry) in &self.videos_to_check {
+                #[allow(clippy::if_same_then_else)]
+                if !loaded_hash_map.contains_key(name) {
+                    // If loaded data doesn't contains current videos info
+                    non_cached_files_to_check.insert(name.clone(), file_entry.clone());
+                } else if file_entry.size != loaded_hash_map.get(name).unwrap().size || file_entry.modified_date != loaded_hash_map.get(name).unwrap().modified_date {
+                    // When size or modification date of video changed, then it is clear that is different video
+                    non_cached_files_to_check.insert(name.clone(), file_entry.clone());
+                } else {
+                    // Checking may be omitted when already there is entry with same size and modification date
+                    records_already_cached.insert(name.clone(), loaded_hash_map.get(name).unwrap().clone());
+                }
+            }
+        } else {
+            loaded_hash_map = Default::default();
+            mem::swap(&mut self.videos_to_check, &mut non_cached_files_to_check);
+        }
+
+        Common::print_time(hash_map_modification, SystemTime::now(), "sort_videos - reading data from cache and preparing them".to_string());
+        let hash_map_modification = SystemTime::now();
+
+        //// PROGRESS THREAD START
+        const LOOP_DURATION: u32 = 200; //in ms
+        let progress_thread_run = Arc::new(AtomicBool::new(true));
+
+        let atomic_file_counter = Arc::new(AtomicUsize::new(0));
+
+        let progress_thread_handle;
+        if let Some(progress_sender) = progress_sender {
+            let progress_send = progress_sender.clone();
+            let progress_thread_run = progress_thread_run.clone();
+            let atomic_file_counter = atomic_file_counter.clone();
+            let videos_to_check = non_cached_files_to_check.len();
+            progress_thread_handle = thread::spawn(move || loop {
+                progress_send
+                    .unbounded_send(ProgressData {
+                        current_stage: 1,
+                        max_stage: 1,
+                        videos_checked: atomic_file_counter.load(Ordering::Relaxed) as usize,
+                        videos_to_check,
+                    })
+                    .unwrap();
+                if !progress_thread_run.load(Ordering::Relaxed) {
+                    break;
+                }
+                sleep(Duration::from_millis(LOOP_DURATION as u64));
+            });
+        } else {
+            progress_thread_handle = thread::spawn(|| {});
+        }
+        //// PROGRESS THREAD END
+        let mut vec_file_entry: Vec<FileEntry> = non_cached_files_to_check
+            .par_iter()
+            .map(|file_entry| {
+                atomic_file_counter.fetch_add(1, Ordering::Relaxed);
+                if stop_receiver.is_some() && stop_receiver.unwrap().try_recv().is_ok() {
+                    // This will not break
+                    return None;
+                }
+                let mut file_entry = file_entry.1.clone();
+
+                let vhash = match VideoHash::from_path(&file_entry.path) {
+                    Ok(t) => t,
+                    Err(e) => {
+                        return {
+                            file_entry.error = format!("Failed to hash file, {}", e);
+                            Some(file_entry)
+                        }
+                    }
+                };
+
+                file_entry.vhash = vhash;
+
+                Some(file_entry)
+            })
+            .while_some()
+            .collect::<Vec<FileEntry>>();
+
+        // End thread which send info to gui
+        progress_thread_run.store(false, Ordering::Relaxed);
+        progress_thread_handle.join().unwrap();
+
+        Common::print_time(hash_map_modification, SystemTime::now(), "sort_videos - reading data from files in parallel".to_string());
+        let hash_map_modification = SystemTime::now();
+
+        // Just connect loaded results with already calculated hashes
+        for (_name, file_entry) in records_already_cached {
+            vec_file_entry.push(file_entry.clone());
+        }
+
+        let mut hashmap_with_file_entries: HashMap<String, FileEntry> = Default::default();
+        let mut vector_of_hashes: Vec<VideoHash> = Vec::new();
+        for file_entry in &vec_file_entry {
+            // 0 means that images was not hashed correctly, e.g. could be improperly
+            if file_entry.error.is_empty() {
+                hashmap_with_file_entries.insert(file_entry.vhash.src_path().to_string_lossy().to_string(), file_entry.clone());
+                vector_of_hashes.push(file_entry.vhash.clone());
+            } else {
+                self.text_messages.warnings.push(file_entry.error.clone());
+            }
+        }
+
+        if self.use_cache {
+            // Must save all results to file, old loaded from file with all currently counted results
+            let mut all_results: BTreeMap<String, FileEntry> = loaded_hash_map;
+            for file_entry in vec_file_entry {
+                all_results.insert(file_entry.path.to_string_lossy().to_string(), file_entry);
+            }
+            save_hashes_to_file(&all_results, &mut self.text_messages);
+        }
+
+        Common::print_time(hash_map_modification, SystemTime::now(), "sort_videos - saving data to files".to_string());
+        let hash_map_modification = SystemTime::now();
+
+        let match_group = vid_dup_finder_lib::search(vector_of_hashes, NormalizedTolerance::new(self.tolerance as f64 / 100.0f64));
+
+        let mut collected_similar_videos: Vec<Vec<FileEntry>> = Default::default();
+        for i in match_group {
+            let mut temp_vector: Vec<FileEntry> = Vec::new();
+            for j in i.duplicates() {
+                temp_vector.push(hashmap_with_file_entries.get(&j.to_string_lossy().to_string()).unwrap().clone());
+            }
+            assert!(temp_vector.len() > 1);
+            collected_similar_videos.push(temp_vector);
+        }
+
+        self.similar_vectors = collected_similar_videos;
+
+        Common::print_time(hash_map_modification, SystemTime::now(), "sort_videos - selecting data from BtreeMap".to_string());
+
+        // Clean unused data
+        self.videos_hashes = Default::default();
+        self.videos_to_check = Default::default();
+
+        true
+    }
+
+    /// Set included dir which needs to be relative, exists etc.
+    pub fn set_included_directory(&mut self, included_directory: Vec<PathBuf>) {
+        self.directories.set_included_directory(included_directory, &mut self.text_messages);
+    }
+
+    pub fn set_excluded_directory(&mut self, excluded_directory: Vec<PathBuf>) {
+        self.directories.set_excluded_directory(excluded_directory, &mut self.text_messages);
+    }
+
+    pub fn set_excluded_items(&mut self, excluded_items: Vec<String>) {
+        self.excluded_items.set_excluded_items(excluded_items, &mut self.text_messages);
+    }
+}
+
+impl Default for SimilarVideos {
+    fn default() -> Self {
+        Self::new()
+    }
+}
+
+impl DebugPrint for SimilarVideos {
+    #[allow(dead_code)]
+    #[allow(unreachable_code)]
+    fn debug_print(&self) {
+        #[cfg(not(debug_assertions))]
+        {
+            return;
+        }
+
+        println!("---------------DEBUG PRINT---------------");
+        println!("Included directories - {:?}", self.directories.included_directories);
+        println!("-----------------------------------------");
+    }
+}
+
+impl SaveResults for SimilarVideos {
+    fn save_results_to_file(&mut self, file_name: &str) -> bool {
+        let start_time: SystemTime = SystemTime::now();
+        let file_name: String = match file_name {
+            "" => "results.txt".to_string(),
+            k => k.to_string(),
+        };
+
+        let file_handler = match File::create(&file_name) {
+            Ok(t) => t,
+            Err(e) => {
+                self.text_messages.errors.push(format!("Failed to create file {}, reason {}", file_name, e));
+                return false;
+            }
+        };
+        let mut writer = BufWriter::new(file_handler);
+
+        if let Err(e) = writeln!(
+            writer,
+            "Results of searching {:?} with excluded directories {:?} and excluded items {:?}",
+            self.directories.included_directories, self.directories.excluded_directories, self.excluded_items.items
+        ) {
+            self.text_messages.errors.push(format!("Failed to save results to file {}, reason {}", file_name, e));
+            return false;
+        }
+
+        if !self.similar_vectors.is_empty() {
+            write!(writer, "{} videos which have similar friends\n\n", self.similar_vectors.len()).unwrap();
+
+            for struct_similar in self.similar_vectors.iter() {
+                writeln!(writer, "Found {} videos which have similar friends", self.similar_vectors.len()).unwrap();
+                for file_entry in struct_similar {
+                    writeln!(writer, "{} - {}", file_entry.path.display(), file_entry.size.file_size(options::BINARY).unwrap(),).unwrap();
+                }
+                writeln!(writer).unwrap();
+            }
+        } else {
+            write!(writer, "Not found any similar videos.").unwrap();
+        }
+
+        Common::print_time(start_time, SystemTime::now(), "save_results_to_file".to_string());
+        true
+    }
+}
+
+impl PrintResults for SimilarVideos {
+    fn print_results(&self) {
+        if !self.similar_vectors.is_empty() {
+            println!("Found {} videos which have similar friends", self.similar_vectors.len());
+
+            for vec_file_entry in &self.similar_vectors {
+                for file_entry in vec_file_entry {
+                    println!("{} - {}", file_entry.path.display(), file_entry.size.file_size(options::BINARY).unwrap());
+                }
+                println!();
+            }
+        }
+    }
+}
+
+pub fn save_hashes_to_file(hashmap: &BTreeMap<String, FileEntry>, text_messages: &mut Messages) {
+    if let Some(proj_dirs) = ProjectDirs::from("pl", "Qarmin", "Czkawka") {
+        // Lin: /home/username/.cache/czkawka
+        // Win: C:\Users\Username\AppData\Local\Qarmin\Czkawka\cache
+        // Mac: /Users/Username/Library/Caches/pl.Qarmin.Czkawka
+
+        // Saves data
+        // path//file_size//modified_date//num_frames//duration//hash1//hash2 etc.
+        // number of hashes is equal to HASH_QWORDS(19 at this moment)
+
+        let cache_dir = PathBuf::from(proj_dirs.cache_dir());
+        if cache_dir.exists() {
+            if !cache_dir.is_dir() {
+                text_messages.messages.push(format!("Config dir {} is a file!", cache_dir.display()));
+                return;
+            }
+        } else if let Err(e) = fs::create_dir_all(&cache_dir) {
+            text_messages.messages.push(format!("Cannot create config dir {}, reason {}", cache_dir.display(), e));
+            return;
+        }
+        let cache_file = cache_dir.join("cache_similar_videos.txt");
+        let file_handler = match OpenOptions::new().truncate(true).write(true).create(true).open(&cache_file) {
+            Ok(t) => t,
+            Err(e) => {
+                text_messages.messages.push(format!("Cannot create or open cache file {}, reason {}", cache_file.display(), e));
+                return;
+            }
+        };
+        let mut writer = BufWriter::new(file_handler);
+
+        for file_entry in hashmap.values() {
+            let mut string: String = String::with_capacity(256);
+
+            string += format!(
+                "{}//{}//{}//{}//{}//{}",
+                file_entry.path.display(),
+                file_entry.size,
+                file_entry.modified_date,
+                file_entry.vhash.num_frames(),
+                file_entry.vhash.duration(),
+                file_entry.error
+            )
+            .as_str();
+
+            for i in file_entry.vhash.hash() {
+                string.push_str("//");
+                string.push_str(i.to_string().as_str());
+            }
+
+            if let Err(e) = writeln!(writer, "{}", string) {
+                text_messages.messages.push(format!("Failed to save some data to cache file {}, reason {}", cache_file.display(), e));
+                return;
+            };
+        }
+    }
+}
+
+pub fn load_hashes_from_file(text_messages: &mut Messages, delete_outdated_cache: bool) -> Option<BTreeMap<String, FileEntry>> {
+    if let Some(proj_dirs) = ProjectDirs::from("pl", "Qarmin", "Czkawka") {
+        let cache_dir = PathBuf::from(proj_dirs.cache_dir());
+        let cache_file = cache_dir.join("cache_similar_videos.txt");
+        let file_handler = match OpenOptions::new().read(true).open(&cache_file) {
+            Ok(t) => t,
+            Err(_inspected) => {
+                // text_messages.messages.push(format!("Cannot find or open cache file {}", cache_file.display())); // This shouldn't be write to output
+                return None;
+            }
+        };
+
+        let reader = BufReader::new(file_handler);
+
+        let mut hashmap_loaded_entries: BTreeMap<String, FileEntry> = Default::default();
+
+        // Read the file line by line using the lines() iterator from std::io::BufRead.
+        for (index, line) in reader.lines().enumerate() {
+            let line = match line {
+                Ok(t) => t,
+                Err(e) => {
+                    text_messages.warnings.push(format!("Failed to load line number {} from cache file {}, reason {}", index + 1, cache_file.display(), e));
+                    return None;
+                }
+            };
+            let uuu = line.split("//").collect::<Vec<&str>>();
+            // Hash size + other things
+            if uuu.len() != (HASH_SIZE + 6) {
+                text_messages.warnings.push(format!(
+                    "Found invalid data in line {} - ({}) in cache file {}, expected {} values, found {}",
+                    index + 1,
+                    line,
+                    cache_file.display(),
+                    HASH_SIZE + 6,
+                    uuu.len(),
+                ));
+                continue;
+            };
+            // Don't load cache data if destination file not exists
+            if !delete_outdated_cache || Path::new(uuu[0]).exists() {
+                let mut hash: [u64; 19] = [0; 19];
+                for i in 0..HASH_SIZE {
+                    hash[i] = match uuu[6 + i as usize].parse::<u64>() {
+                        Ok(t) => t,
+                        Err(e) => {
+                            text_messages
+                                .warnings
+                                .push(format!("Found invalid hash value in line {} - ({}) in cache file {}, reason {}", index + 1, line, cache_file.display(), e));
+                            continue;
+                        }
+                    };
+                }
+
+                hashmap_loaded_entries.insert(
+                    uuu[0].to_string(),
+                    FileEntry {
+                        path: PathBuf::from(uuu[0]),
+                        size: match uuu[1].parse::<u64>() {
+                            Ok(t) => t,
+                            Err(e) => {
+                                text_messages
+                                    .warnings
+                                    .push(format!("Found invalid size value in line {} - ({}) in cache file {}, reason {}", index + 1, line, cache_file.display(), e));
+                                continue;
+                            }
+                        },
+                        modified_date: match uuu[2].parse::<u64>() {
+                            Ok(t) => t,
+                            Err(e) => {
+                                text_messages
+                                    .warnings
+                                    .push(format!("Found invalid modified date value in line {} - ({}) in cache file {}, reason {}", index + 1, line, cache_file.display(), e));
+                                continue;
+                            }
+                        },
+                        vhash: VideoHash::with_start_data(uuu[4].parse::<u32>().unwrap_or(0), uuu[0], hash, uuu[3].parse::<u32>().unwrap_or(10)),
+                        error: uuu[5].to_string(),
+                    },
+                );
+            }
+        }
+
+        return Some(hashmap_loaded_entries);
+    }
+
+    text_messages.messages.push("Cannot find or open system config dir to save cache file".to_string());
+    None
+}
+
+pub fn check_if_ffmpeg_is_installed() -> bool {
+    let vid = "999999999999999999.txt";
+    if let Err(DetermineVideo { src_path: _a, error: FfmpegNotFound }) = VideoHash::from_path(&vid) {
+        return false;
+    }
+    true
+}
diff -Naur orig/czkawka_core/src/temporary.rs patched/czkawka_core/src/temporary.rs
--- orig/czkawka_core/src/temporary.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/temporary.rs	2021-12-04 17:07:36.878961290 +0100
@@ -1,19 +1,20 @@
 use std::fs::{File, Metadata};
 use std::io::prelude::*;
+use std::io::BufWriter;
 use std::path::PathBuf;
+use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
+use std::sync::Arc;
+use std::thread::sleep;
 use std::time::{Duration, SystemTime, UNIX_EPOCH};
 use std::{fs, thread};
 
+use crossbeam_channel::Receiver;
+
 use crate::common::Common;
 use crate::common_directory::Directories;
 use crate::common_items::ExcludedItems;
 use crate::common_messages::Messages;
 use crate::common_traits::*;
-use crossbeam_channel::Receiver;
-use std::io::BufWriter;
-use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
-use std::sync::Arc;
-use std::thread::sleep;
 
 #[derive(Debug)]
 pub struct ProgressData {
@@ -41,6 +42,7 @@
     pub number_of_removed_files: usize,
     pub number_of_failed_to_remove_files: usize,
 }
+
 impl Info {
     pub fn new() -> Self {
         Default::default()
@@ -276,6 +278,7 @@
         Common::print_time(start_time, SystemTime::now(), "delete_files".to_string());
     }
 }
+
 impl Default for Temporary {
     fn default() -> Self {
         Self::new()
@@ -305,11 +308,12 @@
         println!("Excluded items - {:?}", self.excluded_items.items);
         println!("Included directories - {:?}", self.directories.included_directories);
         println!("Excluded directories - {:?}", self.directories.excluded_directories);
-        println!("Recursive search - {}", self.recursive_search.to_string());
+        println!("Recursive search - {}", self.recursive_search);
         println!("Delete Method - {:?}", self.delete_method);
         println!("-----------------------------------------");
     }
 }
+
 impl SaveResults for Temporary {
     fn save_results_to_file(&mut self, file_name: &str) -> bool {
         let start_time: SystemTime = SystemTime::now();
@@ -348,6 +352,7 @@
         true
     }
 }
+
 impl PrintResults for Temporary {
     fn print_results(&self) {
         let start_time: SystemTime = SystemTime::now();
diff -Naur orig/czkawka_core/src/zeroed.rs patched/czkawka_core/src/zeroed.rs
--- orig/czkawka_core/src/zeroed.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_core/src/zeroed.rs	1970-01-01 01:00:00.000000000 +0100
@@ -1,513 +0,0 @@
-use std::fs::{File, Metadata};
-use std::io::prelude::*;
-use std::path::PathBuf;
-use std::time::{Duration, SystemTime, UNIX_EPOCH};
-use std::{fs, thread};
-
-use crate::common::Common;
-use crate::common_directory::Directories;
-use crate::common_extensions::Extensions;
-use crate::common_items::ExcludedItems;
-use crate::common_messages::Messages;
-use crate::common_traits::*;
-use crossbeam_channel::Receiver;
-use rayon::prelude::*;
-use std::io::BufWriter;
-use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};
-use std::sync::Arc;
-use std::thread::sleep;
-
-#[derive(Debug)]
-pub struct ProgressData {
-    pub current_stage: u8,
-    pub max_stage: u8,
-    pub files_checked: usize,
-    pub files_to_check: usize,
-}
-
-#[derive(Eq, PartialEq, Clone, Debug)]
-pub enum DeleteMethod {
-    None,
-    Delete,
-}
-
-#[derive(Clone)]
-pub struct FileEntry {
-    pub path: PathBuf,
-    pub size: u64,
-    pub modified_date: u64,
-}
-
-/// Info struck with helpful information's about results
-#[derive(Default)]
-pub struct Info {
-    pub number_of_zeroed_files: usize,
-    pub number_of_removed_files: usize,
-    pub number_of_failed_to_remove_files: usize,
-}
-impl Info {
-    pub fn new() -> Self {
-        Default::default()
-    }
-}
-
-/// Struct with required information's to work
-pub struct ZeroedFiles {
-    text_messages: Messages,
-    information: Info,
-    zeroed_files: Vec<FileEntry>,
-    directories: Directories,
-    allowed_extensions: Extensions,
-    excluded_items: ExcludedItems,
-    recursive_search: bool,
-    delete_method: DeleteMethod,
-    stopped_search: bool,
-    minimal_file_size: u64,
-    maximal_file_size: u64,
-    files_to_check: Vec<FileEntry>,
-}
-
-impl ZeroedFiles {
-    pub fn new() -> Self {
-        Self {
-            text_messages: Messages::new(),
-            information: Info::new(),
-            recursive_search: true,
-            allowed_extensions: Extensions::new(),
-            directories: Directories::new(),
-            excluded_items: ExcludedItems::new(),
-            zeroed_files: vec![],
-            delete_method: DeleteMethod::None,
-            stopped_search: false,
-            minimal_file_size: 8192,
-            maximal_file_size: u64::MAX,
-            files_to_check: Vec::with_capacity(1024),
-        }
-    }
-
-    pub fn find_zeroed_files(&mut self, stop_receiver: Option<&Receiver<()>>, progress_sender: Option<&futures::channel::mpsc::UnboundedSender<ProgressData>>) {
-        self.directories.optimize_directories(self.recursive_search, &mut self.text_messages);
-        if !self.check_files(stop_receiver, progress_sender) {
-            self.stopped_search = true;
-            return;
-        }
-        if !self.check_for_zeroed_files(stop_receiver, progress_sender) {
-            self.stopped_search = true;
-            return;
-        }
-        self.delete_files();
-        self.debug_print();
-    }
-
-    pub fn get_stopped_search(&self) -> bool {
-        self.stopped_search
-    }
-
-    pub const fn get_zeroed_files(&self) -> &Vec<FileEntry> {
-        &self.zeroed_files
-    }
-
-    pub const fn get_text_messages(&self) -> &Messages {
-        &self.text_messages
-    }
-
-    pub const fn get_information(&self) -> &Info {
-        &self.information
-    }
-
-    pub fn set_delete_method(&mut self, delete_method: DeleteMethod) {
-        self.delete_method = delete_method;
-    }
-
-    pub fn set_minimal_file_size(&mut self, minimal_file_size: u64) {
-        self.minimal_file_size = match minimal_file_size {
-            0 => 1,
-            t => t,
-        };
-    }
-    pub fn set_maximal_file_size(&mut self, maximal_file_size: u64) {
-        self.maximal_file_size = match maximal_file_size {
-            0 => 1,
-            t => t,
-        };
-    }
-
-    pub fn set_recursive_search(&mut self, recursive_search: bool) {
-        self.recursive_search = recursive_search;
-    }
-
-    pub fn set_included_directory(&mut self, included_directory: Vec<PathBuf>) -> bool {
-        self.directories.set_included_directory(included_directory, &mut self.text_messages)
-    }
-
-    pub fn set_excluded_directory(&mut self, excluded_directory: Vec<PathBuf>) {
-        self.directories.set_excluded_directory(excluded_directory, &mut self.text_messages);
-    }
-    pub fn set_allowed_extensions(&mut self, allowed_extensions: String) {
-        self.allowed_extensions.set_allowed_extensions(allowed_extensions, &mut self.text_messages);
-    }
-
-    pub fn set_excluded_items(&mut self, excluded_items: Vec<String>) {
-        self.excluded_items.set_excluded_items(excluded_items, &mut self.text_messages);
-    }
-
-    /// Check files for files which have 0
-    fn check_files(&mut self, stop_receiver: Option<&Receiver<()>>, progress_sender: Option<&futures::channel::mpsc::UnboundedSender<ProgressData>>) -> bool {
-        let start_time: SystemTime = SystemTime::now();
-        let mut folders_to_check: Vec<PathBuf> = Vec::with_capacity(1024 * 2); // This should be small enough too not see to big difference and big enough to store most of paths without needing to resize vector
-
-        // Add root folders for finding
-        for id in &self.directories.included_directories {
-            folders_to_check.push(id.clone());
-        }
-
-        //// PROGRESS THREAD START
-        const LOOP_DURATION: u32 = 200; //in ms
-        let progress_thread_run = Arc::new(AtomicBool::new(true));
-
-        let atomic_file_counter = Arc::new(AtomicUsize::new(0));
-
-        let progress_thread_handle;
-        if let Some(progress_sender) = progress_sender {
-            let progress_send = progress_sender.clone();
-            let progress_thread_run = progress_thread_run.clone();
-            let atomic_file_counter = atomic_file_counter.clone();
-            progress_thread_handle = thread::spawn(move || loop {
-                progress_send
-                    .unbounded_send(ProgressData {
-                        current_stage: 0,
-                        max_stage: 1,
-                        files_checked: atomic_file_counter.load(Ordering::Relaxed) as usize,
-                        files_to_check: 0,
-                    })
-                    .unwrap();
-                if !progress_thread_run.load(Ordering::Relaxed) {
-                    break;
-                }
-                sleep(Duration::from_millis(LOOP_DURATION as u64));
-            });
-        } else {
-            progress_thread_handle = thread::spawn(|| {});
-        }
-        //// PROGRESS THREAD END
-        while !folders_to_check.is_empty() {
-            if stop_receiver.is_some() && stop_receiver.unwrap().try_recv().is_ok() {
-                // End thread which send info to gui
-                progress_thread_run.store(false, Ordering::Relaxed);
-                progress_thread_handle.join().unwrap();
-                return false;
-            }
-            let current_folder = folders_to_check.pop().unwrap();
-
-            // Read current dir, if permission are denied just go to next
-            let read_dir = match fs::read_dir(&current_folder) {
-                Ok(t) => t,
-                Err(e) => {
-                    self.text_messages.warnings.push(format!("Cannot open dir {}, reason {}", current_folder.display(), e));
-                    continue;
-                } // Permissions denied
-            };
-
-            // Check every sub folder/file/link etc.
-            'dir: for entry in read_dir {
-                let entry_data = match entry {
-                    Ok(t) => t,
-                    Err(e) => {
-                        self.text_messages.warnings.push(format!("Cannot read entry in dir {}, reason {}", current_folder.display(), e));
-                        continue;
-                    } //Permissions denied
-                };
-                let metadata: Metadata = match entry_data.metadata() {
-                    Ok(t) => t,
-                    Err(e) => {
-                        self.text_messages.warnings.push(format!("Cannot read metadata in dir {}, reason {}", current_folder.display(), e));
-                        continue;
-                    } //Permissions denied
-                };
-                if metadata.is_dir() {
-                    if !self.recursive_search {
-                        continue;
-                    }
-
-                    let next_folder = current_folder.join(entry_data.file_name());
-                    if self.directories.is_excluded(&next_folder) || self.excluded_items.is_excluded(&next_folder) {
-                        continue 'dir;
-                    }
-
-                    folders_to_check.push(next_folder);
-                } else if metadata.is_file() {
-                    atomic_file_counter.fetch_add(1, Ordering::Relaxed);
-                    if metadata.len() == 0 || !(self.minimal_file_size..=self.maximal_file_size).contains(&metadata.len()) {
-                        continue 'dir;
-                    }
-
-                    let file_name_lowercase: String = match entry_data.file_name().into_string() {
-                        Ok(t) => t,
-                        Err(_inspected) => {
-                            println!("File {:?} has not valid UTF-8 name", entry_data);
-                            continue 'dir;
-                        }
-                    }
-                    .to_lowercase();
-
-                    // Checking allowed extensions
-                    if !self.allowed_extensions.file_extensions.is_empty() {
-                        let allowed = self.allowed_extensions.file_extensions.iter().any(|e| file_name_lowercase.ends_with((".".to_string() + e.to_lowercase().as_str()).as_str()));
-                        if !allowed {
-                            // Not an allowed extension, ignore it.
-                            continue 'dir;
-                        }
-                    }
-                    // Checking files
-                    let current_file_name = current_folder.join(entry_data.file_name());
-                    if self.excluded_items.is_excluded(&current_file_name) {
-                        continue 'dir;
-                    }
-
-                    // Creating new file entry
-                    let fe: FileEntry = FileEntry {
-                        path: current_file_name.clone(),
-                        size: metadata.len(),
-                        modified_date: match metadata.modified() {
-                            Ok(t) => match t.duration_since(UNIX_EPOCH) {
-                                Ok(d) => d.as_secs(),
-                                Err(_inspected) => {
-                                    self.text_messages.warnings.push(format!("File {} seems to be modified before Unix Epoch.", current_file_name.display()));
-                                    0
-                                }
-                            },
-                            Err(e) => {
-                                self.text_messages.warnings.push(format!("Unable to get modification date from file {}, reason {}", current_file_name.display(), e));
-                                0
-                            } // Permissions Denied
-                        },
-                    };
-
-                    // Adding files to Vector
-                    self.files_to_check.push(fe);
-                }
-            }
-        }
-        // End thread which send info to gui
-        progress_thread_run.store(false, Ordering::Relaxed);
-        progress_thread_handle.join().unwrap();
-
-        Common::print_time(start_time, SystemTime::now(), "check_files".to_string());
-        true
-    }
-
-    /// Check files for files which have 0
-    fn check_for_zeroed_files(&mut self, stop_receiver: Option<&Receiver<()>>, progress_sender: Option<&futures::channel::mpsc::UnboundedSender<ProgressData>>) -> bool {
-        let start_time: SystemTime = SystemTime::now();
-
-        //// PROGRESS THREAD START
-        const LOOP_DURATION: u32 = 200; //in ms
-        let progress_thread_run = Arc::new(AtomicBool::new(true));
-
-        let atomic_file_counter = Arc::new(AtomicUsize::new(0));
-
-        let progress_thread_handle;
-        if let Some(progress_sender) = progress_sender {
-            let progress_send = progress_sender.clone();
-            let progress_thread_run = progress_thread_run.clone();
-            let atomic_file_counter = atomic_file_counter.clone();
-            let files_to_check = self.files_to_check.len();
-            progress_thread_handle = thread::spawn(move || loop {
-                progress_send
-                    .unbounded_send(ProgressData {
-                        current_stage: 1,
-                        max_stage: 1,
-                        files_checked: atomic_file_counter.load(Ordering::Relaxed) as usize,
-                        files_to_check,
-                    })
-                    .unwrap();
-                if !progress_thread_run.load(Ordering::Relaxed) {
-                    break;
-                }
-                sleep(Duration::from_millis(LOOP_DURATION as u64));
-            });
-        } else {
-            progress_thread_handle = thread::spawn(|| {});
-        }
-        //// PROGRESS THREAD END
-
-        self.zeroed_files = self
-            .files_to_check
-            .par_iter()
-            .map(|file_entry| {
-                atomic_file_counter.fetch_add(1, Ordering::Relaxed);
-                if stop_receiver.is_some() && stop_receiver.unwrap().try_recv().is_ok() {
-                    // This will not break
-                    return None;
-                }
-
-                let file_entry = file_entry.clone();
-                let mut n;
-                let mut file_handler: File = match File::open(&file_entry.path) {
-                    Ok(t) => t,
-                    Err(_inspected) => {
-                        return Some(None);
-                    }
-                };
-
-                // First search
-                let mut buffer = [0u8; 64];
-                n = match file_handler.read(&mut buffer) {
-                    Ok(t) => t,
-                    Err(_inspected) => {
-                        return Some(None);
-                    }
-                };
-                for i in buffer[0..n].iter() {
-                    if *i != 0 {
-                        return Some(None);
-                    }
-                }
-                // Second search
-                loop {
-                    let mut buffer = [0u8; 1024 * 32];
-                    n = match file_handler.read(&mut buffer) {
-                        Ok(t) => t,
-                        Err(_inspected) => {
-                            return Some(None);
-                        }
-                    };
-                    for i in buffer[0..n].iter() {
-                        if *i != 0 {
-                            return Some(None);
-                        }
-                    }
-                    if n == 0 {
-                        break;
-                    }
-                }
-
-                Some(Some(file_entry))
-            })
-            .while_some()
-            .filter(|file_entry| file_entry.is_some())
-            .map(|file_entry| file_entry.unwrap())
-            .collect::<Vec<_>>();
-
-        // End thread which send info to gui
-        progress_thread_run.store(false, Ordering::Relaxed);
-        progress_thread_handle.join().unwrap();
-
-        self.information.number_of_zeroed_files = self.zeroed_files.len();
-
-        Common::print_time(start_time, SystemTime::now(), "search for zeroed_files".to_string());
-
-        //Clean unused data
-        self.files_to_check.clear();
-
-        true
-    }
-
-    /// Function to delete files, from filed Vector
-    fn delete_files(&mut self) {
-        let start_time: SystemTime = SystemTime::now();
-
-        match self.delete_method {
-            DeleteMethod::Delete => {
-                for file_entry in &self.zeroed_files {
-                    if fs::remove_file(file_entry.path.clone()).is_err() {
-                        self.text_messages.warnings.push(file_entry.path.display().to_string());
-                    }
-                }
-            }
-            DeleteMethod::None => {
-                //Just do nothing
-            }
-        }
-
-        Common::print_time(start_time, SystemTime::now(), "delete_files".to_string());
-    }
-}
-impl Default for ZeroedFiles {
-    fn default() -> Self {
-        Self::new()
-    }
-}
-
-impl DebugPrint for ZeroedFiles {
-    #[allow(dead_code)]
-    #[allow(unreachable_code)]
-    /// Debugging printing - only available on debug build
-    fn debug_print(&self) {
-        #[cfg(not(debug_assertions))]
-        {
-            return;
-        }
-        println!("---------------DEBUG PRINT---------------");
-        println!("### Information's");
-
-        println!("Errors size - {}", self.text_messages.errors.len());
-        println!("Warnings size - {}", self.text_messages.warnings.len());
-        println!("Messages size - {}", self.text_messages.messages.len());
-        println!("Number of removed files - {}", self.information.number_of_removed_files);
-        println!("Number of failed to remove files - {}", self.information.number_of_failed_to_remove_files);
-
-        println!("### Other");
-
-        println!("Zeroed list size - {}", self.zeroed_files.len());
-        println!("Allowed extensions - {:?}", self.allowed_extensions.file_extensions);
-        println!("Excluded items - {:?}", self.excluded_items.items);
-        println!("Included directories - {:?}", self.directories.included_directories);
-        println!("Excluded directories - {:?}", self.directories.excluded_directories);
-        println!("Recursive search - {}", self.recursive_search.to_string());
-        println!("Delete Method - {:?}", self.delete_method);
-        println!("Minimal File Size - {:?}", self.minimal_file_size);
-        println!("-----------------------------------------");
-    }
-}
-impl SaveResults for ZeroedFiles {
-    fn save_results_to_file(&mut self, file_name: &str) -> bool {
-        let start_time: SystemTime = SystemTime::now();
-        let file_name: String = match file_name {
-            "" => "results.txt".to_string(),
-            k => k.to_string(),
-        };
-
-        let file_handler = match File::create(&file_name) {
-            Ok(t) => t,
-            Err(e) => {
-                self.text_messages.errors.push(format!("Failed to create file {}, reason {}", file_name, e));
-                return false;
-            }
-        };
-        let mut writer = BufWriter::new(file_handler);
-
-        if let Err(e) = writeln!(
-            writer,
-            "Results of searching {:?} with excluded directories {:?} and excluded items {:?}",
-            self.directories.included_directories, self.directories.excluded_directories, self.excluded_items.items
-        ) {
-            self.text_messages.errors.push(format!("Failed to save results to file {}, reason {}", file_name, e));
-            return false;
-        }
-
-        if !self.zeroed_files.is_empty() {
-            writeln!(writer, "Found {} zeroed files.", self.information.number_of_zeroed_files).unwrap();
-            for file_entry in self.zeroed_files.iter() {
-                writeln!(writer, "{}", file_entry.path.display()).unwrap();
-            }
-        } else {
-            write!(writer, "Not found any zeroed files.").unwrap();
-        }
-        Common::print_time(start_time, SystemTime::now(), "save_results_to_file".to_string());
-        true
-    }
-}
-impl PrintResults for ZeroedFiles {
-    /// Print information's about duplicated entries
-    /// Only needed for CLI
-    fn print_results(&self) {
-        let start_time: SystemTime = SystemTime::now();
-        println!("Found {} zeroed files.\n", self.information.number_of_zeroed_files);
-        for file_entry in self.zeroed_files.iter() {
-            println!("{}", file_entry.path.display());
-        }
-
-        Common::print_time(start_time, SystemTime::now(), "print_entries".to_string());
-    }
-}
diff -Naur orig/czkawka_gui/Cargo.toml patched/czkawka_gui/Cargo.toml
--- orig/czkawka_gui/Cargo.toml	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/Cargo.toml	2021-12-04 17:07:36.878961290 +0100
@@ -31,6 +31,9 @@
 # To get image preview
 image = "0.23.14"
 
+# To be able to use custom select
+regex = "1.5.4"
+
 # To get image_hash types
 img_hash = "3.2.0"
 
@@ -46,5 +49,5 @@
 [dependencies.gtk]
 version = "0.14.3"
 default-features = false # just in case
-features = ["v3_22"]
+features = ["v3_24_9"]
 
diff -Naur orig/czkawka_gui/src/compute_results.rs patched/czkawka_gui/src/compute_results.rs
--- orig/czkawka_gui/src/compute_results.rs	1970-01-01 01:00:00.000000000 +0100
+++ patched/czkawka_gui/src/compute_results.rs	2021-12-04 17:07:36.878961290 +0100
@@ -0,0 +1,867 @@
+use std::cell::RefCell;
+use std::collections::HashMap;
+use std::path::PathBuf;
+use std::rc::Rc;
+
+use chrono::NaiveDateTime;
+use glib::Receiver;
+use gtk::prelude::*;
+use humansize::{file_size_opts as options, FileSize};
+
+use czkawka_core::duplicate::CheckingMethod;
+use czkawka_core::same_music::MusicSimilarity;
+use czkawka_core::similar_images;
+
+use crate::gui_data::GuiData;
+use crate::help_functions::*;
+use crate::notebook_enums::*;
+
+pub fn connect_compute_results(gui_data: &GuiData, glib_stop_receiver: Receiver<Message>) {
+    let buttons_search = gui_data.bottom_buttons.buttons_search.clone();
+    let notebook_main = gui_data.main_notebook.notebook_main.clone();
+    let entry_info = gui_data.entry_info.clone();
+    let tree_view_empty_folder_finder = gui_data.main_notebook.tree_view_empty_folder_finder.clone();
+    let tree_view_empty_files_finder = gui_data.main_notebook.tree_view_empty_files_finder.clone();
+    let tree_view_duplicate_finder = gui_data.main_notebook.tree_view_duplicate_finder.clone();
+    let tree_view_similar_images_finder = gui_data.main_notebook.tree_view_similar_images_finder.clone();
+    let tree_view_similar_videos_finder = gui_data.main_notebook.tree_view_similar_videos_finder.clone();
+    let buttons_array = gui_data.bottom_buttons.buttons_array.clone();
+    let text_view_errors = gui_data.text_view_errors.clone();
+    let shared_duplication_state = gui_data.shared_duplication_state.clone();
+    let shared_buttons = gui_data.shared_buttons.clone();
+    let shared_empty_folders_state = gui_data.shared_empty_folders_state.clone();
+    let shared_empty_files_state = gui_data.shared_empty_files_state.clone();
+    let shared_broken_files_state = gui_data.shared_broken_files_state.clone();
+    let tree_view_big_files_finder = gui_data.main_notebook.tree_view_big_files_finder.clone();
+    let tree_view_broken_files = gui_data.main_notebook.tree_view_broken_files.clone();
+    let tree_view_invalid_symlinks = gui_data.main_notebook.tree_view_invalid_symlinks.clone();
+    let shared_big_files_state = gui_data.shared_big_files_state.clone();
+    let shared_same_invalid_symlinks = gui_data.shared_same_invalid_symlinks.clone();
+    let tree_view_temporary_files_finder = gui_data.main_notebook.tree_view_temporary_files_finder.clone();
+    let shared_temporary_files_state = gui_data.shared_temporary_files_state.clone();
+    let shared_similar_images_state = gui_data.shared_similar_images_state.clone();
+    let shared_similar_videos_state = gui_data.shared_similar_videos_state.clone();
+    let tree_view_same_music_finder = gui_data.main_notebook.tree_view_same_music_finder.clone();
+    let shared_same_music_state = gui_data.shared_same_music_state.clone();
+    let buttons_names = gui_data.bottom_buttons.buttons_names.clone();
+    let window_progress = gui_data.progress_window.window_progress.clone();
+    let taskbar_state = gui_data.taskbar_state.clone();
+    let radio_button_similar_hash_size_8 = gui_data.main_notebook.radio_button_similar_hash_size_8.clone();
+    let radio_button_similar_hash_size_16 = gui_data.main_notebook.radio_button_similar_hash_size_16.clone();
+    let radio_button_similar_hash_size_32 = gui_data.main_notebook.radio_button_similar_hash_size_32.clone();
+    let radio_button_similar_hash_size_64 = gui_data.main_notebook.radio_button_similar_hash_size_64.clone();
+    let notebook_upper = gui_data.upper_notebook.notebook_upper.clone();
+    let button_settings = gui_data.header.button_settings.clone();
+    let button_app_info = gui_data.header.button_app_info.clone();
+
+    let main_context = glib::MainContext::default();
+    let _guard = main_context.acquire().unwrap();
+
+    glib_stop_receiver.attach(None, move |msg| {
+        buttons_search.show();
+
+        notebook_main.set_sensitive(true);
+        notebook_upper.set_sensitive(true);
+        button_settings.set_sensitive(true);
+        button_app_info.set_sensitive(true);
+
+        window_progress.hide();
+
+        taskbar_state.borrow().hide();
+
+        let hash_size;
+        if radio_button_similar_hash_size_8.is_active() {
+            hash_size = 8;
+        } else if radio_button_similar_hash_size_16.is_active() {
+            hash_size = 16;
+        } else if radio_button_similar_hash_size_32.is_active() {
+            hash_size = 32;
+        } else if radio_button_similar_hash_size_64.is_active() {
+            hash_size = 64;
+        } else {
+            panic!("No radio button is pressed");
+        }
+
+        match msg {
+            Message::Duplicates(df) => {
+                if df.get_stopped_search() {
+                    entry_info.set_text("Searching for duplicates was stopped by user");
+                } else {
+                    let information = df.get_information();
+                    let text_messages = df.get_text_messages();
+
+                    let duplicates_number: usize;
+                    let duplicates_size: u64;
+                    let duplicates_group: usize;
+
+                    match df.get_check_method() {
+                        CheckingMethod::Name => {
+                            duplicates_number = information.number_of_duplicated_files_by_name;
+                            duplicates_size = 0;
+                            duplicates_group = information.number_of_groups_by_name;
+                            entry_info.set_text(format!("Found {} files in {} groups which have same names.", duplicates_number, duplicates_group).as_str());
+                        }
+                        CheckingMethod::Hash => {
+                            duplicates_number = information.number_of_duplicated_files_by_hash;
+                            duplicates_size = information.lost_space_by_hash;
+                            duplicates_group = information.number_of_groups_by_hash;
+                            entry_info.set_text(format!("Found {} duplicates files in {} groups which took {}.", duplicates_number, duplicates_group, duplicates_size.file_size(options::BINARY).unwrap()).as_str());
+                        }
+                        CheckingMethod::Size => {
+                            duplicates_number = information.number_of_duplicated_files_by_size;
+                            duplicates_size = information.lost_space_by_size;
+                            duplicates_group = information.number_of_groups_by_size;
+                            entry_info.set_text(format!("Found {} duplicates files in {} groups which took {}.", duplicates_number, duplicates_group, duplicates_size.file_size(options::BINARY).unwrap()).as_str());
+                        }
+                        CheckingMethod::None => {
+                            panic!();
+                        }
+                    }
+
+                    entry_info.set_text(format!("Found {} duplicates files in {} groups which took {}.", duplicates_number, duplicates_group, duplicates_size.file_size(options::BINARY).unwrap()).as_str());
+
+                    // Create GUI
+                    {
+                        let list_store = get_list_store(&tree_view_duplicate_finder);
+
+                        match df.get_check_method() {
+                            CheckingMethod::Name => {
+                                let btreemap = df.get_files_sorted_by_names();
+
+                                for (name, vector) in btreemap.iter().rev() {
+                                    // Sort
+                                    let vector = if vector.len() >= 2 {
+                                        let mut vector = vector.clone();
+                                        vector.sort_by_key(|e| {
+                                            let t = split_path(e.path.as_path());
+                                            (t.0, t.1)
+                                        });
+                                        vector
+                                    } else {
+                                        vector.clone()
+                                    };
+
+                                    let values: [(u32, &dyn ToValue); 8] = [
+                                        (ColumnsDuplicates::ActivatableSelectButton as u32, &false),
+                                        (ColumnsDuplicates::SelectionButton as u32, &false),
+                                        (ColumnsDuplicates::Name as u32, &name),
+                                        (ColumnsDuplicates::Path as u32, (&(format!("{} results", vector.len())))),
+                                        (ColumnsDuplicates::Modification as u32, (&"".to_string())), // No text in 3 column
+                                        (ColumnsDuplicates::ModificationAsSecs as u32, (&(0))),      // Not used here
+                                        (ColumnsDuplicates::Color as u32, &(HEADER_ROW_COLOR.to_string())),
+                                        (ColumnsDuplicates::TextColor as u32, &(TEXT_COLOR.to_string())),
+                                    ];
+
+                                    list_store.set(&list_store.append(), &values);
+                                    for entry in vector {
+                                        let (directory, file) = split_path(&entry.path);
+                                        let values: [(u32, &dyn ToValue); 8] = [
+                                            (ColumnsDuplicates::ActivatableSelectButton as u32, &true),
+                                            (ColumnsDuplicates::SelectionButton as u32, &false),
+                                            (ColumnsDuplicates::Name as u32, &file),
+                                            (ColumnsDuplicates::Path as u32, &directory),
+                                            (
+                                                ColumnsDuplicates::Modification as u32,
+                                                &(format!("{} - ({})", NaiveDateTime::from_timestamp(entry.modified_date as i64, 0), entry.size.file_size(options::BINARY).unwrap())),
+                                            ),
+                                            (ColumnsDuplicates::ModificationAsSecs as u32, &(entry.modified_date)),
+                                            (ColumnsDuplicates::Color as u32, &(MAIN_ROW_COLOR.to_string())),
+                                            (ColumnsDuplicates::TextColor as u32, &(TEXT_COLOR.to_string())),
+                                        ];
+                                        list_store.set(&list_store.append(), &values);
+                                    }
+                                }
+                            }
+                            CheckingMethod::Hash => {
+                                let btreemap = df.get_files_sorted_by_hash();
+
+                                for (size, vectors_vector) in btreemap.iter().rev() {
+                                    for vector in vectors_vector {
+                                        // Sort
+                                        let vector = if vector.len() >= 2 {
+                                            let mut vector = vector.clone();
+                                            vector.sort_by_key(|e| {
+                                                let t = split_path(e.path.as_path());
+                                                (t.0, t.1)
+                                            });
+                                            vector
+                                        } else {
+                                            vector.clone()
+                                        };
+
+                                        let values: [(u32, &dyn ToValue); 8] = [
+                                            (ColumnsDuplicates::ActivatableSelectButton as u32, &false),
+                                            (ColumnsDuplicates::SelectionButton as u32, &false),
+                                            (ColumnsDuplicates::Name as u32, &(format!("{} x {} ({} bytes)", vector.len(), size.file_size(options::BINARY).unwrap(), size))),
+                                            (
+                                                ColumnsDuplicates::Path as u32,
+                                                &(format!("{} ({} bytes) lost", ((vector.len() - 1) as u64 * *size as u64).file_size(options::BINARY).unwrap(), (vector.len() - 1) as u64 * *size as u64)),
+                                            ),
+                                            (ColumnsDuplicates::Modification as u32, &"".to_string()), // No text in 3 column
+                                            (ColumnsDuplicates::ModificationAsSecs as u32, &(0)),
+                                            (ColumnsDuplicates::Color as u32, &(HEADER_ROW_COLOR.to_string())),
+                                            (ColumnsDuplicates::TextColor as u32, &(TEXT_COLOR.to_string())),
+                                        ];
+
+                                        list_store.set(&list_store.append(), &values);
+                                        for entry in vector {
+                                            let (directory, file) = split_path(&entry.path);
+
+                                            let values: [(u32, &dyn ToValue); 8] = [
+                                                (ColumnsDuplicates::ActivatableSelectButton as u32, &true),
+                                                (ColumnsDuplicates::SelectionButton as u32, &false),
+                                                (ColumnsDuplicates::Name as u32, &file),
+                                                (ColumnsDuplicates::Path as u32, &directory),
+                                                (ColumnsDuplicates::Modification as u32, &(NaiveDateTime::from_timestamp(entry.modified_date as i64, 0).to_string())),
+                                                (ColumnsDuplicates::ModificationAsSecs as u32, &(entry.modified_date)),
+                                                (ColumnsDuplicates::Color as u32, &(MAIN_ROW_COLOR.to_string())),
+                                                (ColumnsDuplicates::TextColor as u32, &(TEXT_COLOR.to_string())),
+                                            ];
+
+                                            list_store.set(&list_store.append(), &values);
+                                        }
+                                    }
+                                }
+                            }
+                            CheckingMethod::Size => {
+                                let btreemap = df.get_files_sorted_by_size();
+
+                                for (size, vector) in btreemap.iter().rev() {
+                                    // Sort
+                                    let vector = if vector.len() >= 2 {
+                                        let mut vector = vector.clone();
+                                        vector.sort_by_key(|e| {
+                                            let t = split_path(e.path.as_path());
+                                            (t.0, t.1)
+                                        });
+                                        vector
+                                    } else {
+                                        vector.clone()
+                                    };
+                                    let values: [(u32, &dyn ToValue); 8] = [
+                                        (ColumnsDuplicates::ActivatableSelectButton as u32, &false),
+                                        (ColumnsDuplicates::SelectionButton as u32, &false),
+                                        (ColumnsDuplicates::Name as u32, &(format!("{} x {} ({} bytes)", vector.len(), size.file_size(options::BINARY).unwrap(), size))),
+                                        (
+                                            ColumnsDuplicates::Path as u32,
+                                            &(format!("{} ({} bytes) lost", ((vector.len() - 1) as u64 * *size as u64).file_size(options::BINARY).unwrap(), (vector.len() - 1) as u64 * *size as u64)),
+                                        ),
+                                        (ColumnsDuplicates::Modification as u32, &"".to_string()), // No text in 3 column
+                                        (ColumnsDuplicates::ModificationAsSecs as u32, &(0)),      // Not used here
+                                        (ColumnsDuplicates::Color as u32, &(HEADER_ROW_COLOR.to_string())),
+                                        (ColumnsDuplicates::TextColor as u32, &(TEXT_COLOR.to_string())),
+                                    ];
+
+                                    list_store.set(&list_store.append(), &values);
+                                    for entry in vector {
+                                        let (directory, file) = split_path(&entry.path);
+                                        let values: [(u32, &dyn ToValue); 8] = [
+                                            (ColumnsDuplicates::ActivatableSelectButton as u32, &true),
+                                            (ColumnsDuplicates::SelectionButton as u32, &false),
+                                            (ColumnsDuplicates::Name as u32, &file),
+                                            (ColumnsDuplicates::Path as u32, &directory),
+                                            (ColumnsDuplicates::Modification as u32, &(NaiveDateTime::from_timestamp(entry.modified_date as i64, 0).to_string())),
+                                            (ColumnsDuplicates::ModificationAsSecs as u32, &(entry.modified_date)),
+                                            (ColumnsDuplicates::Color as u32, &(MAIN_ROW_COLOR.to_string())),
+                                            (ColumnsDuplicates::TextColor as u32, &(TEXT_COLOR.to_string())),
+                                        ];
+                                        list_store.set(&list_store.append(), &values);
+                                    }
+                                }
+                            }
+                            CheckingMethod::None => {
+                                panic!();
+                            }
+                        }
+
+                        print_text_messages_to_text_view(text_messages, &text_view_errors);
+                    }
+
+                    // Set state
+                    {
+                        *shared_duplication_state.borrow_mut() = df;
+
+                        set_specific_buttons_as_active(&shared_buttons, &NotebookMainEnum::Duplicate, &["save", "delete", "select", "symlink", "hardlink", "move"], duplicates_number > 0);
+
+                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Duplicate).unwrap(), &buttons_array, &buttons_names);
+                    }
+                }
+            }
+            Message::EmptyFolders(ef) => {
+                if ef.get_stopped_search() {
+                    entry_info.set_text("Searching for empty folders was stopped by user");
+                } else {
+                    let information = ef.get_information();
+                    let text_messages = ef.get_text_messages();
+
+                    let empty_folder_number: usize = information.number_of_empty_folders;
+
+                    entry_info.set_text(format!("Found {} empty folders.", empty_folder_number).as_str());
+
+                    // Create GUI
+                    {
+                        let list_store = get_list_store(&tree_view_empty_folder_finder);
+
+                        let hashmap = ef.get_empty_folder_list();
+                        let mut vector = hashmap.keys().cloned().collect::<Vec<PathBuf>>();
+
+                        vector.sort_by_key(|e| {
+                            let t = split_path(e.as_path());
+                            (t.0, t.1)
+                        });
+
+                        for path in vector {
+                            let (directory, file) = split_path(&path);
+                            let values: [(u32, &dyn ToValue); 4] = [
+                                (ColumnsEmptyFolders::SelectionButton as u32, &false),
+                                (ColumnsEmptyFolders::Name as u32, &file),
+                                (ColumnsEmptyFolders::Path as u32, &directory),
+                                (ColumnsEmptyFolders::Modification as u32, &(NaiveDateTime::from_timestamp(hashmap.get(&path).unwrap().modified_date as i64, 0).to_string())),
+                            ];
+                            list_store.set(&list_store.append(), &values);
+                        }
+                        print_text_messages_to_text_view(text_messages, &text_view_errors);
+                    }
+
+                    // Set state
+                    {
+                        *shared_empty_folders_state.borrow_mut() = ef;
+
+                        set_specific_buttons_as_active(&shared_buttons, &NotebookMainEnum::EmptyDirectories, &["save", "delete", "select", "move"], empty_folder_number > 0);
+
+                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyDirectories).unwrap(), &buttons_array, &buttons_names);
+                    }
+                }
+            }
+            Message::EmptyFiles(vf) => {
+                if vf.get_stopped_search() {
+                    entry_info.set_text("Searching for empty files was stopped by user");
+                } else {
+                    let information = vf.get_information();
+                    let text_messages = vf.get_text_messages();
+
+                    let empty_files_number: usize = information.number_of_empty_files;
+
+                    entry_info.set_text(format!("Found {} empty files.", empty_files_number).as_str());
+
+                    // Create GUI
+                    {
+                        let list_store = get_list_store(&tree_view_empty_files_finder);
+
+                        let vector = vf.get_empty_files();
+
+                        // Sort
+                        let mut vector = vector.clone();
+                        vector.sort_by_key(|e| {
+                            let t = split_path(e.path.as_path());
+                            (t.0, t.1)
+                        });
+
+                        for file_entry in vector {
+                            let (directory, file) = split_path(&file_entry.path);
+                            let values: [(u32, &dyn ToValue); 4] = [
+                                (ColumnsEmptyFiles::SelectionButton as u32, &false),
+                                (ColumnsEmptyFiles::Name as u32, &file),
+                                (ColumnsEmptyFiles::Path as u32, &directory),
+                                (ColumnsEmptyFiles::Modification as u32, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string())),
+                            ];
+                            list_store.set(&list_store.append(), &values);
+                        }
+                        print_text_messages_to_text_view(text_messages, &text_view_errors);
+                    }
+
+                    // Set state
+                    {
+                        *shared_empty_files_state.borrow_mut() = vf;
+
+                        set_specific_buttons_as_active(&shared_buttons, &NotebookMainEnum::EmptyFiles, &["save", "delete", "select", "move"], empty_files_number > 0);
+
+                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyFiles).unwrap(), &buttons_array, &buttons_names);
+                    }
+                }
+            }
+            Message::BigFiles(bf) => {
+                if bf.get_stopped_search() {
+                    entry_info.set_text("Searching for big files was stopped by user");
+                } else {
+                    let information = bf.get_information();
+                    let text_messages = bf.get_text_messages();
+
+                    let biggest_files_number: usize = information.number_of_real_files;
+
+                    entry_info.set_text(format!("Found {} biggest files.", biggest_files_number).as_str());
+
+                    // Create GUI
+                    {
+                        let list_store = get_list_store(&tree_view_big_files_finder);
+
+                        let btreemap = bf.get_big_files();
+
+                        for (size, vector) in btreemap.iter().rev() {
+                            let mut vector = vector.clone();
+                            vector.sort_by_key(|e| {
+                                let t = split_path(e.path.as_path());
+                                (t.0, t.1)
+                            });
+                            for file_entry in vector {
+                                let (directory, file) = split_path(&file_entry.path);
+                                let values: [(u32, &dyn ToValue); 5] = [
+                                    (ColumnsBigFiles::SelectionButton as u32, &false),
+                                    (ColumnsBigFiles::Size as u32, &(format!("{} ({} bytes)", size.file_size(options::BINARY).unwrap(), size))),
+                                    (ColumnsBigFiles::Name as u32, &file),
+                                    (ColumnsBigFiles::Path as u32, &directory),
+                                    (ColumnsBigFiles::Modification as u32, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string())),
+                                ];
+                                list_store.set(&list_store.append(), &values);
+                            }
+                        }
+                        print_text_messages_to_text_view(text_messages, &text_view_errors);
+                    }
+
+                    // Set state
+                    {
+                        *shared_big_files_state.borrow_mut() = bf;
+
+                        set_specific_buttons_as_active(&shared_buttons, &NotebookMainEnum::BigFiles, &["save", "delete", "select", "move"], biggest_files_number > 0);
+
+                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BigFiles).unwrap(), &buttons_array, &buttons_names);
+                    }
+                }
+            }
+            Message::Temporary(tf) => {
+                if tf.get_stopped_search() {
+                    entry_info.set_text("Searching for temporary files was stopped by user");
+                } else {
+                    let information = tf.get_information();
+                    let text_messages = tf.get_text_messages();
+
+                    let temporary_files_number: usize = information.number_of_temporary_files;
+
+                    entry_info.set_text(format!("Found {} temporary files.", temporary_files_number).as_str());
+
+                    // Create GUI
+                    {
+                        let list_store = get_list_store(&tree_view_temporary_files_finder);
+
+                        let vector = tf.get_temporary_files();
+
+                        // Sort
+                        let mut vector = vector.clone();
+                        vector.sort_by_key(|e| {
+                            let t = split_path(e.path.as_path());
+                            (t.0, t.1)
+                        });
+
+                        for file_entry in vector {
+                            let (directory, file) = split_path(&file_entry.path);
+                            let values: [(u32, &dyn ToValue); 4] = [
+                                (ColumnsTemporaryFiles::SelectionButton as u32, &false),
+                                (ColumnsTemporaryFiles::Name as u32, &file),
+                                (ColumnsTemporaryFiles::Path as u32, &directory),
+                                (ColumnsTemporaryFiles::Modification as u32, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string())),
+                            ];
+                            list_store.set(&list_store.append(), &values);
+                        }
+                        print_text_messages_to_text_view(text_messages, &text_view_errors);
+                    }
+
+                    // Set state
+                    {
+                        *shared_temporary_files_state.borrow_mut() = tf;
+
+                        set_specific_buttons_as_active(&shared_buttons, &NotebookMainEnum::Temporary, &["save", "delete", "select", "move"], temporary_files_number > 0);
+
+                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Temporary).unwrap(), &buttons_array, &buttons_names);
+                    }
+                }
+            }
+            Message::SimilarImages(sf) => {
+                if sf.get_stopped_search() {
+                    entry_info.set_text("Searching for similar images was stopped by user");
+                } else {
+                    //let information = sf.get_information();
+                    let text_messages = sf.get_text_messages();
+
+                    let base_images_size = sf.get_similar_images().len();
+
+                    entry_info.set_text(format!("Found similar pictures for {} images.", base_images_size).as_str());
+
+                    // Create GUI
+                    {
+                        let list_store = get_list_store(&tree_view_similar_images_finder);
+
+                        let vec_struct_similar = sf.get_similar_images();
+
+                        for vec_file_entry in vec_struct_similar.iter() {
+                            // Sort
+                            let vec_file_entry = if vec_file_entry.len() >= 2 {
+                                let mut vec_file_entry = vec_file_entry.clone();
+                                vec_file_entry.sort_by_key(|e| {
+                                    let t = split_path(e.path.as_path());
+                                    (t.0, t.1)
+                                });
+                                vec_file_entry
+                            } else {
+                                vec_file_entry.clone()
+                            };
+
+                            // Header
+                            let values: [(u32, &dyn ToValue); 12] = [
+                                (ColumnsSimilarImages::ActivatableSelectButton as u32, &false),
+                                (ColumnsSimilarImages::SelectionButton as u32, &false),
+                                (ColumnsSimilarImages::Similarity as u32, &"".to_string()),
+                                (ColumnsSimilarImages::Size as u32, &"".to_string()),
+                                (ColumnsSimilarImages::SizeAsBytes as u32, &(0)),
+                                (ColumnsSimilarImages::Dimensions as u32, &"".to_string()),
+                                (ColumnsSimilarImages::Name as u32, &"".to_string()),
+                                (ColumnsSimilarImages::Path as u32, &"".to_string()),
+                                (ColumnsSimilarImages::Modification as u32, &"".to_string()),
+                                (ColumnsSimilarImages::ModificationAsSecs as u32, &(0)),
+                                (ColumnsSimilarImages::Color as u32, &(HEADER_ROW_COLOR.to_string())),
+                                (ColumnsSimilarImages::TextColor as u32, &(TEXT_COLOR.to_string())),
+                            ];
+                            list_store.set(&list_store.append(), &values);
+
+                            // Meat
+                            for file_entry in vec_file_entry.iter() {
+                                let (directory, file) = split_path(&file_entry.path);
+                                let values: [(u32, &dyn ToValue); 12] = [
+                                    (ColumnsSimilarImages::ActivatableSelectButton as u32, &true),
+                                    (ColumnsSimilarImages::SelectionButton as u32, &false),
+                                    (ColumnsSimilarImages::Similarity as u32, &(similar_images::get_string_from_similarity(&file_entry.similarity, hash_size).to_string())),
+                                    (ColumnsSimilarImages::Size as u32, &file_entry.size.file_size(options::BINARY).unwrap()),
+                                    (ColumnsSimilarImages::SizeAsBytes as u32, &file_entry.size),
+                                    (ColumnsSimilarImages::Dimensions as u32, &file_entry.dimensions),
+                                    (ColumnsSimilarImages::Name as u32, &file),
+                                    (ColumnsSimilarImages::Path as u32, &directory),
+                                    (ColumnsSimilarImages::Modification as u32, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string())),
+                                    (ColumnsSimilarImages::ModificationAsSecs as u32, &(file_entry.modified_date)),
+                                    (ColumnsSimilarImages::Color as u32, &(MAIN_ROW_COLOR.to_string())),
+                                    (ColumnsSimilarImages::TextColor as u32, &(TEXT_COLOR.to_string())),
+                                ];
+                                list_store.set(&list_store.append(), &values);
+                            }
+                        }
+
+                        print_text_messages_to_text_view(text_messages, &text_view_errors);
+                    }
+
+                    // Set state
+                    {
+                        *shared_similar_images_state.borrow_mut() = sf;
+
+                        set_specific_buttons_as_active(&shared_buttons, &NotebookMainEnum::SimilarImages, &["save", "delete", "select", "symlink", "hardlink", "move"], base_images_size > 0);
+
+                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SimilarImages).unwrap(), &buttons_array, &buttons_names);
+                    }
+                }
+            }
+            Message::SimilarVideos(ff) => {
+                if ff.get_stopped_search() {
+                    entry_info.set_text("Searching for similar videos was stopped by user");
+                } else {
+                    //let information = ff.get_information();
+                    let text_messages = ff.get_text_messages();
+
+                    let base_videos_size = ff.get_similar_videos().len();
+
+                    entry_info.set_text(format!("Found similar videos for {} videos.", base_videos_size).as_str());
+
+                    // Create GUI
+                    {
+                        let list_store = get_list_store(&tree_view_similar_videos_finder);
+
+                        let vec_struct_similar = ff.get_similar_videos();
+
+                        for vec_file_entry in vec_struct_similar.iter() {
+                            // Sort
+                            let vec_file_entry = if vec_file_entry.len() >= 2 {
+                                let mut vec_file_entry = vec_file_entry.clone();
+                                vec_file_entry.sort_by_key(|e| {
+                                    let t = split_path(e.path.as_path());
+                                    (t.0, t.1)
+                                });
+                                vec_file_entry
+                            } else {
+                                vec_file_entry.clone()
+                            };
+
+                            // Header
+                            let values: [(u32, &dyn ToValue); 10] = [
+                                (ColumnsSimilarVideos::ActivatableSelectButton as u32, &false),
+                                (ColumnsSimilarVideos::SelectionButton as u32, &false),
+                                (ColumnsSimilarVideos::Size as u32, &"".to_string()),
+                                (ColumnsSimilarVideos::SizeAsBytes as u32, &(0)),
+                                (ColumnsSimilarVideos::Name as u32, &"".to_string()),
+                                (ColumnsSimilarVideos::Path as u32, &"".to_string()),
+                                (ColumnsSimilarVideos::Modification as u32, &"".to_string()),
+                                (ColumnsSimilarVideos::ModificationAsSecs as u32, &(0)),
+                                (ColumnsSimilarVideos::Color as u32, &(HEADER_ROW_COLOR.to_string())),
+                                (ColumnsSimilarVideos::TextColor as u32, &(TEXT_COLOR.to_string())),
+                            ];
+                            list_store.set(&list_store.append(), &values);
+
+                            // Meat
+                            for file_entry in vec_file_entry.iter() {
+                                let (directory, file) = split_path(&file_entry.path);
+                                let values: [(u32, &dyn ToValue); 10] = [
+                                    (ColumnsSimilarVideos::ActivatableSelectButton as u32, &true),
+                                    (ColumnsSimilarVideos::SelectionButton as u32, &false),
+                                    (ColumnsSimilarVideos::Size as u32, &file_entry.size.file_size(options::BINARY).unwrap()),
+                                    (ColumnsSimilarVideos::SizeAsBytes as u32, &file_entry.size),
+                                    (ColumnsSimilarVideos::Name as u32, &file),
+                                    (ColumnsSimilarVideos::Path as u32, &directory),
+                                    (ColumnsSimilarVideos::Modification as u32, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string())),
+                                    (ColumnsSimilarVideos::ModificationAsSecs as u32, &(file_entry.modified_date)),
+                                    (ColumnsSimilarVideos::Color as u32, &(MAIN_ROW_COLOR.to_string())),
+                                    (ColumnsSimilarVideos::TextColor as u32, &(TEXT_COLOR.to_string())),
+                                ];
+                                list_store.set(&list_store.append(), &values);
+                            }
+                        }
+
+                        print_text_messages_to_text_view(text_messages, &text_view_errors);
+                    }
+
+                    // Set state
+                    {
+                        *shared_similar_videos_state.borrow_mut() = ff;
+
+                        set_specific_buttons_as_active(&shared_buttons, &NotebookMainEnum::SimilarVideos, &["save", "delete", "select", "symlink", "hardlink", "move"], base_videos_size > 0);
+
+                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SimilarVideos).unwrap(), &buttons_array, &buttons_names);
+                    }
+                }
+            }
+            Message::SameMusic(mf) => {
+                if mf.get_stopped_search() {
+                    entry_info.set_text("Searching for same music was stopped by user");
+                } else {
+                    let information = mf.get_information();
+                    let text_messages = mf.get_text_messages();
+
+                    let same_music_number: usize = information.number_of_duplicates_music_files;
+
+                    entry_info.set_text(format!("Found {} duplicated music files.", same_music_number).as_str());
+
+                    // Create GUI
+                    {
+                        let list_store = get_list_store(&tree_view_same_music_finder);
+
+                        let vector = mf.get_duplicated_music_entries();
+
+                        let music_similarity = *mf.get_music_similarity();
+
+                        let is_title = (MusicSimilarity::TITLE & music_similarity) != MusicSimilarity::NONE;
+                        let is_artist = (MusicSimilarity::ARTIST & music_similarity) != MusicSimilarity::NONE;
+                        let is_album_title = (MusicSimilarity::ALBUM_TITLE & music_similarity) != MusicSimilarity::NONE;
+                        let is_album_artist = (MusicSimilarity::ALBUM_ARTIST & music_similarity) != MusicSimilarity::NONE;
+                        let is_year = (MusicSimilarity::YEAR & music_similarity) != MusicSimilarity::NONE;
+
+                        let text: String = "-----".to_string();
+
+                        for vec_file_entry in vector {
+                            // Sort
+                            let vec_file_entry = if vec_file_entry.len() >= 2 {
+                                let mut vec_file_entry = vec_file_entry.clone();
+                                vec_file_entry.sort_by_key(|e| {
+                                    let t = split_path(e.path.as_path());
+                                    (t.0, t.1)
+                                });
+                                vec_file_entry
+                            } else {
+                                vec_file_entry.clone()
+                            };
+
+                            let values: [(u32, &dyn ToValue); 15] = [
+                                (ColumnsSameMusic::ActivatableSelectButton as u32, &false),
+                                (ColumnsSameMusic::SelectionButton as u32, &false),
+                                (ColumnsSameMusic::Size as u32, &"".to_string()),
+                                (ColumnsSameMusic::SizeAsBytes as u32, &(0)),
+                                (ColumnsSameMusic::Name as u32, &"".to_string()),
+                                (ColumnsSameMusic::Path as u32, &"".to_string()),
+                                (
+                                    ColumnsSameMusic::Title as u32,
+                                    &(match is_title {
+                                        true => text.clone(),
+                                        false => "".to_string(),
+                                    }),
+                                ),
+                                (
+                                    ColumnsSameMusic::Artist as u32,
+                                    &(match is_artist {
+                                        true => text.clone(),
+                                        false => "".to_string(),
+                                    }),
+                                ),
+                                (
+                                    ColumnsSameMusic::AlbumTitle as u32,
+                                    &(match is_album_title {
+                                        true => text.clone(),
+                                        false => "".to_string(),
+                                    }),
+                                ),
+                                (
+                                    ColumnsSameMusic::AlbumArtist as u32,
+                                    &(match is_album_artist {
+                                        true => text.clone(),
+                                        false => "".to_string(),
+                                    }),
+                                ),
+                                (
+                                    ColumnsSameMusic::Year as u32,
+                                    &(match is_year {
+                                        true => text.clone(),
+                                        false => "".to_string(),
+                                    }),
+                                ),
+                                (ColumnsSameMusic::Modification as u32, &"".to_string()),
+                                (ColumnsSameMusic::ModificationAsSecs as u32, &(0)),
+                                (ColumnsSameMusic::Color as u32, &(HEADER_ROW_COLOR.to_string())),
+                                (ColumnsSameMusic::TextColor as u32, &(TEXT_COLOR.to_string())),
+                            ];
+                            list_store.set(&list_store.append(), &values);
+                            for file_entry in vec_file_entry {
+                                let (directory, file) = split_path(&file_entry.path);
+                                let values: [(u32, &dyn ToValue); 15] = [
+                                    (ColumnsSameMusic::ActivatableSelectButton as u32, &true),
+                                    (ColumnsSameMusic::SelectionButton as u32, &false),
+                                    (ColumnsSameMusic::Size as u32, &file_entry.size.file_size(options::BINARY).unwrap()),
+                                    (ColumnsSameMusic::SizeAsBytes as u32, &file_entry.size),
+                                    (ColumnsSameMusic::Name as u32, &file),
+                                    (ColumnsSameMusic::Path as u32, &directory),
+                                    (ColumnsSameMusic::Title as u32, &file_entry.title),
+                                    (ColumnsSameMusic::Artist as u32, &file_entry.artist),
+                                    (ColumnsSameMusic::AlbumTitle as u32, &file_entry.album_title),
+                                    (ColumnsSameMusic::AlbumArtist as u32, &file_entry.album_artist),
+                                    (ColumnsSameMusic::Year as u32, &file_entry.year.to_string()),
+                                    (ColumnsSameMusic::Modification as u32, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string())),
+                                    (ColumnsSameMusic::ModificationAsSecs as u32, &(file_entry.modified_date)),
+                                    (ColumnsSameMusic::Color as u32, &(MAIN_ROW_COLOR.to_string())),
+                                    (ColumnsSameMusic::TextColor as u32, &(TEXT_COLOR.to_string())),
+                                ];
+                                list_store.set(&list_store.append(), &values);
+                            }
+                        }
+                        print_text_messages_to_text_view(text_messages, &text_view_errors);
+                    }
+
+                    // Set state
+                    {
+                        *shared_same_music_state.borrow_mut() = mf;
+
+                        set_specific_buttons_as_active(&shared_buttons, &NotebookMainEnum::SameMusic, &["save", "delete", "select", "symlink", "hardlink", "move"], same_music_number > 0);
+
+                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SameMusic).unwrap(), &buttons_array, &buttons_names);
+                    }
+                }
+            }
+            Message::InvalidSymlinks(ifs) => {
+                if ifs.get_stopped_search() {
+                    entry_info.set_text("Searching for invalid symlink was stopped by user");
+                } else {
+                    let information = ifs.get_information();
+                    let text_messages = ifs.get_text_messages();
+
+                    let invalid_symlinks: usize = information.number_of_invalid_symlinks;
+
+                    entry_info.set_text(format!("Found {} invalid symlinks.", invalid_symlinks).as_str());
+
+                    // Create GUI
+                    {
+                        let list_store = get_list_store(&tree_view_invalid_symlinks);
+
+                        let vector = ifs.get_invalid_symlinks();
+
+                        // Sort
+                        let mut vector = vector.clone();
+
+                        vector.sort_by_key(|e| {
+                            let t = split_path(e.symlink_path.as_path());
+                            (t.0, t.1)
+                        });
+
+                        for file_entry in vector {
+                            let (directory, file) = split_path(&file_entry.symlink_path);
+                            let values: [(u32, &dyn ToValue); 6] = [
+                                (ColumnsInvalidSymlinks::SelectionButton as u32, &false),
+                                (ColumnsInvalidSymlinks::Name as u32, &file),
+                                (ColumnsInvalidSymlinks::Path as u32, &directory),
+                                (ColumnsInvalidSymlinks::DestinationPath as u32, &file_entry.destination_path.to_string_lossy().to_string()),
+                                (ColumnsInvalidSymlinks::TypeOfError as u32, &get_text_from_invalid_symlink_cause(&file_entry.type_of_error)),
+                                (ColumnsInvalidSymlinks::Modification as u32, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string())),
+                            ];
+                            list_store.set(&list_store.append(), &values);
+                        }
+                        print_text_messages_to_text_view(text_messages, &text_view_errors);
+                    }
+
+                    // Set state
+                    {
+                        *shared_same_invalid_symlinks.borrow_mut() = ifs;
+
+                        set_specific_buttons_as_active(&shared_buttons, &NotebookMainEnum::Symlinks, &["save", "delete", "select", "move"], invalid_symlinks > 0);
+
+                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Symlinks).unwrap(), &buttons_array, &buttons_names);
+                    }
+                }
+            }
+            Message::BrokenFiles(br) => {
+                if br.get_stopped_search() {
+                    entry_info.set_text("Searching for broken files was stopped by user");
+                } else {
+                    let information = br.get_information();
+                    let text_messages = br.get_text_messages();
+
+                    let broken_files_number: usize = information.number_of_broken_files;
+
+                    entry_info.set_text(format!("Found {} broken files.", broken_files_number).as_str());
+
+                    // Create GUI
+                    {
+                        let list_store = get_list_store(&tree_view_broken_files);
+
+                        let vector = br.get_broken_files();
+
+                        // Sort
+                        let mut vector = vector.clone();
+                        vector.sort_by_key(|e| {
+                            let t = split_path(e.path.as_path());
+                            (t.0, t.1)
+                        });
+
+                        for file_entry in vector {
+                            let (directory, file) = split_path(&file_entry.path);
+                            let values: [(u32, &dyn ToValue); 5] = [
+                                (ColumnsBrokenFiles::SelectionButton as u32, &false),
+                                (ColumnsBrokenFiles::Name as u32, &file),
+                                (ColumnsBrokenFiles::Path as u32, &directory),
+                                (ColumnsBrokenFiles::ErrorType as u32, &file_entry.error_string),
+                                (ColumnsBrokenFiles::Modification as u32, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string())),
+                            ];
+                            list_store.set(&list_store.append(), &values);
+                        }
+                        print_text_messages_to_text_view(text_messages, &text_view_errors);
+                    }
+
+                    // Set state
+                    {
+                        *shared_broken_files_state.borrow_mut() = br;
+
+                        set_specific_buttons_as_active(&shared_buttons, &NotebookMainEnum::BrokenFiles, &["save", "delete", "select", "move"], broken_files_number > 0);
+
+                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BrokenFiles).unwrap(), &buttons_array, &buttons_names);
+                    }
+                }
+            }
+        }
+        // Returning false here would close the receiver and have senders fail
+        glib::Continue(true)
+    });
+}
+
+fn set_specific_buttons_as_active(buttons_array: &Rc<RefCell<HashMap<NotebookMainEnum, HashMap<String, bool>>>>, notebook_enum: &NotebookMainEnum, buttons: &[&str], value_to_set: bool) {
+    for i in buttons {
+        *buttons_array.borrow_mut().get_mut(notebook_enum).unwrap().get_mut(*i).unwrap() = value_to_set;
+    }
+}
diff -Naur orig/czkawka_gui/src/connect_about_buttons.rs patched/czkawka_gui/src/connect_about_buttons.rs
--- orig/czkawka_gui/src/connect_about_buttons.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_about_buttons.rs	2021-12-04 17:07:36.878961290 +0100
@@ -1,6 +1,7 @@
-use crate::gui_data::GuiData;
 use gtk::prelude::*;
 
+use crate::gui_data::GuiData;
+
 const SPONSOR_SITE: &str = "https://github.com/sponsors/qarmin";
 const REPOSITORY_SITE: &str = "https://github.com/qarmin/czkawka";
 const INSTRUCTION_SITE: &str = "https://github.com/qarmin/czkawka/blob/master/instructions/Instruction.md";
diff -Naur orig/czkawka_gui/src/connect_button_delete.rs patched/czkawka_gui/src/connect_button_delete.rs
--- orig/czkawka_gui/src/connect_button_delete.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_button_delete.rs	2021-12-04 17:07:36.878961290 +0100
@@ -1,189 +1,90 @@
-use crate::gui_data::GuiData;
-use crate::help_functions::*;
-use crate::notebook_enums::*;
-use gtk::prelude::*;
-use gtk::Align;
 use std::collections::BTreeMap;
 use std::fs;
 use std::fs::Metadata;
 
+use gtk::prelude::*;
+use gtk::{Align, CheckButton, Dialog, ResponseType, TextView};
+
+use crate::gui_data::GuiData;
+use crate::help_functions::*;
+use crate::notebook_enums::*;
+use crate::validate_notebook_data;
+
 // TODO add support for checking if really symlink doesn't point to correct directory/file
 
 pub fn connect_button_delete(gui_data: &GuiData) {
-    let gui_data = gui_data.clone();
     let buttons_delete = gui_data.bottom_buttons.buttons_delete.clone();
-    let tree_view_duplicate_finder = gui_data.main_notebook.tree_view_duplicate_finder.clone();
+
+    let gui_data = gui_data.clone(); // TODO this maybe can be replaced, not sure if worth to do it
+
+    buttons_delete.connect_clicked(move |_| {
+        glib::MainContext::default().spawn_local(delete_things(gui_data.clone()));
+    });
+}
+
+pub async fn delete_things(gui_data: GuiData) {
+    validate_notebook_data(&gui_data); // TODO, disable this - only used as test if ever
+
     let notebook_main = gui_data.main_notebook.notebook_main.clone();
     let window_main = gui_data.window_main.clone();
-    let tree_view_empty_folder_finder = gui_data.main_notebook.tree_view_empty_folder_finder.clone();
-    let tree_view_big_files_finder = gui_data.main_notebook.tree_view_big_files_finder.clone();
-    let tree_view_empty_files_finder = gui_data.main_notebook.tree_view_empty_files_finder.clone();
-    let tree_view_temporary_files_finder = gui_data.main_notebook.tree_view_temporary_files_finder.clone();
-    let tree_view_similar_images_finder = gui_data.main_notebook.tree_view_similar_images_finder.clone();
-    let tree_view_zeroed_files_finder = gui_data.main_notebook.tree_view_zeroed_files_finder.clone();
-    let tree_view_same_music_finder = gui_data.main_notebook.tree_view_same_music_finder.clone();
-    let tree_view_invalid_symlinks = gui_data.main_notebook.tree_view_invalid_symlinks.clone();
-    let tree_view_broken_files = gui_data.main_notebook.tree_view_broken_files.clone();
     let check_button_settings_confirm_deletion = gui_data.settings.check_button_settings_confirm_deletion.clone();
     let check_button_settings_confirm_group_deletion = gui_data.settings.check_button_settings_confirm_group_deletion.clone();
     let image_preview_similar_images = gui_data.main_notebook.image_preview_similar_images.clone();
+    let image_preview_duplicates = gui_data.main_notebook.image_preview_duplicates.clone();
 
-    buttons_delete.connect_clicked(move |_| {
-        if !check_if_can_delete_files(&check_button_settings_confirm_deletion, &window_main) {
-            return;
+    let main_tree_views = gui_data.main_notebook.get_main_tree_views();
+
+    let check_button_settings_use_trash = gui_data.settings.check_button_settings_use_trash.clone();
+
+    let preview_path = gui_data.preview_path.clone();
+
+    let text_view_errors = gui_data.text_view_errors.clone();
+    if !check_if_can_delete_files(&check_button_settings_confirm_deletion, &window_main).await {
+        return;
+    }
+
+    let nb_number = notebook_main.current_page().unwrap();
+    let tree_view = &main_tree_views[nb_number as usize];
+    let nb_object = &NOTEBOOKS_INFOS[nb_number as usize];
+
+    if let Some(column_color) = nb_object.column_color {
+        if !check_button_settings_confirm_group_deletion.is_active() || !check_if_deleting_all_files_in_group(tree_view, column_color, nb_object.column_selection, &window_main, &check_button_settings_confirm_group_deletion).await {
+            tree_remove(
+                &tree_view.clone(),
+                nb_object.column_name,
+                nb_object.column_path,
+                column_color,
+                nb_object.column_selection,
+                &check_button_settings_use_trash,
+                &text_view_errors,
+            );
         }
+    } else {
+        if nb_number == NotebookMainEnum::EmptyDirectories as u32 {
+            empty_folder_remover(&tree_view.clone(), nb_object.column_name, nb_object.column_path, nb_object.column_selection, &check_button_settings_use_trash, &text_view_errors);
+        } else {
+            basic_remove(&tree_view.clone(), nb_object.column_name, nb_object.column_path, nb_object.column_selection, &check_button_settings_use_trash, &text_view_errors);
+        }
+    }
 
-        match to_notebook_main_enum(notebook_main.current_page().unwrap()) {
-            NotebookMainEnum::Duplicate => {
-                if !check_button_settings_confirm_group_deletion.is_active()
-                    || !check_if_deleting_all_files_in_group(
-                        &tree_view_duplicate_finder.clone(),
-                        ColumnsDuplicates::Color as i32,
-                        ColumnsDuplicates::ActiveSelectButton as i32,
-                        &window_main,
-                        &check_button_settings_confirm_group_deletion,
-                    )
-                {
-                    tree_remove(
-                        &tree_view_duplicate_finder.clone(),
-                        ColumnsDuplicates::Name as i32,
-                        ColumnsDuplicates::Path as i32,
-                        ColumnsDuplicates::Color as i32,
-                        ColumnsDuplicates::ActiveSelectButton as i32,
-                        &gui_data,
-                    );
-                }
-            }
-            NotebookMainEnum::EmptyDirectories => {
-                empty_folder_remover(
-                    &tree_view_empty_folder_finder.clone(),
-                    ColumnsEmptyFolders::Name as i32,
-                    ColumnsEmptyFolders::Path as i32,
-                    ColumnsEmptyFolders::ActiveSelectButton as i32,
-                    &gui_data,
-                );
-            }
-            NotebookMainEnum::EmptyFiles => {
-                basic_remove(
-                    &tree_view_empty_files_finder.clone(),
-                    ColumnsEmptyFiles::Name as i32,
-                    ColumnsEmptyFiles::Path as i32,
-                    ColumnsEmptyFiles::ActiveSelectButton as i32,
-                    &gui_data,
-                );
-            }
-            NotebookMainEnum::Temporary => {
-                basic_remove(
-                    &tree_view_temporary_files_finder.clone(),
-                    ColumnsTemporaryFiles::Name as i32,
-                    ColumnsTemporaryFiles::Path as i32,
-                    ColumnsTemporaryFiles::ActiveSelectButton as i32,
-                    &gui_data,
-                );
-            }
-            NotebookMainEnum::BigFiles => {
-                basic_remove(&tree_view_big_files_finder.clone(), ColumnsBigFiles::Name as i32, ColumnsBigFiles::Path as i32, ColumnsBigFiles::ActiveSelectButton as i32, &gui_data);
-            }
-            NotebookMainEnum::SimilarImages => {
-                if !check_button_settings_confirm_group_deletion.is_active()
-                    || !check_if_deleting_all_files_in_group(
-                        &tree_view_similar_images_finder.clone(),
-                        ColumnsSimilarImages::Color as i32,
-                        ColumnsSimilarImages::ActiveSelectButton as i32,
-                        &window_main,
-                        &check_button_settings_confirm_group_deletion,
-                    )
-                {
-                    tree_remove(
-                        &tree_view_similar_images_finder.clone(),
-                        ColumnsSimilarImages::Name as i32,
-                        ColumnsSimilarImages::Path as i32,
-                        ColumnsSimilarImages::Color as i32,
-                        ColumnsSimilarImages::ActiveSelectButton as i32,
-                        &gui_data,
-                    );
-                    image_preview_similar_images.hide();
-                }
-            }
-            NotebookMainEnum::Zeroed => {
-                basic_remove(
-                    &tree_view_zeroed_files_finder.clone(),
-                    ColumnsZeroedFiles::Name as i32,
-                    ColumnsZeroedFiles::Path as i32,
-                    ColumnsZeroedFiles::ActiveSelectButton as i32,
-                    &gui_data,
-                );
-            }
-            NotebookMainEnum::SameMusic => {
-                if !check_button_settings_confirm_group_deletion.is_active()
-                    || !check_if_deleting_all_files_in_group(
-                        &tree_view_same_music_finder.clone(),
-                        ColumnsSameMusic::Color as i32,
-                        ColumnsSameMusic::ActiveSelectButton as i32,
-                        &window_main,
-                        &check_button_settings_confirm_group_deletion,
-                    )
-                {
-                    tree_remove(
-                        &tree_view_same_music_finder.clone(),
-                        ColumnsSameMusic::Name as i32,
-                        ColumnsSameMusic::Path as i32,
-                        ColumnsSameMusic::Color as i32,
-                        ColumnsSameMusic::ActiveSelectButton as i32,
-                        &gui_data,
-                    );
-                }
-            }
-            NotebookMainEnum::Symlinks => {
-                basic_remove(
-                    &tree_view_invalid_symlinks.clone(),
-                    ColumnsInvalidSymlinks::Name as i32,
-                    ColumnsInvalidSymlinks::Path as i32,
-                    ColumnsInvalidSymlinks::ActiveSelectButton as i32,
-                    &gui_data,
-                );
-            }
-            NotebookMainEnum::BrokenFiles => {
-                basic_remove(
-                    &tree_view_broken_files.clone(),
-                    ColumnsBrokenFiles::Name as i32,
-                    ColumnsBrokenFiles::Path as i32,
-                    ColumnsInvalidSymlinks::ActiveSelectButton as i32,
-                    &gui_data,
-                );
+    match &nb_object.notebook_type {
+        NotebookMainEnum::SimilarImages | NotebookMainEnum::Duplicate => {
+            if nb_object.notebook_type == NotebookMainEnum::SimilarImages {
+                image_preview_similar_images.hide();
+            } else {
+                image_preview_duplicates.hide();
             }
+            *preview_path.borrow_mut() = "".to_string();
         }
-    });
+        _ => {}
+    }
 }
 
-pub fn check_if_can_delete_files(check_button_settings_confirm_deletion: &gtk::CheckButton, window_main: &gtk::Window) -> bool {
+pub async fn check_if_can_delete_files(check_button_settings_confirm_deletion: &gtk::CheckButton, window_main: &gtk::Window) -> bool {
     if check_button_settings_confirm_deletion.is_active() {
-        let confirmation_dialog_delete = gtk::Dialog::with_buttons(
-            Some("Delete confirmation"),
-            Some(window_main),
-            gtk::DialogFlags::DESTROY_WITH_PARENT,
-            &[("Ok", gtk::ResponseType::Ok), ("Close", gtk::ResponseType::Cancel)],
-        );
-        let label: gtk::Label = gtk::Label::new(Some("Are you sure that you want to delete files?"));
-        let check_button: gtk::CheckButton = gtk::CheckButton::with_label("Ask next time");
-        check_button.set_active(true);
-        check_button.set_halign(Align::Center);
-
-        let button_box = confirmation_dialog_delete.children()[0].clone().downcast::<gtk::Box>().unwrap().children()[0].clone().downcast::<gtk::Box>().unwrap().children()[0]
-            .clone()
-            .downcast::<gtk::ButtonBox>()
-            .unwrap();
-
-        let button_ok = button_box.children()[0].clone();
-        button_ok.grab_focus();
-
-        let internal_box = confirmation_dialog_delete.children()[0].clone().downcast::<gtk::Box>().unwrap();
-        internal_box.add(&label);
-        internal_box.add(&check_button);
+        let (confirmation_dialog_delete, check_button) = create_dialog_ask_for_deletion(window_main);
 
-        confirmation_dialog_delete.show_all();
-
-        let response_type = confirmation_dialog_delete.run();
+        let response_type = confirmation_dialog_delete.run_future().await;
         if response_type == gtk::ResponseType::Ok {
             if !check_button.is_active() {
                 check_button_settings_confirm_deletion.set_active(false);
@@ -199,7 +100,49 @@
     true
 }
 
-pub fn check_if_deleting_all_files_in_group(tree_view: &gtk::TreeView, column_color: i32, column_selection: i32, window_main: &gtk::Window, check_button_settings_confirm_group_deletion: &gtk::CheckButton) -> bool {
+fn create_dialog_ask_for_deletion(window_main: &gtk::Window) -> (Dialog, CheckButton) {
+    let dialog = gtk::Dialog::builder().title("Delete confirmation").transient_for(window_main).build();
+    let button_ok = dialog.add_button("Ok", ResponseType::Ok);
+    dialog.add_button("Close", ResponseType::Cancel);
+
+    let label: gtk::Label = gtk::Label::new(Some("Are you sure that you want to delete files?"));
+    let check_button: gtk::CheckButton = gtk::CheckButton::with_label("Ask next time");
+    check_button.set_active(true);
+    check_button.set_halign(Align::Center);
+
+    button_ok.grab_focus();
+
+    let internal_box = get_dialog_box_child(&dialog);
+    internal_box.add(&label);
+    internal_box.add(&check_button);
+
+    dialog.show_all();
+    (dialog, check_button)
+}
+
+fn create_dialog_group_deletion(window_main: &gtk::Window) -> (Dialog, CheckButton) {
+    let dialog = gtk::Dialog::builder().title("Confirmation of deleting all files in group").transient_for(window_main).build();
+    let button_ok = dialog.add_button("Ok", ResponseType::Ok);
+    dialog.add_button("Close", ResponseType::Cancel);
+
+    let label: gtk::Label = gtk::Label::new(Some("In some groups there are selected all records."));
+    let label2: gtk::Label = gtk::Label::new(Some("Are you sure that you want to delete them?"));
+    let check_button: gtk::CheckButton = gtk::CheckButton::with_label("Ask next time");
+    check_button.set_active(true);
+    check_button.set_halign(Align::Center);
+
+    button_ok.grab_focus();
+
+    let internal_box = get_dialog_box_child(&dialog);
+    internal_box.add(&label);
+    internal_box.add(&label2);
+    internal_box.add(&check_button);
+
+    dialog.show_all();
+    (dialog, check_button)
+}
+
+pub async fn check_if_deleting_all_files_in_group(tree_view: &gtk::TreeView, column_color: i32, column_selection: i32, window_main: &gtk::Window, check_button_settings_confirm_group_deletion: &gtk::CheckButton) -> bool {
     let model = get_list_store(tree_view);
 
     let mut selected_all_records: bool = true;
@@ -230,38 +173,9 @@
     if !selected_all_records {
         return false;
     } else {
-        let confirmation_dialog_group_delete = gtk::Dialog::with_buttons(
-            Some("Confirmation of deleting all files in group"),
-            Some(window_main),
-            gtk::DialogFlags::MODAL,
-            &[("Ok", gtk::ResponseType::Ok), ("Close", gtk::ResponseType::Cancel)],
-        );
-        let label: gtk::Label = gtk::Label::new(Some("In some groups there are selected all records."));
-        let label2: gtk::Label = gtk::Label::new(Some("Are you sure that you want to delete them?"));
-        let check_button: gtk::CheckButton = gtk::CheckButton::with_label("Ask next time");
-        check_button.set_active(true);
-        check_button.set_halign(Align::Center);
-
-        let button_box = confirmation_dialog_group_delete.children()[0].clone().downcast::<gtk::Box>().unwrap().children()[0]
-            .clone()
-            .downcast::<gtk::Box>()
-            .unwrap()
-            .children()[0]
-            .clone()
-            .downcast::<gtk::ButtonBox>()
-            .unwrap();
-
-        let button_ok = button_box.children()[0].clone();
-        button_ok.grab_focus();
-
-        let internal_box = confirmation_dialog_group_delete.children()[0].clone().downcast::<gtk::Box>().unwrap();
-        internal_box.add(&label);
-        internal_box.add(&label2);
-        internal_box.add(&check_button);
+        let (confirmation_dialog_group_delete, check_button) = create_dialog_group_deletion(window_main);
 
-        confirmation_dialog_group_delete.show_all();
-
-        let response_type = confirmation_dialog_group_delete.run();
+        let response_type = confirmation_dialog_group_delete.run_future().await;
         if response_type == gtk::ResponseType::Ok {
             if !check_button.is_active() {
                 check_button_settings_confirm_group_deletion.set_active(false);
@@ -278,9 +192,8 @@
     false
 }
 
-pub fn empty_folder_remover(tree_view: &gtk::TreeView, column_file_name: i32, column_path: i32, column_selection: i32, gui_data: &GuiData) {
-    let text_view_errors = gui_data.text_view_errors.clone();
-    let use_trash = gui_data.settings.check_button_settings_use_trash.clone().is_active();
+pub fn empty_folder_remover(tree_view: &gtk::TreeView, column_file_name: i32, column_path: i32, column_selection: i32, check_button_settings_use_trash: &CheckButton, text_view_errors: &TextView) {
+    let use_trash = check_button_settings_use_trash.is_active();
 
     let model = get_list_store(tree_view);
 
@@ -297,6 +210,10 @@
         }
     }
 
+    if selected_rows.is_empty() {
+        return; // No selected rows
+    }
+
     let mut messages: String = "".to_string();
 
     // Must be deleted from end to start, because when deleting entries, TreePath(and also TreeIter) will points to invalid data
@@ -379,20 +296,19 @@
     text_view_errors.buffer().unwrap().set_text(messages.as_str());
 }
 
-pub fn basic_remove(tree_view: &gtk::TreeView, column_file_name: i32, column_path: i32, column_selection: i32, gui_data: &GuiData) {
-    let text_view_errors = gui_data.text_view_errors.clone();
-    let use_trash = gui_data.settings.check_button_settings_use_trash.clone().is_active();
+pub fn basic_remove(tree_view: &gtk::TreeView, column_file_name: i32, column_path: i32, column_selection: i32, check_button_settings_use_trash: &CheckButton, text_view_errors: &TextView) {
+    let use_trash = check_button_settings_use_trash.is_active();
 
     let model = get_list_store(tree_view);
 
     let mut messages: String = "".to_string();
 
-    let mut selection_rows = Vec::new();
+    let mut selected_rows = Vec::new();
 
     if let Some(iter) = model.iter_first() {
         loop {
             if model.value(&iter, column_selection).get::<bool>().unwrap() {
-                selection_rows.push(model.path(&iter).unwrap());
+                selected_rows.push(model.path(&iter).unwrap());
             }
 
             if !model.iter_next(&iter) {
@@ -401,8 +317,12 @@
         }
     }
 
+    if selected_rows.is_empty() {
+        return; // No selected rows
+    }
+
     // Must be deleted from end to start, because when deleting entries, TreePath(and also TreeIter) will points to invalid data
-    for tree_path in selection_rows.iter().rev() {
+    for tree_path in selected_rows.iter().rev() {
         let iter = model.iter(tree_path).unwrap();
 
         let name = model.value(&iter, column_file_name).get::<String>().unwrap();
@@ -429,9 +349,8 @@
 }
 
 // Remove all occurrences - remove every element which have same path and name as even non selected ones
-pub fn tree_remove(tree_view: &gtk::TreeView, column_file_name: i32, column_path: i32, column_color: i32, column_selection: i32, gui_data: &GuiData) {
-    let text_view_errors = gui_data.text_view_errors.clone();
-    let use_trash = gui_data.settings.check_button_settings_use_trash.clone().is_active();
+pub fn tree_remove(tree_view: &gtk::TreeView, column_file_name: i32, column_path: i32, column_color: i32, column_selection: i32, check_button_settings_use_trash: &CheckButton, text_view_errors: &TextView) {
+    let use_trash = check_button_settings_use_trash.is_active();
 
     let model = get_list_store(tree_view);
 
@@ -440,16 +359,15 @@
     let mut vec_path_to_delete: Vec<(String, String)> = Vec::new();
     let mut map_with_path_to_delete: BTreeMap<String, Vec<String>> = Default::default(); // BTreeMap<Path,Vec<FileName>>
 
-    let mut selection_rows = Vec::new();
+    let mut selected_rows = Vec::new();
 
     if let Some(iter) = model.iter_first() {
         loop {
             if model.value(&iter, column_selection).get::<bool>().unwrap() {
-                // TODO, this maybe isn't required if we will be sure that any header cannot be selected
                 if model.value(&iter, column_color).get::<String>().unwrap() == MAIN_ROW_COLOR {
-                    selection_rows.push(model.path(&iter).unwrap());
+                    selected_rows.push(model.path(&iter).unwrap());
                 } else {
-                    panic!("Header row shouldn't have selected, selection button");
+                    panic!("Header row shouldn't be selected, please report bug.");
                 }
             }
 
@@ -459,8 +377,12 @@
         }
     }
 
+    if selected_rows.is_empty() {
+        return; // No selected rows
+    }
+
     // Save to variable paths of files, and remove it when not removing all occurrences.
-    for tree_path in selection_rows.iter().rev() {
+    for tree_path in selected_rows.iter().rev() {
         let iter = model.iter(tree_path).unwrap();
 
         let file_name = model.value(&iter, column_file_name).get::<String>().unwrap();
@@ -489,74 +411,7 @@
         }
     }
 
-    // Remove only child from header
-    if let Some(first_iter) = model.iter_first() {
-        let mut vec_tree_path_to_delete: Vec<gtk::TreePath> = Vec::new();
-        let mut current_iter = first_iter;
-        if model.value(&current_iter, column_color).get::<String>().unwrap() != HEADER_ROW_COLOR {
-            panic!("First deleted element, should be a header"); // First element should be header
-        };
-
-        let mut next_iter;
-        let mut next_next_iter;
-        'main: loop {
-            if model.value(&current_iter, column_color).get::<String>().unwrap() != HEADER_ROW_COLOR {
-                panic!("First deleted element, should be a header"); // First element should be header
-            };
-
-            next_iter = current_iter.clone();
-            if !model.iter_next(&next_iter) {
-                // There is only single header left (H1 -> END) -> (NOTHING)
-                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
-                break 'main;
-            }
-
-            if model.value(&next_iter, column_color).get::<String>().unwrap() == HEADER_ROW_COLOR {
-                // There are two headers each others(we remove just first) -> (H1 -> H2) -> (H2)
-                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
-                current_iter = next_iter.clone();
-                continue 'main;
-            }
-
-            next_next_iter = next_iter.clone();
-            if !model.iter_next(&next_next_iter) {
-                // There is only one child of header left, so we remove it with header (H1 -> C1 -> END) -> (NOTHING)
-                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
-                vec_tree_path_to_delete.push(model.path(&next_iter).unwrap());
-                break 'main;
-            }
-
-            if model.value(&next_next_iter, column_color).get::<String>().unwrap() == HEADER_ROW_COLOR {
-                // One child between two headers, we can remove them  (H1 -> C1 -> H2) -> (H2)
-                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
-                vec_tree_path_to_delete.push(model.path(&next_iter).unwrap());
-                current_iter = next_next_iter.clone();
-                continue 'main;
-            }
-
-            loop {
-                // (H1 -> C1 -> C2 -> Cn -> END) -> (NO CHANGE, BECAUSE IS GOOD)
-                if !model.iter_next(&next_next_iter) {
-                    break 'main;
-                }
-                // Move to next header
-                if model.value(&next_next_iter, column_color).get::<String>().unwrap() == HEADER_ROW_COLOR {
-                    current_iter = next_next_iter.clone();
-                    continue 'main;
-                }
-            }
-        }
-        for tree_path in vec_tree_path_to_delete.iter().rev() {
-            model.remove(&model.iter(tree_path).unwrap());
-        }
-    }
-
-    // Last step, remove orphan header if exists
-    if let Some(iter) = model.iter_first() {
-        if !model.iter_next(&iter) {
-            model.clear();
-        }
-    }
+    clean_invalid_headers(&model, column_color);
 
     text_view_errors.buffer().unwrap().set_text(messages.as_str());
 }
diff -Naur orig/czkawka_gui/src/connect_button_hardlink.rs patched/czkawka_gui/src/connect_button_hardlink.rs
--- orig/czkawka_gui/src/connect_button_hardlink.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_button_hardlink.rs	2021-12-04 17:07:36.878961290 +0100
@@ -1,68 +1,86 @@
-use crate::gui_data::GuiData;
-use crate::help_functions::*;
-use crate::notebook_enums::*;
-use czkawka_core::duplicate::make_hard_link;
-use gtk::prelude::*;
-use gtk::{TreeIter, TreePath};
 use std::fs;
 use std::path::PathBuf;
 
-pub fn connect_button_hardlink(gui_data: &GuiData) {
-    let gui_data = gui_data.clone();
+use gtk::prelude::*;
+use gtk::{TextView, TreeIter, TreePath};
 
+use czkawka_core::duplicate::make_hard_link;
+
+use crate::gui_data::GuiData;
+use crate::help_functions::*;
+use crate::notebook_enums::*;
+
+pub fn connect_button_hardlink_symlink(gui_data: &GuiData) {
     let buttons_hardlink = gui_data.bottom_buttons.buttons_hardlink.clone();
-    let notebook_main = gui_data.main_notebook.notebook_main.clone();
 
-    let tree_view_duplicate_finder = gui_data.main_notebook.tree_view_duplicate_finder.clone();
-    let tree_view_similar_images_finder = gui_data.main_notebook.tree_view_similar_images_finder.clone();
-    let tree_view_same_music_finder = gui_data.main_notebook.tree_view_same_music_finder.clone();
+    let notebook_main = gui_data.main_notebook.notebook_main.clone();
+    let main_tree_views = gui_data.main_notebook.get_main_tree_views();
 
     let image_preview_similar_images = gui_data.main_notebook.image_preview_similar_images.clone();
+    let image_preview_duplicates = gui_data.main_notebook.image_preview_duplicates.clone();
 
-    buttons_hardlink.connect_clicked(move |_| match to_notebook_main_enum(notebook_main.current_page().unwrap()) {
-        NotebookMainEnum::Duplicate => {
-            hardlink_symlink(
-                tree_view_duplicate_finder.clone(),
-                ColumnsDuplicates::Name as i32,
-                ColumnsDuplicates::Path as i32,
-                ColumnsDuplicates::Color as i32,
-                ColumnsDuplicates::ActiveSelectButton as i32,
-                true,
-                &gui_data,
-            );
-        }
-        NotebookMainEnum::SameMusic => {
-            hardlink_symlink(
-                tree_view_same_music_finder.clone(),
-                ColumnsSameMusic::Name as i32,
-                ColumnsSameMusic::Path as i32,
-                ColumnsSameMusic::Color as i32,
-                ColumnsSameMusic::ActiveSelectButton as i32,
-                true,
-                &gui_data,
-            );
+    let text_view_errors = gui_data.text_view_errors.clone();
+    let preview_path = gui_data.preview_path.clone();
+
+    buttons_hardlink.connect_clicked(move |_| {
+        let nb_number = notebook_main.current_page().unwrap();
+        let tree_view = &main_tree_views[nb_number as usize];
+        let nb_object = &NOTEBOOKS_INFOS[nb_number as usize];
+
+        let column_color = nb_object.column_color.expect("Hardinkning can be only used for tree views with grouped results");
+        hardlink_symlink(tree_view, nb_object.column_name, nb_object.column_path, column_color, nb_object.column_selection, true, &text_view_errors);
+
+        match &nb_object.notebook_type {
+            NotebookMainEnum::SimilarImages | NotebookMainEnum::Duplicate => {
+                if nb_object.notebook_type == NotebookMainEnum::SimilarImages {
+                    image_preview_similar_images.hide();
+                } else {
+                    image_preview_duplicates.hide();
+                }
+                *preview_path.borrow_mut() = "".to_string();
+            }
+            _ => {}
         }
-        NotebookMainEnum::SimilarImages => {
-            hardlink_symlink(
-                tree_view_similar_images_finder.clone(),
-                ColumnsSimilarImages::Name as i32,
-                ColumnsSimilarImages::Path as i32,
-                ColumnsSimilarImages::Color as i32,
-                ColumnsSimilarImages::ActiveSelectButton as i32,
-                true,
-                &gui_data,
-            );
-            image_preview_similar_images.hide();
+    });
+
+    let buttons_symlink = gui_data.bottom_buttons.buttons_symlink.clone();
+
+    let notebook_main = gui_data.main_notebook.notebook_main.clone();
+    let main_tree_views = gui_data.main_notebook.get_main_tree_views();
+
+    let image_preview_similar_images = gui_data.main_notebook.image_preview_similar_images.clone();
+    let image_preview_duplicates = gui_data.main_notebook.image_preview_duplicates.clone();
+
+    let text_view_errors = gui_data.text_view_errors.clone();
+
+    let preview_path = gui_data.preview_path.clone();
+
+    buttons_symlink.connect_clicked(move |_| {
+        let nb_number = notebook_main.current_page().unwrap();
+        let tree_view = &main_tree_views[nb_number as usize];
+        let nb_object = &NOTEBOOKS_INFOS[nb_number as usize];
+
+        let column_color = nb_object.column_color.expect("Symlinking can be only used for tree views with grouped results");
+        hardlink_symlink(tree_view, nb_object.column_name, nb_object.column_path, column_color, nb_object.column_selection, false, &text_view_errors);
+
+        match &nb_object.notebook_type {
+            NotebookMainEnum::SimilarImages | NotebookMainEnum::Duplicate => {
+                if nb_object.notebook_type == NotebookMainEnum::SimilarImages {
+                    image_preview_similar_images.hide();
+                } else {
+                    image_preview_duplicates.hide();
+                }
+                *preview_path.borrow_mut() = "".to_string();
+            }
+            _ => {}
         }
-        e => panic!("Not existent {:?}", e),
     });
 }
 
-pub fn hardlink_symlink(tree_view: gtk::TreeView, column_file_name: i32, column_path: i32, column_color: i32, column_selection: i32, hardlinking: bool, gui_data: &GuiData) {
-    let text_view_errors = gui_data.text_view_errors.clone();
-    reset_text_view(&text_view_errors);
+pub fn hardlink_symlink(tree_view: &gtk::TreeView, column_file_name: i32, column_path: i32, column_color: i32, column_selection: i32, hardlinking: bool, text_view_errors: &TextView) {
+    reset_text_view(text_view_errors);
 
-    let model = get_list_store(&tree_view);
+    let model = get_list_store(tree_view);
 
     #[derive(Debug)]
     struct SymHardlinkData {
@@ -80,8 +98,12 @@
     let mut selected_rows = Vec::new();
     if let Some(iter) = model.iter_first() {
         loop {
-            if model.value(&iter, column_color).get::<String>().unwrap() == MAIN_ROW_COLOR && model.value(&iter, column_selection).get::<bool>().unwrap() {
-                selected_rows.push(model.path(&iter).unwrap());
+            if model.value(&iter, column_selection).get::<bool>().unwrap() {
+                if model.value(&iter, column_color).get::<String>().unwrap() == MAIN_ROW_COLOR {
+                    selected_rows.push(model.path(&iter).unwrap());
+                } else {
+                    panic!("Header row shouldn't be selected, please report bug.");
+                }
             }
             if !model.iter_next(&iter) {
                 break;
@@ -89,6 +111,10 @@
         }
     }
 
+    if selected_rows.is_empty() {
+        return; // No selected rows
+    }
+
     let mut current_symhardlink_data: Option<SymHardlinkData> = None;
     let mut current_selected_index = 0;
     loop {
@@ -150,114 +176,40 @@
         for symhardlink_data in vec_symhardlink_data {
             dbg!(&symhardlink_data);
             for file_to_hardlink in symhardlink_data.files_to_symhardlink {
-                match make_hard_link(&PathBuf::from(&symhardlink_data.original_data), &PathBuf::from(&file_to_hardlink)) {
-                    Ok(_) => (),
-                    Err(e) => {
-                        add_text_to_text_view(&text_view_errors, format!("Failed to hardlink {}, reason {}", file_to_hardlink, e).as_str());
-                        continue;
-                    }
+                if let Err(e) = make_hard_link(&PathBuf::from(&symhardlink_data.original_data), &PathBuf::from(&file_to_hardlink)) {
+                    add_text_to_text_view(text_view_errors, format!("Failed to hardlink {}, reason {}", file_to_hardlink, e).as_str());
+                    continue;
                 }
             }
-            println!();
         }
     } else {
         for symhardlink_data in vec_symhardlink_data {
             for file_to_symlink in symhardlink_data.files_to_symhardlink {
-                match fs::remove_file(&file_to_symlink) {
-                    Ok(_) => (),
-                    Err(e) => {
-                        add_text_to_text_view(&text_view_errors, format!("Failed to remove file {} when creating symlink, reason {}", file_to_symlink, e).as_str());
-                        continue;
-                    }
+                if let Err(e) = fs::remove_file(&file_to_symlink) {
+                    add_text_to_text_view(text_view_errors, format!("Failed to remove file {} when creating symlink, reason {}", file_to_symlink, e).as_str());
+                    continue;
                 };
 
                 #[cfg(target_family = "unix")]
                 {
-                    match std::os::unix::fs::symlink(&symhardlink_data.original_data, &file_to_symlink) {
-                        Ok(_) => (),
-                        Err(e) => {
-                            add_text_to_text_view(&text_view_errors, format!("Failed to remove file {} when creating symlink, reason {}", file_to_symlink, e).as_str());
-                            continue;
-                        }
+                    if let Err(e) = std::os::unix::fs::symlink(&symhardlink_data.original_data, &file_to_symlink) {
+                        add_text_to_text_view(text_view_errors, format!("Failed to remove file {} when creating symlink, reason {}", file_to_symlink, e).as_str());
+                        continue;
                     };
                 }
                 #[cfg(target_family = "windows")]
                 {
-                    match std::os::windows::fs::symlink_file(&symhardlink_data.original_data, &file_to_symlink) {
-                        Ok(_) => (),
-                        Err(e) => {
-                            add_text_to_text_view(&text_view_errors, format!("Failed to remove file {} when creating symlink, reason {}", file_to_symlink, e).as_str());
-                            continue;
-                        }
+                    if let Err(e) = std::os::windows::fs::symlink_file(&symhardlink_data.original_data, &file_to_symlink) {
+                        add_text_to_text_view(&text_view_errors, format!("Failed to remove file {} when creating symlink, reason {}", file_to_symlink, e).as_str());
+                        continue;
                     };
                 }
             }
-            println!();
         }
     }
     for tree_path in vec_tree_path_to_remove.iter().rev() {
         model.remove(&model.iter(tree_path).unwrap());
     }
 
-    // Remove only child from header
-    if let Some(first_iter) = model.iter_first() {
-        let mut vec_tree_path_to_delete: Vec<gtk::TreePath> = Vec::new();
-        let mut current_iter = first_iter;
-        if model.value(&current_iter, column_color).get::<String>().unwrap() != HEADER_ROW_COLOR {
-            panic!(); // First element should be header
-        };
-
-        let mut next_iter;
-        let mut next_next_iter;
-        'main: loop {
-            if model.value(&current_iter, column_color).get::<String>().unwrap() != HEADER_ROW_COLOR {
-                panic!(); // First element should be header
-            };
-
-            next_iter = current_iter.clone();
-            if !model.iter_next(&next_iter) {
-                // There is only single header left (H1 -> END) -> (NOTHING)
-                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
-                break 'main;
-            }
-
-            if model.value(&next_iter, column_color).get::<String>().unwrap() == HEADER_ROW_COLOR {
-                // There are two headers each others(we remove just first) -> (H1 -> H2) -> (H2)
-                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
-                current_iter = next_iter.clone();
-                continue 'main;
-            }
-
-            next_next_iter = next_iter.clone();
-            if !model.iter_next(&next_next_iter) {
-                // There is only one child of header left, so we remove it with header (H1 -> C1 -> END) -> (NOTHING)
-                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
-                vec_tree_path_to_delete.push(model.path(&next_iter).unwrap());
-                break 'main;
-            }
-
-            if model.value(&next_next_iter, column_color).get::<String>().unwrap() == HEADER_ROW_COLOR {
-                // One child between two headers, we can remove them  (H1 -> C1 -> H2) -> (H2)
-                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
-                vec_tree_path_to_delete.push(model.path(&next_iter).unwrap());
-                current_iter = next_next_iter.clone();
-                continue 'main;
-            }
-
-            loop {
-                // (H1 -> C1 -> C2 -> Cn -> END) -> (NO CHANGE, BECAUSE IS GOOD)
-                if !model.iter_next(&next_next_iter) {
-                    break 'main;
-                }
-                // Move to next header
-                if model.value(&next_next_iter, column_color).get::<String>().unwrap() == HEADER_ROW_COLOR {
-                    current_iter = next_next_iter.clone();
-                    continue 'main;
-                }
-            }
-        }
-        for tree_path in vec_tree_path_to_delete.iter().rev() {
-            model.remove(&model.iter(tree_path).unwrap());
-        }
-    }
+    clean_invalid_headers(&model, column_color);
 }
diff -Naur orig/czkawka_gui/src/connect_button_move.rs patched/czkawka_gui/src/connect_button_move.rs
--- orig/czkawka_gui/src/connect_button_move.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_button_move.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,182 +1,106 @@
+use std::path::{Path, PathBuf};
+
+use gtk::prelude::*;
+use gtk::{ResponseType, TreePath};
+
 use crate::gui_data::GuiData;
 use crate::help_functions::*;
 use crate::notebook_enums::*;
-use gtk::prelude::*;
-use std::path::{Path, PathBuf};
 
 pub fn connect_button_move(gui_data: &GuiData) {
-    let gui_data = gui_data.clone();
-
     let buttons_move = gui_data.bottom_buttons.buttons_move.clone();
     let notebook_main = gui_data.main_notebook.notebook_main.clone();
 
-    let tree_view_duplicate_finder = gui_data.main_notebook.tree_view_duplicate_finder.clone();
-    let tree_view_empty_folder_finder = gui_data.main_notebook.tree_view_empty_folder_finder.clone();
-    let tree_view_big_files_finder = gui_data.main_notebook.tree_view_big_files_finder.clone();
-    let tree_view_empty_files_finder = gui_data.main_notebook.tree_view_empty_files_finder.clone();
-    let tree_view_temporary_files_finder = gui_data.main_notebook.tree_view_temporary_files_finder.clone();
-    let tree_view_similar_images_finder = gui_data.main_notebook.tree_view_similar_images_finder.clone();
-    let tree_view_zeroed_files_finder = gui_data.main_notebook.tree_view_zeroed_files_finder.clone();
-    let tree_view_same_music_finder = gui_data.main_notebook.tree_view_same_music_finder.clone();
-    let tree_view_invalid_symlinks = gui_data.main_notebook.tree_view_invalid_symlinks.clone();
-    let tree_view_broken_files = gui_data.main_notebook.tree_view_broken_files.clone();
+    let main_tree_views = gui_data.main_notebook.get_main_tree_views();
 
     let image_preview_similar_images = gui_data.main_notebook.image_preview_similar_images.clone();
+    let image_preview_duplicates = gui_data.main_notebook.image_preview_duplicates.clone();
 
-    buttons_move.connect_clicked(move |_| match to_notebook_main_enum(notebook_main.current_page().unwrap()) {
-        NotebookMainEnum::Duplicate => {
-            move_things(
-                tree_view_duplicate_finder.clone(),
-                ColumnsDuplicates::Name as i32,
-                ColumnsDuplicates::Path as i32,
-                Some(ColumnsDuplicates::Color as i32),
-                ColumnsDuplicates::ActiveSelectButton as i32,
-                &gui_data,
-            );
-        }
-        NotebookMainEnum::SameMusic => {
-            move_things(
-                tree_view_same_music_finder.clone(),
-                ColumnsSameMusic::Name as i32,
-                ColumnsSameMusic::Path as i32,
-                Some(ColumnsSameMusic::Color as i32),
-                ColumnsSameMusic::ActiveSelectButton as i32,
-                &gui_data,
-            );
-        }
-        NotebookMainEnum::SimilarImages => {
-            move_things(
-                tree_view_similar_images_finder.clone(),
-                ColumnsSimilarImages::Name as i32,
-                ColumnsSimilarImages::Path as i32,
-                Some(ColumnsSimilarImages::Color as i32),
-                ColumnsSimilarImages::ActiveSelectButton as i32,
-                &gui_data,
-            );
-            image_preview_similar_images.hide();
-        }
-        NotebookMainEnum::BigFiles => {
-            move_things(
-                tree_view_big_files_finder.clone(),
-                ColumnsBigFiles::Name as i32,
-                ColumnsBigFiles::Path as i32,
-                None,
-                ColumnsBigFiles::ActiveSelectButton as i32,
-                &gui_data,
-            );
-        }
-        NotebookMainEnum::Zeroed => {
-            move_things(
-                tree_view_zeroed_files_finder.clone(),
-                ColumnsZeroedFiles::Name as i32,
-                ColumnsZeroedFiles::Path as i32,
-                None,
-                ColumnsZeroedFiles::ActiveSelectButton as i32,
-                &gui_data,
-            );
-        }
-        NotebookMainEnum::BrokenFiles => {
-            move_things(
-                tree_view_broken_files.clone(),
-                ColumnsBrokenFiles::Name as i32,
-                ColumnsBrokenFiles::Path as i32,
-                None,
-                ColumnsBrokenFiles::ActiveSelectButton as i32,
-                &gui_data,
-            );
-        }
-        NotebookMainEnum::EmptyDirectories => {
-            move_things(
-                tree_view_empty_folder_finder.clone(),
-                ColumnsEmptyFolders::Name as i32,
-                ColumnsEmptyFolders::Path as i32,
-                None,
-                ColumnsEmptyFolders::ActiveSelectButton as i32,
-                &gui_data,
-            );
-        }
-        NotebookMainEnum::EmptyFiles => {
-            move_things(
-                tree_view_empty_files_finder.clone(),
-                ColumnsEmptyFiles::Name as i32,
-                ColumnsEmptyFiles::Path as i32,
-                None,
-                ColumnsEmptyFiles::ActiveSelectButton as i32,
-                &gui_data,
-            );
-        }
-        NotebookMainEnum::Symlinks => {
-            move_things(
-                tree_view_invalid_symlinks.clone(),
-                ColumnsInvalidSymlinks::Name as i32,
-                ColumnsInvalidSymlinks::Path as i32,
-                None,
-                ColumnsInvalidSymlinks::ActiveSelectButton as i32,
-                &gui_data,
-            );
-        }
-        NotebookMainEnum::Temporary => {
-            move_things(
-                tree_view_temporary_files_finder.clone(),
-                ColumnsTemporaryFiles::Name as i32,
-                ColumnsTemporaryFiles::Path as i32,
-                None,
-                ColumnsTemporaryFiles::ActiveSelectButton as i32,
-                &gui_data,
-            );
+    let entry_info = gui_data.entry_info.clone();
+    let text_view_errors = gui_data.text_view_errors.clone();
+
+    let window_main = gui_data.window_main.clone();
+
+    let preview_path = gui_data.preview_path.clone();
+
+    buttons_move.connect_clicked(move |_| {
+        let nb_number = notebook_main.current_page().unwrap();
+        let tree_view = &main_tree_views[nb_number as usize];
+        let nb_object = &NOTEBOOKS_INFOS[nb_number as usize];
+
+        move_things(
+            tree_view,
+            nb_object.column_name,
+            nb_object.column_path,
+            nb_object.column_color,
+            nb_object.column_selection,
+            &entry_info,
+            &text_view_errors,
+            &window_main,
+        );
+
+        match &nb_object.notebook_type {
+            NotebookMainEnum::SimilarImages | NotebookMainEnum::Duplicate => {
+                if nb_object.notebook_type == NotebookMainEnum::SimilarImages {
+                    image_preview_similar_images.hide();
+                } else {
+                    image_preview_duplicates.hide();
+                }
+                *preview_path.borrow_mut() = "".to_string();
+            }
+            _ => {}
         }
     });
 }
 
-// TODO create and show folder chooser where user can select path
-fn move_things(tree_view: gtk::TreeView, column_file_name: i32, column_path: i32, column_color: Option<i32>, column_selection: i32, gui_data: &GuiData) {
-    let text_view_errors = gui_data.text_view_errors.clone();
-    let window_main = gui_data.window_main.clone();
-
-    reset_text_view(&text_view_errors);
+// TODO add progress bar
+fn move_things(tree_view: &gtk::TreeView, column_file_name: i32, column_path: i32, column_color: Option<i32>, column_selection: i32, entry_info: &gtk::Entry, text_view_errors: &gtk::TextView, window_main: &gtk::Window) {
+    reset_text_view(text_view_errors);
+
+    let chooser = gtk::FileChooserDialog::builder()
+        .title("Choose folder to which you want to move duplicated files")
+        .action(gtk::FileChooserAction::SelectFolder)
+        .transient_for(window_main)
+        .build();
+    chooser.add_button("Ok", ResponseType::Ok);
+    chooser.add_button("Close", ResponseType::Cancel);
 
-    let chooser = gtk::FileChooserDialog::with_buttons(
-        Some("Choose folder to which you want to move duplicated files"),
-        Some(&window_main),
-        gtk::FileChooserAction::SelectFolder,
-        &[("Ok", gtk::ResponseType::Ok), ("Close", gtk::ResponseType::Cancel)],
-    );
-    chooser.set_select_multiple(true);
+    chooser.set_select_multiple(false);
     chooser.show_all();
-    let response_type = chooser.run();
-    if response_type == gtk::ResponseType::Ok {
-        let folders = chooser.filenames();
-        if folders.len() != 1 {
-            add_text_to_text_view(&text_view_errors, format!("Only 1 path must be selected to be able to copy there duplicated files, found {:?}", folders).as_str());
-        } else {
-            let folder = folders[0].clone();
-            if let Some(column_color) = column_color {
-                move_with_tree(tree_view, column_file_name, column_path, column_color, column_selection, gui_data, folder);
+
+    let entry_info = entry_info.clone();
+    let text_view_errors = text_view_errors.clone();
+    let tree_view = tree_view.clone();
+    chooser.connect_response(move |file_chooser, response_type| {
+        if response_type == gtk::ResponseType::Ok {
+            let folders = file_chooser.filenames();
+            if folders.len() != 1 {
+                add_text_to_text_view(&text_view_errors, format!("Only 1 path must be selected to be able to copy there duplicated files, found {:?}", folders).as_str());
             } else {
-                move_with_list(tree_view, column_file_name, column_path, column_selection, gui_data, folder);
+                let folder = folders[0].clone();
+                if let Some(column_color) = column_color {
+                    move_with_tree(&tree_view, column_file_name, column_path, column_color, column_selection, folder, &entry_info, &text_view_errors);
+                } else {
+                    move_with_list(&tree_view, column_file_name, column_path, column_selection, folder, &entry_info, &text_view_errors);
+                }
             }
         }
-    }
-    chooser.close();
+        file_chooser.close();
+    });
 }
-fn move_with_tree(tree_view: gtk::TreeView, column_file_name: i32, column_path: i32, column_color: i32, column_selection: i32, gui_data: &GuiData, destination_folder: PathBuf) {
-    let text_view_errors = gui_data.text_view_errors.clone();
-    let entry_info = gui_data.entry_info.clone();
-
-    let model = get_list_store(&tree_view);
 
-    let mut messages: String = "".to_string();
+fn move_with_tree(tree_view: &gtk::TreeView, column_file_name: i32, column_path: i32, column_color: i32, column_selection: i32, destination_folder: PathBuf, entry_info: &gtk::Entry, text_view_errors: &gtk::TextView) {
+    let model = get_list_store(tree_view);
 
-    let mut selection_rows = Vec::new();
+    let mut selected_rows = Vec::new();
 
     if let Some(iter) = model.iter_first() {
         loop {
             if model.value(&iter, column_selection).get::<bool>().unwrap() {
-                // TODO, this maybe isn't required if we will be sure that any header cannot be selected
                 if model.value(&iter, column_color).get::<String>().unwrap() == MAIN_ROW_COLOR {
-                    selection_rows.push(model.path(&iter).unwrap());
+                    selected_rows.push(model.path(&iter).unwrap());
                 } else {
-                    panic!("Header row shouldn't have selected, selection button");
+                    panic!("Header row shouldn't be selected, please report bug.");
                 }
             }
 
@@ -186,119 +110,24 @@
         }
     }
 
-    let mut moved_files: u32 = 0;
-
-    // Save to variable paths of files, and remove it when not removing all occurrences.
-    'next_result: for tree_path in selection_rows.iter().rev() {
-        let iter = model.iter(tree_path).unwrap();
-
-        let file_name = model.value(&iter, column_file_name).get::<String>().unwrap();
-        let path = model.value(&iter, column_path).get::<String>().unwrap();
-
-        let thing = format!("{}/{}", path, file_name);
-        let destination_file = destination_folder.join(file_name);
-        if Path::new(&thing).is_dir() {
-            if let Err(e) = fs_extra::dir::move_dir(&thing, &destination_file, &fs_extra::dir::CopyOptions::new()) {
-                messages += format!("Failed to move folder, reason {}\n", e).as_str();
-                continue 'next_result;
-            }
-        } else {
-            if let Err(e) = fs_extra::file::move_file(&thing, &destination_file, &fs_extra::file::CopyOptions::new()) {
-                messages += format!("Failed to move file, reason {}\n", e).as_str();
-                continue 'next_result;
-            }
-        }
-        model.remove(&iter);
-        moved_files += 1;
-    }
-    entry_info.set_text(format!("Properly moved {}/{} files/folders", moved_files, selection_rows.len()).as_str());
-
-    // TODO move this to different function, this is used in different places
-    // Remove only child from header
-    if let Some(first_iter) = model.iter_first() {
-        let mut vec_tree_path_to_delete: Vec<gtk::TreePath> = Vec::new();
-        let mut current_iter = first_iter;
-        if model.value(&current_iter, column_color).get::<String>().unwrap() != HEADER_ROW_COLOR {
-            panic!("First deleted element, should be a header"); // First element should be header
-        };
-
-        let mut next_iter;
-        let mut next_next_iter;
-        'main: loop {
-            if model.value(&current_iter, column_color).get::<String>().unwrap() != HEADER_ROW_COLOR {
-                panic!("First deleted element, should be a header"); // First element should be header
-            };
-
-            next_iter = current_iter.clone();
-            if !model.iter_next(&next_iter) {
-                // There is only single header left (H1 -> END) -> (NOTHING)
-                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
-                break 'main;
-            }
-
-            if model.value(&next_iter, column_color).get::<String>().unwrap() == HEADER_ROW_COLOR {
-                // There are two headers each others(we remove just first) -> (H1 -> H2) -> (H2)
-                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
-                current_iter = next_iter.clone();
-                continue 'main;
-            }
-
-            next_next_iter = next_iter.clone();
-            if !model.iter_next(&next_next_iter) {
-                // There is only one child of header left, so we remove it with header (H1 -> C1 -> END) -> (NOTHING)
-                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
-                vec_tree_path_to_delete.push(model.path(&next_iter).unwrap());
-                break 'main;
-            }
-
-            if model.value(&next_next_iter, column_color).get::<String>().unwrap() == HEADER_ROW_COLOR {
-                // One child between two headers, we can remove them  (H1 -> C1 -> H2) -> (H2)
-                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
-                vec_tree_path_to_delete.push(model.path(&next_iter).unwrap());
-                current_iter = next_next_iter.clone();
-                continue 'main;
-            }
-
-            loop {
-                // (H1 -> C1 -> C2 -> Cn -> END) -> (NO CHANGE, BECAUSE IS GOOD)
-                if !model.iter_next(&next_next_iter) {
-                    break 'main;
-                }
-                // Move to next header
-                if model.value(&next_next_iter, column_color).get::<String>().unwrap() == HEADER_ROW_COLOR {
-                    current_iter = next_next_iter.clone();
-                    continue 'main;
-                }
-            }
-        }
-        for tree_path in vec_tree_path_to_delete.iter().rev() {
-            model.remove(&model.iter(tree_path).unwrap());
-        }
+    if selected_rows.is_empty() {
+        return; // No selected rows
     }
 
-    // Last step, remove orphan header if exists
-    if let Some(iter) = model.iter_first() {
-        if !model.iter_next(&iter) {
-            model.clear();
-        }
-    }
+    move_files_common(&selected_rows, &model, column_file_name, column_path, &destination_folder, entry_info, text_view_errors);
 
-    text_view_errors.buffer().unwrap().set_text(messages.as_str());
+    clean_invalid_headers(&model, column_color);
 }
-fn move_with_list(tree_view: gtk::TreeView, column_file_name: i32, column_path: i32, column_selection: i32, gui_data: &GuiData, destination_folder: PathBuf) {
-    let text_view_errors = gui_data.text_view_errors.clone();
-    let entry_info = gui_data.entry_info.clone();
 
-    let model = get_list_store(&tree_view);
+fn move_with_list(tree_view: &gtk::TreeView, column_file_name: i32, column_path: i32, column_selection: i32, destination_folder: PathBuf, entry_info: &gtk::Entry, text_view_errors: &gtk::TextView) {
+    let model = get_list_store(tree_view);
 
-    let mut messages: String = "".to_string();
-
-    let mut selection_rows = Vec::new();
+    let mut selected_rows = Vec::new();
 
     if let Some(iter) = model.iter_first() {
         loop {
             if model.value(&iter, column_selection).get::<bool>().unwrap() {
-                selection_rows.push(model.path(&iter).unwrap());
+                selected_rows.push(model.path(&iter).unwrap());
             }
 
             if !model.iter_next(&iter) {
@@ -307,10 +136,20 @@
         }
     }
 
+    if selected_rows.is_empty() {
+        return; // No selected rows
+    }
+
+    move_files_common(&selected_rows, &model, column_file_name, column_path, &destination_folder, entry_info, text_view_errors)
+}
+
+fn move_files_common(selected_rows: &[TreePath], model: &gtk::ListStore, column_file_name: i32, column_path: i32, destination_folder: &Path, entry_info: &gtk::Entry, text_view_errors: &gtk::TextView) {
+    let mut messages: String = "".to_string();
+
     let mut moved_files: u32 = 0;
 
     // Save to variable paths of files, and remove it when not removing all occurrences.
-    'next_result: for tree_path in selection_rows.iter().rev() {
+    'next_result: for tree_path in selected_rows.iter().rev() {
         let iter = model.iter(tree_path).unwrap();
 
         let file_name = model.value(&iter, column_file_name).get::<String>().unwrap();
@@ -332,7 +171,7 @@
         model.remove(&iter);
         moved_files += 1;
     }
-    entry_info.set_text(format!("Properly moved {}/{} files/folders", moved_files, selection_rows.len()).as_str());
+    entry_info.set_text(format!("Properly moved {}/{} files/folders", moved_files, selected_rows.len()).as_str());
 
     text_view_errors.buffer().unwrap().set_text(messages.as_str());
 }
diff -Naur orig/czkawka_gui/src/connect_button_save.rs patched/czkawka_gui/src/connect_button_save.rs
--- orig/czkawka_gui/src/connect_button_save.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_button_save.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,21 +1,30 @@
+use std::cell::RefCell;
+use std::collections::HashMap;
+use std::rc::Rc;
+
+use gtk::prelude::*;
+use gtk::{Button, Entry};
+
+use czkawka_core::common_traits::SaveResults;
+
 use crate::gui_data::GuiData;
 use crate::notebook_enums::*;
-use czkawka_core::common_traits::SaveResults;
-use gtk::prelude::*;
 
 pub fn connect_button_save(gui_data: &GuiData) {
-    let gui_data = gui_data.clone();
     let buttons_save = gui_data.bottom_buttons.buttons_save.clone();
+    let buttons_save_clone = gui_data.bottom_buttons.buttons_save.clone();
     let shared_duplication_state = gui_data.shared_duplication_state.clone();
     let shared_empty_folders_state = gui_data.shared_empty_folders_state.clone();
     let shared_big_files_state = gui_data.shared_big_files_state.clone();
     let shared_temporary_files_state = gui_data.shared_temporary_files_state.clone();
     let shared_empty_files_state = gui_data.shared_empty_files_state.clone();
     let shared_similar_images_state = gui_data.shared_similar_images_state.clone();
+    let shared_similar_videos_state = gui_data.shared_similar_videos_state.clone();
     let shared_same_music_state = gui_data.shared_same_music_state.clone();
-    let shared_zeroed_files_state = gui_data.shared_zeroed_files_state.clone();
     let shared_same_invalid_symlinks = gui_data.shared_same_invalid_symlinks.clone();
     let shared_broken_files_state = gui_data.shared_broken_files_state.clone();
+    let shared_buttons = gui_data.shared_buttons.clone();
+    let entry_info = gui_data.entry_info.clone();
     let notebook_main = gui_data.main_notebook.notebook_main.clone();
     buttons_save.connect_clicked(move |_| {
         let file_name;
@@ -51,10 +60,10 @@
 
                 shared_similar_images_state.borrow_mut().save_results_to_file(file_name);
             }
-            NotebookMainEnum::Zeroed => {
-                file_name = "results_zeroed_files.txt";
+            NotebookMainEnum::SimilarVideos => {
+                file_name = "results_similar_videos.txt";
 
-                shared_zeroed_files_state.borrow_mut().save_results_to_file(file_name);
+                shared_similar_videos_state.borrow_mut().save_results_to_file(file_name);
             }
             NotebookMainEnum::SameMusic => {
                 file_name = "results_same_music.txt";
@@ -72,14 +81,11 @@
                 shared_broken_files_state.borrow_mut().save_results_to_file(file_name);
             }
         }
-        post_save_things(file_name, &to_notebook_main_enum(notebook_main.current_page().unwrap()), &gui_data);
+        post_save_things(file_name, &to_notebook_main_enum(notebook_main.current_page().unwrap()), &shared_buttons, &entry_info, &buttons_save_clone);
     });
 }
-fn post_save_things(file_name: &str, type_of_tab: &NotebookMainEnum, gui_data: &GuiData) {
-    let entry_info = gui_data.entry_info.clone();
-    let buttons_save = gui_data.bottom_buttons.buttons_save.clone();
-    let shared_buttons = gui_data.shared_buttons.clone();
 
+fn post_save_things(file_name: &str, type_of_tab: &NotebookMainEnum, shared_buttons: &Rc<RefCell<HashMap<NotebookMainEnum, HashMap<String, bool>>>>, entry_info: &Entry, buttons_save: &Button) {
     entry_info.set_text(format!("Saved results to file {}", file_name).as_str());
     // Set state
     {
diff -Naur orig/czkawka_gui/src/connect_button_search.rs patched/czkawka_gui/src/connect_button_search.rs
--- orig/czkawka_gui/src/connect_button_search.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_button_search.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,8 +1,11 @@
-use czkawka_core::*;
+use std::sync::atomic::{AtomicBool, Ordering};
+use std::sync::Arc;
+use std::thread;
+
+use glib::Sender;
+use gtk::prelude::*;
+use img_hash::{FilterType, HashAlg};
 
-use crate::gui_data::GuiData;
-use crate::help_functions::*;
-use crate::notebook_enums::*;
 use czkawka_core::big_file::BigFile;
 use czkawka_core::broken_files::BrokenFiles;
 use czkawka_core::duplicate::{DuplicateFinder, HashType};
@@ -11,16 +14,13 @@
 use czkawka_core::invalid_symlinks::InvalidSymlinks;
 use czkawka_core::same_music::{MusicSimilarity, SameMusic};
 use czkawka_core::similar_images::SimilarImages;
+use czkawka_core::similar_videos::SimilarVideos;
 use czkawka_core::temporary::Temporary;
-use czkawka_core::zeroed::ZeroedFiles;
-use glib::Sender;
-use gtk::prelude::*;
-use gtk::WindowPosition;
-use img_hash::{FilterType, HashAlg};
-use std::sync::atomic::{AtomicBool, Ordering};
-use std::sync::Arc;
-use std::thread;
+use czkawka_core::*;
 
+use crate::gui_data::GuiData;
+use crate::help_functions::*;
+use crate::notebook_enums::*;
 use crate::taskbar_progress::tbp_flags::TBPF_NOPROGRESS;
 
 #[allow(clippy::too_many_arguments)]
@@ -33,77 +33,89 @@
     futures_sender_big_file: futures::channel::mpsc::UnboundedSender<big_file::ProgressData>,
     futures_sender_same_music: futures::channel::mpsc::UnboundedSender<same_music::ProgressData>,
     futures_sender_similar_images: futures::channel::mpsc::UnboundedSender<similar_images::ProgressData>,
+    futures_sender_similar_videos: futures::channel::mpsc::UnboundedSender<similar_videos::ProgressData>,
     futures_sender_temporary: futures::channel::mpsc::UnboundedSender<temporary::ProgressData>,
-    futures_sender_zeroed: futures::channel::mpsc::UnboundedSender<zeroed::ProgressData>,
     futures_sender_invalid_symlinks: futures::channel::mpsc::UnboundedSender<invalid_symlinks::ProgressData>,
     futures_sender_broken_files: futures::channel::mpsc::UnboundedSender<broken_files::ProgressData>,
 ) {
-    let entry_info = gui_data.entry_info.clone();
-    let notebook_main = gui_data.main_notebook.notebook_main.clone();
-    let tree_view_included_directories = gui_data.upper_notebook.tree_view_included_directories.clone();
-    let tree_view_excluded_directories = gui_data.upper_notebook.tree_view_excluded_directories.clone();
-    let buttons_search_clone = gui_data.bottom_buttons.buttons_search.clone();
     let buttons_array = gui_data.bottom_buttons.buttons_array.clone();
+    let buttons_names = gui_data.bottom_buttons.buttons_names.clone();
+    let buttons_search_clone = gui_data.bottom_buttons.buttons_search.clone();
+    let check_button_duplicates_use_prehash_cache = gui_data.settings.check_button_duplicates_use_prehash_cache.clone();
+    let check_button_music_album_artist: gtk::CheckButton = gui_data.main_notebook.check_button_music_album_artist.clone();
+    let check_button_music_album_title: gtk::CheckButton = gui_data.main_notebook.check_button_music_album_title.clone();
+    let check_button_music_artist: gtk::CheckButton = gui_data.main_notebook.check_button_music_artist.clone();
+    let check_button_music_title: gtk::CheckButton = gui_data.main_notebook.check_button_music_title.clone();
+    let check_button_music_year: gtk::CheckButton = gui_data.main_notebook.check_button_music_year.clone();
     let check_button_recursive = gui_data.upper_notebook.check_button_recursive.clone();
-    let entry_excluded_items = gui_data.upper_notebook.entry_excluded_items.clone();
-    let entry_same_music_minimal_size = gui_data.main_notebook.entry_same_music_minimal_size.clone();
-    let entry_same_music_maximal_size = gui_data.main_notebook.entry_same_music_maximal_size.clone();
+    let check_button_settings_duplicates_delete_outdated_cache = gui_data.settings.check_button_settings_duplicates_delete_outdated_cache.clone();
+    let check_button_settings_hide_hard_links = gui_data.settings.check_button_settings_hide_hard_links.clone();
+    let check_button_settings_similar_images_delete_outdated_cache = gui_data.settings.check_button_settings_similar_images_delete_outdated_cache.clone();
+    let check_button_settings_similar_videos_delete_outdated_cache = gui_data.settings.check_button_settings_similar_videos_delete_outdated_cache.clone();
+    let check_button_settings_use_cache = gui_data.settings.check_button_settings_use_cache.clone();
     let entry_allowed_extensions = gui_data.upper_notebook.entry_allowed_extensions.clone();
-    let buttons_names = gui_data.bottom_buttons.buttons_names.clone();
-    let radio_button_duplicates_name = gui_data.main_notebook.radio_button_duplicates_name.clone();
-    let radio_button_duplicates_size = gui_data.main_notebook.radio_button_duplicates_size.clone();
-    let radio_button_duplicates_hashmb = gui_data.main_notebook.radio_button_duplicates_hashmb.clone();
-    let radio_button_duplicates_hash = gui_data.main_notebook.radio_button_duplicates_hash.clone();
-    let scale_similarity = gui_data.main_notebook.scale_similarity.clone();
-    let entry_duplicate_minimal_size = gui_data.main_notebook.entry_duplicate_minimal_size.clone();
-    let entry_duplicate_maximal_size = gui_data.main_notebook.entry_duplicate_maximal_size.clone();
-    let stop_receiver = gui_data.stop_receiver.clone();
     let entry_big_files_number = gui_data.main_notebook.entry_big_files_number.clone();
-    let entry_similar_images_minimal_size = gui_data.main_notebook.entry_similar_images_minimal_size.clone();
+    let entry_duplicate_maximal_size = gui_data.main_notebook.entry_duplicate_maximal_size.clone();
+    let entry_duplicate_minimal_size = gui_data.main_notebook.entry_duplicate_minimal_size.clone();
+    let entry_excluded_items = gui_data.upper_notebook.entry_excluded_items.clone();
+    let entry_same_music_maximal_size = gui_data.main_notebook.entry_same_music_maximal_size.clone();
+    let entry_same_music_minimal_size = gui_data.main_notebook.entry_same_music_minimal_size.clone();
+    let entry_settings_cache_file_minimal_size = gui_data.settings.entry_settings_cache_file_minimal_size.clone();
+    let entry_settings_prehash_cache_file_minimal_size = gui_data.settings.entry_settings_prehash_cache_file_minimal_size.clone();
     let entry_similar_images_maximal_size = gui_data.main_notebook.entry_similar_images_maximal_size.clone();
-    let check_button_music_title: gtk::CheckButton = gui_data.main_notebook.check_button_music_title.clone();
-    let check_button_music_artist: gtk::CheckButton = gui_data.main_notebook.check_button_music_artist.clone();
-    let check_button_music_album_title: gtk::CheckButton = gui_data.main_notebook.check_button_music_album_title.clone();
-    let check_button_music_album_artist: gtk::CheckButton = gui_data.main_notebook.check_button_music_album_artist.clone();
-    let check_button_music_year: gtk::CheckButton = gui_data.main_notebook.check_button_music_year.clone();
-    let shared_buttons = gui_data.shared_buttons.clone();
-    let tree_view_empty_folder_finder = gui_data.main_notebook.tree_view_empty_folder_finder.clone();
-    let tree_view_empty_files_finder = gui_data.main_notebook.tree_view_empty_files_finder.clone();
-    let tree_view_big_files_finder = gui_data.main_notebook.tree_view_big_files_finder.clone();
-    let tree_view_duplicate_finder = gui_data.main_notebook.tree_view_duplicate_finder.clone();
-    let tree_view_temporary_files_finder = gui_data.main_notebook.tree_view_temporary_files_finder.clone();
-    let tree_view_same_music_finder = gui_data.main_notebook.tree_view_same_music_finder.clone();
-    let tree_view_similar_images_finder = gui_data.main_notebook.tree_view_similar_images_finder.clone();
-    let tree_view_zeroed_files_finder = gui_data.main_notebook.tree_view_zeroed_files_finder.clone();
-    let tree_view_invalid_symlinks = gui_data.main_notebook.tree_view_invalid_symlinks.clone();
-    let tree_view_broken_files = gui_data.main_notebook.tree_view_broken_files.clone();
-    let text_view_errors = gui_data.text_view_errors.clone();
-    let window_progress = gui_data.progress_window.window_progress.clone();
-    let label_stage = gui_data.progress_window.label_stage.clone();
+    let entry_similar_images_minimal_size = gui_data.main_notebook.entry_similar_images_minimal_size.clone();
+    let entry_similar_videos_maximal_size = gui_data.main_notebook.entry_similar_videos_maximal_size.clone();
+    let entry_similar_videos_minimal_size = gui_data.main_notebook.entry_similar_videos_minimal_size.clone();
     let grid_progress_stages = gui_data.progress_window.grid_progress_stages.clone();
-    let progress_bar_current_stage = gui_data.progress_window.progress_bar_current_stage.clone();
-    let progress_bar_all_stages = gui_data.progress_window.progress_bar_all_stages.clone();
-    let taskbar_state = gui_data.taskbar_state.clone();
     let image_preview_similar_images = gui_data.main_notebook.image_preview_similar_images.clone();
+    let label_stage = gui_data.progress_window.label_stage.clone();
+    let notebook_main = gui_data.main_notebook.notebook_main.clone();
+    let notebook_upper = gui_data.upper_notebook.notebook_upper.clone();
+    let progress_bar_all_stages = gui_data.progress_window.progress_bar_all_stages.clone();
+    let progress_bar_current_stage = gui_data.progress_window.progress_bar_current_stage.clone();
+    let radio_button_duplicates_hash = gui_data.main_notebook.radio_button_duplicates_hash.clone();
+    let radio_button_duplicates_name = gui_data.main_notebook.radio_button_duplicates_name.clone();
+    let radio_button_duplicates_size = gui_data.main_notebook.radio_button_duplicates_size.clone();
     let radio_button_hash_type_blake3 = gui_data.main_notebook.radio_button_hash_type_blake3.clone();
     let radio_button_hash_type_crc32 = gui_data.main_notebook.radio_button_hash_type_crc32.clone();
     let radio_button_hash_type_xxh3 = gui_data.main_notebook.radio_button_hash_type_xxh3.clone();
-    let check_button_settings_hide_hard_links = gui_data.settings.check_button_settings_hide_hard_links.clone();
-    let check_button_settings_use_cache = gui_data.settings.check_button_settings_use_cache.clone();
-    let entry_settings_cache_file_minimal_size = gui_data.settings.entry_settings_cache_file_minimal_size.clone();
-    let radio_button_similar_hash_size_4 = gui_data.main_notebook.radio_button_similar_hash_size_4.clone();
-    let radio_button_similar_hash_size_8 = gui_data.main_notebook.radio_button_similar_hash_size_8.clone();
-    let radio_button_similar_hash_size_16 = gui_data.main_notebook.radio_button_similar_hash_size_16.clone();
     let radio_button_resize_algorithm_catmullrom = gui_data.main_notebook.radio_button_resize_algorithm_catmullrom.clone();
+    let radio_button_resize_algorithm_gaussian = gui_data.main_notebook.radio_button_resize_algorithm_gaussian.clone();
     let radio_button_resize_algorithm_lanczos3 = gui_data.main_notebook.radio_button_resize_algorithm_lanczos3.clone();
     let radio_button_resize_algorithm_nearest = gui_data.main_notebook.radio_button_resize_algorithm_nearest.clone();
     let radio_button_resize_algorithm_triangle = gui_data.main_notebook.radio_button_resize_algorithm_triangle.clone();
-    let radio_button_resize_algorithm_gaussian = gui_data.main_notebook.radio_button_resize_algorithm_gaussian.clone();
-    let radio_button_similar_hash_algorithm_gradient = gui_data.main_notebook.radio_button_similar_hash_algorithm_gradient.clone();
     let radio_button_similar_hash_algorithm_blockhash = gui_data.main_notebook.radio_button_similar_hash_algorithm_blockhash.clone();
+    let radio_button_similar_hash_algorithm_doublegradient = gui_data.main_notebook.radio_button_similar_hash_algorithm_doublegradient.clone();
+    let radio_button_similar_hash_algorithm_gradient = gui_data.main_notebook.radio_button_similar_hash_algorithm_gradient.clone();
     let radio_button_similar_hash_algorithm_mean = gui_data.main_notebook.radio_button_similar_hash_algorithm_mean.clone();
     let radio_button_similar_hash_algorithm_vertgradient = gui_data.main_notebook.radio_button_similar_hash_algorithm_vertgradient.clone();
-    let radio_button_similar_hash_algorithm_doublegradient = gui_data.main_notebook.radio_button_similar_hash_algorithm_doublegradient.clone();
+    let radio_button_similar_hash_size_16 = gui_data.main_notebook.radio_button_similar_hash_size_16.clone();
+    let radio_button_similar_hash_size_32 = gui_data.main_notebook.radio_button_similar_hash_size_32.clone();
+    let radio_button_similar_hash_size_64 = gui_data.main_notebook.radio_button_similar_hash_size_64.clone();
+    let radio_button_similar_hash_size_8 = gui_data.main_notebook.radio_button_similar_hash_size_8.clone();
+    let scale_similarity_similar_images = gui_data.main_notebook.scale_similarity_similar_images.clone();
+    let scale_similarity_similar_videos = gui_data.main_notebook.scale_similarity_similar_videos.clone();
+    let shared_buttons = gui_data.shared_buttons.clone();
+    let stop_receiver = gui_data.stop_receiver.clone();
+    let taskbar_state = gui_data.taskbar_state.clone();
+    let text_view_errors = gui_data.text_view_errors.clone();
+    let tree_view_big_files_finder = gui_data.main_notebook.tree_view_big_files_finder.clone();
+    let tree_view_broken_files = gui_data.main_notebook.tree_view_broken_files.clone();
+    let tree_view_duplicate_finder = gui_data.main_notebook.tree_view_duplicate_finder.clone();
+    let tree_view_empty_files_finder = gui_data.main_notebook.tree_view_empty_files_finder.clone();
+    let tree_view_empty_folder_finder = gui_data.main_notebook.tree_view_empty_folder_finder.clone();
+    let tree_view_excluded_directories = gui_data.upper_notebook.tree_view_excluded_directories.clone();
+    let tree_view_included_directories = gui_data.upper_notebook.tree_view_included_directories.clone();
+    let tree_view_invalid_symlinks = gui_data.main_notebook.tree_view_invalid_symlinks.clone();
+    let tree_view_same_music_finder = gui_data.main_notebook.tree_view_same_music_finder.clone();
+    let tree_view_similar_images_finder = gui_data.main_notebook.tree_view_similar_images_finder.clone();
+    let tree_view_similar_videos_finder = gui_data.main_notebook.tree_view_similar_videos_finder.clone();
+    let tree_view_temporary_files_finder = gui_data.main_notebook.tree_view_temporary_files_finder.clone();
+    let window_progress = gui_data.progress_window.window_progress.clone();
+    let entry_info = gui_data.entry_info.clone();
+    let button_settings = gui_data.header.button_settings.clone();
+    let button_app_info = gui_data.header.button_app_info.clone();
+    let check_button_music_approximate_comparison = gui_data.main_notebook.check_button_music_approximate_comparison.clone();
 
     buttons_search_clone.connect_clicked(move |_| {
         let included_directories = get_path_buf_from_vector_of_strings(get_string_from_list_store(&tree_view_included_directories));
@@ -113,20 +125,19 @@
         let allowed_extensions = entry_allowed_extensions.text().as_str().to_string();
         let hide_hard_links = check_button_settings_hide_hard_links.is_active();
         let use_cache = check_button_settings_use_cache.is_active();
-        let minimal_cache_file_size = entry_settings_cache_file_minimal_size.text().as_str().parse::<u64>().unwrap_or(2 * 1024 * 1024);
+        let minimal_cache_file_size = entry_settings_cache_file_minimal_size.text().as_str().parse::<u64>().unwrap_or(1024 * 1024 / 4);
 
         let show_dialog = Arc::new(AtomicBool::new(true));
 
         hide_all_buttons(&buttons_array);
 
-        // Disable main notebook from any iteration until search will end
         notebook_main.set_sensitive(false);
+        notebook_upper.set_sensitive(false);
+        button_settings.set_sensitive(false);
+        button_app_info.set_sensitive(false);
 
         entry_info.set_text("Searching data, it may take a while, please wait...");
 
-        // Set dialog to center to current screen(it is impossible to center it to main window)
-        window_progress.set_position(WindowPosition::Center);
-
         // Resets progress bars
         progress_bar_all_stages.set_fraction(0 as f64);
         progress_bar_current_stage.set_fraction(0 as f64);
@@ -149,8 +160,6 @@
                     check_method = duplicate::CheckingMethod::Name;
                 } else if radio_button_duplicates_size.is_active() {
                     check_method = duplicate::CheckingMethod::Size;
-                } else if radio_button_duplicates_hashmb.is_active() {
-                    check_method = duplicate::CheckingMethod::HashMb;
                 } else if radio_button_duplicates_hash.is_active() {
                     check_method = duplicate::CheckingMethod::Hash;
                 } else {
@@ -170,6 +179,11 @@
                     panic!("No radio button is pressed");
                 }
 
+                let use_prehash_cache = check_button_duplicates_use_prehash_cache.is_active();
+                let minimal_prehash_cache_file_size = entry_settings_prehash_cache_file_minimal_size.text().as_str().parse::<u64>().unwrap_or(0);
+
+                let delete_outdated_cache = check_button_settings_duplicates_delete_outdated_cache.is_active();
+
                 let futures_sender_duplicate_files = futures_sender_duplicate_files.clone();
                 // Find duplicates
                 thread::spawn(move || {
@@ -182,10 +196,13 @@
                     df.set_minimal_file_size(minimal_file_size);
                     df.set_maximal_file_size(maximal_file_size);
                     df.set_minimal_cache_file_size(minimal_cache_file_size);
+                    df.set_minimal_prehash_cache_file_size(minimal_prehash_cache_file_size);
                     df.set_check_method(check_method);
                     df.set_hash_type(hash_type);
                     df.set_ignore_hard_links(hide_hard_links);
                     df.set_use_cache(use_cache);
+                    df.set_use_prehash_cache(use_prehash_cache);
+                    df.set_delete_outdated_cache(delete_outdated_cache);
                     df.find_duplicates(Some(&stop_receiver), Some(&futures_sender_duplicate_files));
                     let _ = glib_stop_sender.send(Message::Duplicates(df));
                 });
@@ -282,12 +299,14 @@
                 get_list_store(&tree_view_similar_images_finder).clear();
 
                 let hash_size;
-                if radio_button_similar_hash_size_4.is_active() {
-                    hash_size = 4;
-                } else if radio_button_similar_hash_size_8.is_active() {
+                if radio_button_similar_hash_size_8.is_active() {
                     hash_size = 8;
                 } else if radio_button_similar_hash_size_16.is_active() {
                     hash_size = 16;
+                } else if radio_button_similar_hash_size_32.is_active() {
+                    hash_size = 32;
+                } else if radio_button_similar_hash_size_64.is_active() {
+                    hash_size = 64;
                 } else {
                     panic!("No radio button is pressed");
                 }
@@ -325,7 +344,9 @@
                 let minimal_file_size = entry_similar_images_minimal_size.text().as_str().parse::<u64>().unwrap_or(1024 * 16);
                 let maximal_file_size = entry_similar_images_maximal_size.text().as_str().parse::<u64>().unwrap_or(1024 * 1024 * 1024 * 1024);
 
-                let similarity = similar_images::Similarity::Similar(scale_similarity.value() as u32);
+                let similarity = similar_images::Similarity::Similar(scale_similarity_similar_images.value() as u32);
+
+                let delete_outdated_cache = check_button_settings_similar_images_delete_outdated_cache.is_active();
 
                 let futures_sender_similar_images = futures_sender_similar_images.clone();
                 // Find similar images
@@ -343,29 +364,41 @@
                     sf.set_hash_alg(hash_alg);
                     sf.set_hash_size(hash_size);
                     sf.set_image_filter(image_filter);
+                    sf.set_delete_outdated_cache(delete_outdated_cache);
                     sf.find_similar_images(Some(&stop_receiver), Some(&futures_sender_similar_images));
                     let _ = glib_stop_sender.send(Message::SimilarImages(sf));
                 });
             }
-            NotebookMainEnum::Zeroed => {
+            NotebookMainEnum::SimilarVideos => {
                 label_stage.show();
                 grid_progress_stages.show_all();
                 window_progress.resize(1, 1);
 
-                get_list_store(&tree_view_zeroed_files_finder).clear();
+                get_list_store(&tree_view_similar_videos_finder).clear();
+
+                let minimal_file_size = entry_similar_videos_minimal_size.text().as_str().parse::<u64>().unwrap_or(1024 * 16);
+                let maximal_file_size = entry_similar_videos_maximal_size.text().as_str().parse::<u64>().unwrap_or(1024 * 1024 * 1024 * 1024);
+
+                let tolerance = scale_similarity_similar_videos.value() as i32;
+
+                let delete_outdated_cache = check_button_settings_similar_videos_delete_outdated_cache.is_active();
 
-                let futures_sender_zeroed = futures_sender_zeroed.clone();
-                // Find zeroed files
+                let futures_sender_similar_videos = futures_sender_similar_videos.clone();
+                // Find similar videos
                 thread::spawn(move || {
-                    let mut zf = ZeroedFiles::new();
+                    let mut sf = SimilarVideos::new();
 
-                    zf.set_included_directory(included_directories);
-                    zf.set_excluded_directory(excluded_directories);
-                    zf.set_recursive_search(recursive_search);
-                    zf.set_excluded_items(excluded_items);
-                    zf.set_allowed_extensions(allowed_extensions);
-                    zf.find_zeroed_files(Some(&stop_receiver), Some(&futures_sender_zeroed));
-                    let _ = glib_stop_sender.send(Message::ZeroedFiles(zf));
+                    sf.set_included_directory(included_directories);
+                    sf.set_excluded_directory(excluded_directories);
+                    sf.set_recursive_search(recursive_search);
+                    sf.set_excluded_items(excluded_items);
+                    sf.set_minimal_file_size(minimal_file_size);
+                    sf.set_maximal_file_size(maximal_file_size);
+                    sf.set_use_cache(use_cache);
+                    sf.set_tolerance(tolerance);
+                    sf.set_delete_outdated_cache(delete_outdated_cache);
+                    sf.find_similar_videos(Some(&stop_receiver), Some(&futures_sender_similar_videos));
+                    let _ = glib_stop_sender.send(Message::SimilarVideos(sf));
                 });
             }
             NotebookMainEnum::SameMusic => {
@@ -377,6 +410,7 @@
 
                 let minimal_file_size = entry_same_music_minimal_size.text().as_str().parse::<u64>().unwrap_or(1024 * 8);
                 let maximal_file_size = entry_same_music_maximal_size.text().as_str().parse::<u64>().unwrap_or(1024 * 1024 * 1024 * 1024);
+                let approximate_comparison = check_button_music_approximate_comparison.is_active();
 
                 let mut music_similarity: MusicSimilarity = MusicSimilarity::NONE;
 
@@ -409,11 +443,11 @@
                         mf.set_maximal_file_size(maximal_file_size);
                         mf.set_recursive_search(recursive_search);
                         mf.set_music_similarity(music_similarity);
+                        mf.set_approximate_comparison(approximate_comparison);
                         mf.find_same_music(Some(&stop_receiver), Some(&futures_sender_same_music));
                         let _ = glib_stop_sender.send(Message::SameMusic(mf));
                     });
                 } else {
-                    notebook_main.set_sensitive(true);
                     set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SameMusic).unwrap(), &buttons_array, &buttons_names);
                     entry_info.set_text("ERROR: You must select at least one checkbox with music searching types.");
                     show_dialog.store(false, Ordering::Relaxed);
diff -Naur orig/czkawka_gui/src/connect_button_select.rs patched/czkawka_gui/src/connect_button_select.rs
--- orig/czkawka_gui/src/connect_button_select.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_button_select.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,68 +1,61 @@
+use std::collections::HashMap;
+
+use gtk::prelude::*;
+
 use crate::gui_data::GuiData;
+use crate::gui_popovers::GuiPopovers;
+use crate::help_functions::PopoverTypes;
 use crate::notebook_enums::*;
-use gtk::prelude::*;
-use std::collections::HashMap;
-//  TODO Replace `all`, `image_size` etc. with this
-// pub enum PopoverType {
-//     All,
-//     ImageSize,
-//     Reverse,
-//     Custom,
-//     Date,
-// }
 
 pub fn connect_button_select(gui_data: &GuiData) {
-    // let mode = ["all", "image_size", "reverse", "custom", "date"];
-    let mut hashmap: HashMap<NotebookMainEnum, Vec<&str>> = Default::default();
+    let mut hashmap: HashMap<NotebookMainEnum, Vec<PopoverTypes>> = Default::default();
     {
-        // Remember to update connect_popovers file, because this data are connected to each others
-        hashmap.insert(NotebookMainEnum::SimilarImages, vec!["all", "image_size", "reverse", "custom", "date"]);
-        hashmap.insert(NotebookMainEnum::Duplicate, vec!["all", "reverse", "custom", "date"]);
-        hashmap.insert(NotebookMainEnum::SameMusic, vec!["all", "reverse", "custom", "date"]);
-
-        hashmap.insert(NotebookMainEnum::EmptyFiles, vec!["all", "reverse", "custom"]);
-        hashmap.insert(NotebookMainEnum::EmptyDirectories, vec!["all", "reverse", "custom"]);
-        hashmap.insert(NotebookMainEnum::BigFiles, vec!["all", "reverse", "custom"]);
-        hashmap.insert(NotebookMainEnum::Symlinks, vec!["all", "reverse", "custom"]);
-        hashmap.insert(NotebookMainEnum::Zeroed, vec!["all", "reverse", "custom"]);
-        hashmap.insert(NotebookMainEnum::Temporary, vec!["all", "reverse", "custom"]);
-        hashmap.insert(NotebookMainEnum::BrokenFiles, vec!["all", "reverse", "custom"]);
+        hashmap.insert(NotebookMainEnum::SimilarImages, vec![PopoverTypes::All, PopoverTypes::Size, PopoverTypes::Reverse, PopoverTypes::Custom, PopoverTypes::Date]);
+        hashmap.insert(NotebookMainEnum::SimilarVideos, vec![PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom, PopoverTypes::Date, PopoverTypes::Size]);
+        hashmap.insert(NotebookMainEnum::Duplicate, vec![PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom, PopoverTypes::Date]);
+        hashmap.insert(NotebookMainEnum::SameMusic, vec![PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom, PopoverTypes::Date, PopoverTypes::Size]);
+
+        hashmap.insert(NotebookMainEnum::EmptyFiles, vec![PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom]);
+        hashmap.insert(NotebookMainEnum::EmptyDirectories, vec![PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom]);
+        hashmap.insert(NotebookMainEnum::BigFiles, vec![PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom]);
+        hashmap.insert(NotebookMainEnum::Symlinks, vec![PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom]);
+        hashmap.insert(NotebookMainEnum::Temporary, vec![PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom]);
+        hashmap.insert(NotebookMainEnum::BrokenFiles, vec![PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom]);
     }
+    assert_eq!(hashmap.len(), NUMBER_OF_NOTEBOOK_MAIN_TABS);
 
-    let gui_data = gui_data.clone();
+    let popovers = gui_data.popovers.clone();
     let notebook_main = gui_data.main_notebook.notebook_main.clone();
-    let buttons_select_clone = gui_data.bottom_buttons.buttons_select.clone();
     let popover_select = gui_data.popovers.popover_select.clone();
     let buttons_select = gui_data.bottom_buttons.buttons_select.clone();
 
-    buttons_select_clone.connect_clicked(move |_| {
-        show_required_popovers(&gui_data, &to_notebook_main_enum(notebook_main.current_page().unwrap()), &hashmap);
-        popover_select.set_relative_to(Some(&buttons_select));
+    buttons_select.connect_clicked(move |_| {
+        show_required_popovers(&popovers, &to_notebook_main_enum(notebook_main.current_page().unwrap()), &hashmap);
         popover_select.popup();
     });
 }
 
-fn show_required_popovers(gui_data: &GuiData, current_mode: &NotebookMainEnum, hashmap: &HashMap<NotebookMainEnum, Vec<&str>>) {
-    let buttons_popover_select_all = gui_data.popovers.buttons_popover_select_all.clone();
-    let buttons_popover_unselect_all = gui_data.popovers.buttons_popover_unselect_all.clone();
-    let buttons_popover_reverse = gui_data.popovers.buttons_popover_reverse.clone();
-    let buttons_popover_select_all_except_oldest = gui_data.popovers.buttons_popover_select_all_except_oldest.clone();
-    let buttons_popover_select_all_except_newest = gui_data.popovers.buttons_popover_select_all_except_newest.clone();
-    let buttons_popover_select_one_oldest = gui_data.popovers.buttons_popover_select_one_oldest.clone();
-    let buttons_popover_select_one_newest = gui_data.popovers.buttons_popover_select_one_newest.clone();
-    let buttons_popover_select_custom = gui_data.popovers.buttons_popover_select_custom.clone();
-    let buttons_popover_unselect_custom = gui_data.popovers.buttons_popover_unselect_custom.clone();
-    let buttons_popover_select_all_images_except_biggest = gui_data.popovers.buttons_popover_select_all_images_except_biggest.clone();
-    let buttons_popover_select_all_images_except_smallest = gui_data.popovers.buttons_popover_select_all_images_except_smallest.clone();
-
-    let separator_select_custom = gui_data.popovers.separator_select_custom.clone();
-    let separator_select_date = gui_data.popovers.separator_select_date.clone();
-    let separator_select_image_size = gui_data.popovers.separator_select_image_size.clone();
-    let separator_select_reverse = gui_data.popovers.separator_select_reverse.clone();
+fn show_required_popovers(popovers: &GuiPopovers, current_mode: &NotebookMainEnum, hashmap: &HashMap<NotebookMainEnum, Vec<PopoverTypes>>) {
+    let buttons_popover_select_all = popovers.buttons_popover_select_all.clone();
+    let buttons_popover_unselect_all = popovers.buttons_popover_unselect_all.clone();
+    let buttons_popover_reverse = popovers.buttons_popover_reverse.clone();
+    let buttons_popover_select_all_except_oldest = popovers.buttons_popover_select_all_except_oldest.clone();
+    let buttons_popover_select_all_except_newest = popovers.buttons_popover_select_all_except_newest.clone();
+    let buttons_popover_select_one_oldest = popovers.buttons_popover_select_one_oldest.clone();
+    let buttons_popover_select_one_newest = popovers.buttons_popover_select_one_newest.clone();
+    let buttons_popover_select_custom = popovers.buttons_popover_select_custom.clone();
+    let buttons_popover_unselect_custom = popovers.buttons_popover_unselect_custom.clone();
+    let buttons_popover_select_all_images_except_biggest = popovers.buttons_popover_select_all_images_except_biggest.clone();
+    let buttons_popover_select_all_images_except_smallest = popovers.buttons_popover_select_all_images_except_smallest.clone();
+
+    let separator_select_custom = popovers.separator_select_custom.clone();
+    let separator_select_date = popovers.separator_select_date.clone();
+    let separator_select_image_size = popovers.separator_select_image_size.clone();
+    let separator_select_reverse = popovers.separator_select_reverse.clone();
 
     let vec = hashmap.get(current_mode).unwrap();
 
-    if vec.contains(&"all") {
+    if vec.contains(&PopoverTypes::All) {
         buttons_popover_select_all.show();
         buttons_popover_unselect_all.show();
     } else {
@@ -70,7 +63,7 @@
         buttons_popover_unselect_all.hide();
     }
 
-    if vec.contains(&"image_size") {
+    if vec.contains(&PopoverTypes::Size) {
         buttons_popover_select_all_images_except_biggest.show();
         buttons_popover_select_all_images_except_smallest.show();
         separator_select_image_size.show();
@@ -80,7 +73,7 @@
         separator_select_image_size.hide();
     }
 
-    if vec.contains(&"reverse") {
+    if vec.contains(&PopoverTypes::Reverse) {
         buttons_popover_reverse.show();
         separator_select_reverse.show();
     } else {
@@ -88,7 +81,7 @@
         separator_select_reverse.hide();
     }
 
-    if vec.contains(&"custom") {
+    if vec.contains(&PopoverTypes::Custom) {
         buttons_popover_select_custom.show();
         buttons_popover_unselect_custom.show();
         separator_select_custom.show();
@@ -98,7 +91,7 @@
         separator_select_custom.hide();
     }
 
-    if vec.contains(&"date") {
+    if vec.contains(&PopoverTypes::Date) {
         buttons_popover_select_all_except_oldest.show();
         buttons_popover_select_all_except_newest.show();
         buttons_popover_select_one_oldest.show();
diff -Naur orig/czkawka_gui/src/connect_button_stop.rs patched/czkawka_gui/src/connect_button_stop.rs
--- orig/czkawka_gui/src/connect_button_stop.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_button_stop.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,15 +1,16 @@
-use crate::gui_data::GuiData;
 use gtk::prelude::*;
 
+use crate::gui_data::GuiData;
+use crate::help_functions::KEY_ENTER;
+
 pub fn connect_button_stop(gui_data: &GuiData) {
-    let button_stop_in_dialog = gui_data.progress_window.button_stop_in_dialog.clone();
+    let evk_button_stop_in_dialog = gui_data.progress_window.evk_button_stop_in_dialog.clone();
     let stop_sender = gui_data.stop_sender.clone();
-    button_stop_in_dialog.connect_key_release_event(move |_, e| {
-        if e.keycode() == Some(36) {
+    evk_button_stop_in_dialog.connect_key_released(move |_, _, key_code, _| {
+        if key_code == KEY_ENTER {
             // Only accept enter key to stop search
             stop_sender.send(()).unwrap();
         }
-        gtk::Inhibit(false)
     });
 
     let button_stop_in_dialog = gui_data.progress_window.button_stop_in_dialog.clone();
diff -Naur orig/czkawka_gui/src/connect_button_symlink.rs patched/czkawka_gui/src/connect_button_symlink.rs
--- orig/czkawka_gui/src/connect_button_symlink.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_button_symlink.rs	1970-01-01 01:00:00.000000000 +0100
@@ -1,58 +0,0 @@
-use crate::connect_button_hardlink::hardlink_symlink;
-use crate::gui_data::GuiData;
-use crate::help_functions::*;
-use crate::notebook_enums::*;
-use gtk::prelude::*;
-
-pub fn connect_button_symlink(gui_data: &GuiData) {
-    let gui_data = gui_data.clone();
-
-    let buttons_symlink = gui_data.bottom_buttons.buttons_symlink.clone();
-    let notebook_main = gui_data.main_notebook.notebook_main.clone();
-
-    let tree_view_duplicate_finder = gui_data.main_notebook.tree_view_duplicate_finder.clone();
-    let tree_view_similar_images_finder = gui_data.main_notebook.tree_view_similar_images_finder.clone();
-    let tree_view_same_music_finder = gui_data.main_notebook.tree_view_same_music_finder.clone();
-
-    let image_preview_similar_images = gui_data.main_notebook.image_preview_similar_images.clone();
-    let image_preview_duplicates = gui_data.main_notebook.image_preview_duplicates.clone();
-
-    buttons_symlink.connect_clicked(move |_| match to_notebook_main_enum(notebook_main.current_page().unwrap()) {
-        NotebookMainEnum::Duplicate => {
-            hardlink_symlink(
-                tree_view_duplicate_finder.clone(),
-                ColumnsDuplicates::Name as i32,
-                ColumnsDuplicates::Path as i32,
-                ColumnsDuplicates::Color as i32,
-                ColumnsDuplicates::ActiveSelectButton as i32,
-                false,
-                &gui_data,
-            );
-            image_preview_duplicates.hide();
-        }
-        NotebookMainEnum::SameMusic => {
-            hardlink_symlink(
-                tree_view_same_music_finder.clone(),
-                ColumnsSameMusic::Name as i32,
-                ColumnsSameMusic::Path as i32,
-                ColumnsSameMusic::Color as i32,
-                ColumnsSameMusic::ActiveSelectButton as i32,
-                false,
-                &gui_data,
-            );
-        }
-        NotebookMainEnum::SimilarImages => {
-            hardlink_symlink(
-                tree_view_similar_images_finder.clone(),
-                ColumnsSimilarImages::Name as i32,
-                ColumnsSimilarImages::Path as i32,
-                ColumnsSimilarImages::Color as i32,
-                ColumnsSimilarImages::ActiveSelectButton as i32,
-                false,
-                &gui_data,
-            );
-            image_preview_similar_images.hide();
-        }
-        e => panic!("Not existent {:?}", e),
-    });
-}
diff -Naur orig/czkawka_gui/src/connect_compute_results.rs patched/czkawka_gui/src/connect_compute_results.rs
--- orig/czkawka_gui/src/connect_compute_results.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_compute_results.rs	1970-01-01 01:00:00.000000000 +0100
@@ -1,904 +0,0 @@
-use humansize::{file_size_opts as options, FileSize};
-
-use crate::gui_data::GuiData;
-use crate::help_functions::*;
-use crate::notebook_enums::*;
-use chrono::NaiveDateTime;
-use czkawka_core::duplicate::CheckingMethod;
-use czkawka_core::same_music::MusicSimilarity;
-use czkawka_core::similar_images;
-use glib::Receiver;
-use gtk::prelude::*;
-use std::path::PathBuf;
-
-pub fn connect_compute_results(gui_data: &GuiData, glib_stop_receiver: Receiver<Message>) {
-    let buttons_search = gui_data.bottom_buttons.buttons_search.clone();
-    let notebook_main = gui_data.main_notebook.notebook_main.clone();
-    let entry_info = gui_data.entry_info.clone();
-    let tree_view_empty_folder_finder = gui_data.main_notebook.tree_view_empty_folder_finder.clone();
-    let tree_view_empty_files_finder = gui_data.main_notebook.tree_view_empty_files_finder.clone();
-    let tree_view_duplicate_finder = gui_data.main_notebook.tree_view_duplicate_finder.clone();
-    let tree_view_similar_images_finder = gui_data.main_notebook.tree_view_similar_images_finder.clone();
-    let buttons_array = gui_data.bottom_buttons.buttons_array.clone();
-    let text_view_errors = gui_data.text_view_errors.clone();
-    let shared_duplication_state = gui_data.shared_duplication_state.clone();
-    let shared_buttons = gui_data.shared_buttons.clone();
-    let tree_view_zeroed_files_finder = gui_data.main_notebook.tree_view_zeroed_files_finder.clone();
-    let shared_empty_folders_state = gui_data.shared_empty_folders_state.clone();
-    let shared_empty_files_state = gui_data.shared_empty_files_state.clone();
-    let shared_broken_files_state = gui_data.shared_broken_files_state.clone();
-    let tree_view_big_files_finder = gui_data.main_notebook.tree_view_big_files_finder.clone();
-    let tree_view_broken_files = gui_data.main_notebook.tree_view_broken_files.clone();
-    let tree_view_invalid_symlinks = gui_data.main_notebook.tree_view_invalid_symlinks.clone();
-    let shared_big_files_state = gui_data.shared_big_files_state.clone();
-    let shared_same_invalid_symlinks = gui_data.shared_same_invalid_symlinks.clone();
-    let tree_view_temporary_files_finder = gui_data.main_notebook.tree_view_temporary_files_finder.clone();
-    let shared_temporary_files_state = gui_data.shared_temporary_files_state.clone();
-    let shared_similar_images_state = gui_data.shared_similar_images_state.clone();
-    let shared_zeroed_files_state = gui_data.shared_zeroed_files_state.clone();
-    let tree_view_same_music_finder = gui_data.main_notebook.tree_view_same_music_finder.clone();
-    let shared_same_music_state = gui_data.shared_same_music_state.clone();
-    let buttons_names = gui_data.bottom_buttons.buttons_names.clone();
-    let window_progress = gui_data.progress_window.window_progress.clone();
-    let taskbar_state = gui_data.taskbar_state.clone();
-    let radio_button_similar_hash_size_4 = gui_data.main_notebook.radio_button_similar_hash_size_4.clone();
-    let radio_button_similar_hash_size_8 = gui_data.main_notebook.radio_button_similar_hash_size_8.clone();
-    let radio_button_similar_hash_size_16 = gui_data.main_notebook.radio_button_similar_hash_size_16.clone();
-
-    let main_context = glib::MainContext::default();
-    let _guard = main_context.acquire().unwrap();
-
-    glib_stop_receiver.attach(None, move |msg| {
-        buttons_search.show();
-
-        window_progress.hide();
-
-        taskbar_state.borrow().hide();
-
-        // Restore clickability to main notebook
-        notebook_main.set_sensitive(true);
-
-        let hash_size;
-        if radio_button_similar_hash_size_4.is_active() {
-            hash_size = 4;
-        } else if radio_button_similar_hash_size_8.is_active() {
-            hash_size = 8;
-        } else if radio_button_similar_hash_size_16.is_active() {
-            hash_size = 16;
-        } else {
-            panic!("No radio button is pressed");
-        }
-
-        match msg {
-            Message::Duplicates(df) => {
-                if df.get_stopped_search() {
-                    entry_info.set_text("Searching for duplicates was stopped by user");
-                } else {
-                    let information = df.get_information();
-                    let text_messages = df.get_text_messages();
-
-                    let duplicates_number: usize;
-                    let duplicates_size: u64;
-                    let duplicates_group: usize;
-
-                    match df.get_check_method() {
-                        CheckingMethod::Name => {
-                            duplicates_number = information.number_of_duplicated_files_by_name;
-                            duplicates_size = 0;
-                            duplicates_group = information.number_of_groups_by_name;
-                            entry_info.set_text(format!("Found {} files in {} groups which have same names.", duplicates_number, duplicates_group).as_str());
-                        }
-                        CheckingMethod::Hash | CheckingMethod::HashMb => {
-                            duplicates_number = information.number_of_duplicated_files_by_hash;
-                            duplicates_size = information.lost_space_by_hash;
-                            duplicates_group = information.number_of_groups_by_hash;
-                            entry_info.set_text(format!("Found {} duplicates files in {} groups which took {}.", duplicates_number, duplicates_group, duplicates_size.file_size(options::BINARY).unwrap()).as_str());
-                        }
-                        CheckingMethod::Size => {
-                            duplicates_number = information.number_of_duplicated_files_by_size;
-                            duplicates_size = information.lost_space_by_size;
-                            duplicates_group = information.number_of_groups_by_size;
-                            entry_info.set_text(format!("Found {} duplicates files in {} groups which took {}.", duplicates_number, duplicates_group, duplicates_size.file_size(options::BINARY).unwrap()).as_str());
-                        }
-                        CheckingMethod::None => {
-                            panic!();
-                        }
-                    }
-
-                    entry_info.set_text(format!("Found {} duplicates files in {} groups which took {}.", duplicates_number, duplicates_group, duplicates_size.file_size(options::BINARY).unwrap()).as_str());
-
-                    // Create GUI
-                    {
-                        let list_store = get_list_store(&tree_view_duplicate_finder);
-
-                        match df.get_check_method() {
-                            CheckingMethod::Name => {
-                                let btreemap = df.get_files_sorted_by_names();
-
-                                for (name, vector) in btreemap.iter().rev() {
-                                    // Sort
-                                    let vector = if vector.len() >= 2 {
-                                        let mut vector = vector.clone();
-                                        vector.sort_by_key(|e| {
-                                            let t = split_path(e.path.as_path());
-                                            (t.0, t.1)
-                                        });
-                                        vector
-                                    } else {
-                                        vector.clone()
-                                    };
-
-                                    let values: [(u32, &dyn ToValue); 8] = [
-                                        (0, &false),
-                                        (1, &false),
-                                        (2, &name),
-                                        (3, (&(format!("{} results", vector.len())))),
-                                        (4, (&"".to_string())), // No text in 3 column
-                                        (5, (&(0))),            // Not used here
-                                        (6, &(HEADER_ROW_COLOR.to_string())),
-                                        (7, &(TEXT_COLOR.to_string())),
-                                    ];
-
-                                    list_store.set(&list_store.append(), &values);
-                                    for entry in vector {
-                                        let (directory, file) = split_path(&entry.path);
-                                        let values: [(u32, &dyn ToValue); 8] = [
-                                            (0, &true),
-                                            (1, &false),
-                                            (2, &file),
-                                            (3, &directory),
-                                            (4, &(format!("{} - ({})", NaiveDateTime::from_timestamp(entry.modified_date as i64, 0).to_string(), entry.size.file_size(options::BINARY).unwrap()))),
-                                            (5, &(entry.modified_date)),
-                                            (6, &(MAIN_ROW_COLOR.to_string())),
-                                            (7, &(TEXT_COLOR.to_string())),
-                                        ];
-                                        list_store.set(&list_store.append(), &values);
-                                    }
-                                }
-                            }
-                            CheckingMethod::Hash | CheckingMethod::HashMb => {
-                                let btreemap = df.get_files_sorted_by_hash();
-
-                                for (size, vectors_vector) in btreemap.iter().rev() {
-                                    for vector in vectors_vector {
-                                        // Sort
-                                        let vector = if vector.len() >= 2 {
-                                            let mut vector = vector.clone();
-                                            vector.sort_by_key(|e| {
-                                                let t = split_path(e.path.as_path());
-                                                (t.0, t.1)
-                                            });
-                                            vector
-                                        } else {
-                                            vector.clone()
-                                        };
-
-                                        let values: [(u32, &dyn ToValue); 8] = [
-                                            (0, &false),
-                                            (1, &false),
-                                            (2, &(format!("{} x {} ({} bytes)", vector.len(), size.file_size(options::BINARY).unwrap(), size))),
-                                            (
-                                                3,
-                                                &(format!("{} ({} bytes) lost", ((vector.len() - 1) as u64 * *size as u64).file_size(options::BINARY).unwrap(), (vector.len() - 1) as u64 * *size as u64)),
-                                            ),
-                                            (4, &"".to_string()), // No text in 3 column
-                                            (5, &(0)),
-                                            (6, &(HEADER_ROW_COLOR.to_string())),
-                                            (7, &(TEXT_COLOR.to_string())),
-                                        ];
-
-                                        list_store.set(&list_store.append(), &values);
-                                        for entry in vector {
-                                            let (directory, file) = split_path(&entry.path);
-
-                                            let values: [(u32, &dyn ToValue); 8] = [
-                                                (0, &true),
-                                                (1, &false),
-                                                (2, &file),
-                                                (3, &directory),
-                                                (4, &(NaiveDateTime::from_timestamp(entry.modified_date as i64, 0).to_string())),
-                                                (5, &(entry.modified_date)),
-                                                (6, &(MAIN_ROW_COLOR.to_string())),
-                                                (7, &(TEXT_COLOR.to_string())),
-                                            ];
-
-                                            list_store.set(&list_store.append(), &values);
-                                        }
-                                    }
-                                }
-                            }
-                            CheckingMethod::Size => {
-                                let btreemap = df.get_files_sorted_by_size();
-
-                                for (size, vector) in btreemap.iter().rev() {
-                                    // Sort
-                                    let vector = if vector.len() >= 2 {
-                                        let mut vector = vector.clone();
-                                        vector.sort_by_key(|e| {
-                                            let t = split_path(e.path.as_path());
-                                            (t.0, t.1)
-                                        });
-                                        vector
-                                    } else {
-                                        vector.clone()
-                                    };
-                                    let values: [(u32, &dyn ToValue); 8] = [
-                                        (0, &false),
-                                        (1, &false),
-                                        (2, &(format!("{} x {} ({} bytes)", vector.len(), size.file_size(options::BINARY).unwrap(), size))),
-                                        (
-                                            3,
-                                            &(format!("{} ({} bytes) lost", ((vector.len() - 1) as u64 * *size as u64).file_size(options::BINARY).unwrap(), (vector.len() - 1) as u64 * *size as u64)),
-                                        ),
-                                        (4, &"".to_string()), // No text in 3 column
-                                        (5, &(0)),            // Not used here
-                                        (6, &(HEADER_ROW_COLOR.to_string())),
-                                        (7, &(TEXT_COLOR.to_string())),
-                                    ];
-
-                                    list_store.set(&list_store.append(), &values);
-                                    for entry in vector {
-                                        let (directory, file) = split_path(&entry.path);
-                                        let values: [(u32, &dyn ToValue); 8] = [
-                                            (0, &true),
-                                            (1, &false),
-                                            (2, &file),
-                                            (3, &directory),
-                                            (4, &(NaiveDateTime::from_timestamp(entry.modified_date as i64, 0).to_string())),
-                                            (5, &(entry.modified_date)),
-                                            (6, &(MAIN_ROW_COLOR.to_string())),
-                                            (7, &(TEXT_COLOR.to_string())),
-                                        ];
-                                        list_store.set(&list_store.append(), &values);
-                                    }
-                                }
-                            }
-                            CheckingMethod::None => {
-                                panic!();
-                            }
-                        }
-
-                        print_text_messages_to_text_view(text_messages, &text_view_errors);
-                    }
-
-                    // Set state
-                    {
-                        *shared_duplication_state.borrow_mut() = df;
-
-                        if duplicates_number > 0 {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Duplicate).unwrap().get_mut("save").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Duplicate).unwrap().get_mut("delete").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Duplicate).unwrap().get_mut("select").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Duplicate).unwrap().get_mut("symlink").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Duplicate).unwrap().get_mut("hardlink").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Duplicate).unwrap().get_mut("move").unwrap() = true;
-                        } else {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Duplicate).unwrap().get_mut("save").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Duplicate).unwrap().get_mut("delete").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Duplicate).unwrap().get_mut("select").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Duplicate).unwrap().get_mut("symlink").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Duplicate).unwrap().get_mut("hardlink").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Duplicate).unwrap().get_mut("move").unwrap() = false;
-                        }
-                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Duplicate).unwrap(), &buttons_array, &buttons_names);
-                    }
-                }
-            }
-            Message::EmptyFolders(ef) => {
-                if ef.get_stopped_search() {
-                    entry_info.set_text("Searching for empty folders was stopped by user");
-                } else {
-                    let information = ef.get_information();
-                    let text_messages = ef.get_text_messages();
-
-                    let empty_folder_number: usize = information.number_of_empty_folders;
-
-                    entry_info.set_text(format!("Found {} empty folders.", empty_folder_number).as_str());
-
-                    // Create GUI
-                    {
-                        let list_store = get_list_store(&tree_view_empty_folder_finder);
-
-                        let hashmap = ef.get_empty_folder_list();
-                        let mut vector = hashmap.keys().cloned().collect::<Vec<PathBuf>>();
-
-                        vector.sort_by_key(|e| {
-                            let t = split_path(e.as_path());
-                            (t.0, t.1)
-                        });
-
-                        for path in vector {
-                            let (directory, file) = split_path(&path);
-                            let values: [(u32, &dyn ToValue); 4] = [(0, &false), (1, &file), (2, &directory), (3, &(NaiveDateTime::from_timestamp(hashmap.get(&path).unwrap().modified_date as i64, 0).to_string()))];
-                            list_store.set(&list_store.append(), &values);
-                        }
-                        print_text_messages_to_text_view(text_messages, &text_view_errors);
-                    }
-
-                    // Set state
-                    {
-                        *shared_empty_folders_state.borrow_mut() = ef;
-
-                        if empty_folder_number > 0 {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyDirectories).unwrap().get_mut("save").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyDirectories).unwrap().get_mut("delete").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyDirectories).unwrap().get_mut("select").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyDirectories).unwrap().get_mut("move").unwrap() = true;
-                        } else {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyDirectories).unwrap().get_mut("save").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyDirectories).unwrap().get_mut("delete").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyDirectories).unwrap().get_mut("select").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyDirectories).unwrap().get_mut("move").unwrap() = false;
-                        }
-                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyDirectories).unwrap(), &buttons_array, &buttons_names);
-                    }
-                }
-            }
-            Message::EmptyFiles(vf) => {
-                if vf.get_stopped_search() {
-                    entry_info.set_text("Searching for empty files was stopped by user");
-                } else {
-                    let information = vf.get_information();
-                    let text_messages = vf.get_text_messages();
-
-                    let empty_files_number: usize = information.number_of_empty_files;
-
-                    entry_info.set_text(format!("Found {} empty files.", empty_files_number).as_str());
-
-                    // Create GUI
-                    {
-                        let list_store = get_list_store(&tree_view_empty_files_finder);
-
-                        let vector = vf.get_empty_files();
-
-                        // Sort
-                        let mut vector = vector.clone();
-                        vector.sort_by_key(|e| {
-                            let t = split_path(e.path.as_path());
-                            (t.0, t.1)
-                        });
-
-                        for file_entry in vector {
-                            let (directory, file) = split_path(&file_entry.path);
-                            let values: [(u32, &dyn ToValue); 4] = [(0, &false), (1, &file), (2, &directory), (3, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string()))];
-                            list_store.set(&list_store.append(), &values);
-                        }
-                        print_text_messages_to_text_view(text_messages, &text_view_errors);
-                    }
-
-                    // Set state
-                    {
-                        *shared_empty_files_state.borrow_mut() = vf;
-
-                        if empty_files_number > 0 {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyFiles).unwrap().get_mut("save").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyFiles).unwrap().get_mut("delete").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyFiles).unwrap().get_mut("select").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyFiles).unwrap().get_mut("move").unwrap() = true;
-                        } else {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyFiles).unwrap().get_mut("save").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyFiles).unwrap().get_mut("delete").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyFiles).unwrap().get_mut("select").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyFiles).unwrap().get_mut("move").unwrap() = false;
-                        }
-                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::EmptyFiles).unwrap(), &buttons_array, &buttons_names);
-                    }
-                }
-            }
-            Message::BigFiles(bf) => {
-                if bf.get_stopped_search() {
-                    entry_info.set_text("Searching for big files was stopped by user");
-                } else {
-                    let information = bf.get_information();
-                    let text_messages = bf.get_text_messages();
-
-                    let biggest_files_number: usize = information.number_of_real_files;
-
-                    entry_info.set_text(format!("Found {} biggest files.", biggest_files_number).as_str());
-
-                    // Create GUI
-                    {
-                        let list_store = get_list_store(&tree_view_big_files_finder);
-
-                        let btreemap = bf.get_big_files();
-
-                        for (size, vector) in btreemap.iter().rev() {
-                            let mut vector = vector.clone();
-                            vector.sort_by_key(|e| {
-                                let t = split_path(e.path.as_path());
-                                (t.0, t.1)
-                            });
-                            for file_entry in vector {
-                                let (directory, file) = split_path(&file_entry.path);
-                                let values: [(u32, &dyn ToValue); 5] = [
-                                    (0, &false),
-                                    (1, &(format!("{} ({} bytes)", size.file_size(options::BINARY).unwrap(), size))),
-                                    (2, &file),
-                                    (3, &directory),
-                                    (4, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string())),
-                                ];
-                                list_store.set(&list_store.append(), &values);
-                            }
-                        }
-                        print_text_messages_to_text_view(text_messages, &text_view_errors);
-                    }
-
-                    // Set state
-                    {
-                        *shared_big_files_state.borrow_mut() = bf;
-
-                        if biggest_files_number > 0 {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BigFiles).unwrap().get_mut("save").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BigFiles).unwrap().get_mut("delete").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BigFiles).unwrap().get_mut("select").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BigFiles).unwrap().get_mut("move").unwrap() = true;
-                        } else {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BigFiles).unwrap().get_mut("save").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BigFiles).unwrap().get_mut("delete").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BigFiles).unwrap().get_mut("select").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BigFiles).unwrap().get_mut("move").unwrap() = false;
-                        }
-                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BigFiles).unwrap(), &buttons_array, &buttons_names);
-                    }
-                }
-            }
-            Message::Temporary(tf) => {
-                if tf.get_stopped_search() {
-                    entry_info.set_text("Searching for temporary files was stopped by user");
-                } else {
-                    let information = tf.get_information();
-                    let text_messages = tf.get_text_messages();
-
-                    let temporary_files_number: usize = information.number_of_temporary_files;
-
-                    entry_info.set_text(format!("Found {} temporary files.", temporary_files_number).as_str());
-
-                    // Create GUI
-                    {
-                        let list_store = get_list_store(&tree_view_temporary_files_finder);
-
-                        let vector = tf.get_temporary_files();
-
-                        // Sort
-                        let mut vector = vector.clone();
-                        vector.sort_by_key(|e| {
-                            let t = split_path(e.path.as_path());
-                            (t.0, t.1)
-                        });
-
-                        for file_entry in vector {
-                            let (directory, file) = split_path(&file_entry.path);
-                            let values: [(u32, &dyn ToValue); 4] = [(0, &false), (1, &file), (2, &directory), (3, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string()))];
-                            list_store.set(&list_store.append(), &values);
-                        }
-                        print_text_messages_to_text_view(text_messages, &text_view_errors);
-                    }
-
-                    // Set state
-                    {
-                        *shared_temporary_files_state.borrow_mut() = tf;
-
-                        if temporary_files_number > 0 {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Temporary).unwrap().get_mut("save").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Temporary).unwrap().get_mut("delete").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Temporary).unwrap().get_mut("select").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Temporary).unwrap().get_mut("move").unwrap() = true;
-                        } else {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Temporary).unwrap().get_mut("save").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Temporary).unwrap().get_mut("delete").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Temporary).unwrap().get_mut("select").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Temporary).unwrap().get_mut("move").unwrap() = false;
-                        }
-                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Temporary).unwrap(), &buttons_array, &buttons_names);
-                    }
-                }
-            }
-            Message::SimilarImages(sf) => {
-                if sf.get_stopped_search() {
-                    entry_info.set_text("Searching for similar images was stopped by user");
-                } else {
-                    //let information = sf.get_information();
-                    let text_messages = sf.get_text_messages();
-
-                    let base_images_size = sf.get_similar_images().len();
-
-                    entry_info.set_text(format!("Found similar pictures for {} images.", base_images_size).as_str());
-
-                    // Create GUI
-                    {
-                        let list_store = get_list_store(&tree_view_similar_images_finder);
-
-                        let vec_struct_similar = sf.get_similar_images();
-
-                        for vec_file_entry in vec_struct_similar.iter() {
-                            // Sort
-                            let vec_file_entry = if vec_file_entry.len() >= 2 {
-                                let mut vec_file_entry = vec_file_entry.clone();
-                                vec_file_entry.sort_by_key(|e| {
-                                    let t = split_path(e.path.as_path());
-                                    (t.0, t.1)
-                                });
-                                vec_file_entry
-                            } else {
-                                vec_file_entry.clone()
-                            };
-
-                            // Header
-                            let values: [(u32, &dyn ToValue); 12] = [
-                                (0, &false),
-                                (1, &false),
-                                (2, &"".to_string()),
-                                (3, &"".to_string()),
-                                (4, &(0)),
-                                (5, &"".to_string()),
-                                (6, &"".to_string()),
-                                (7, &"".to_string()),
-                                (8, &"".to_string()),
-                                (9, &(0)),
-                                (10, &(HEADER_ROW_COLOR.to_string())),
-                                (11, &(TEXT_COLOR.to_string())),
-                            ];
-                            list_store.set(&list_store.append(), &values);
-
-                            // Meat
-                            for file_entry in vec_file_entry.iter() {
-                                let (directory, file) = split_path(&file_entry.path);
-                                let values: [(u32, &dyn ToValue); 12] = [
-                                    (0, &true),
-                                    (1, &false),
-                                    (2, &(similar_images::get_string_from_similarity(&file_entry.similarity, hash_size).to_string())),
-                                    (3, &file_entry.size.file_size(options::BINARY).unwrap()),
-                                    (4, &file_entry.size),
-                                    (5, &file_entry.dimensions),
-                                    (6, &file),
-                                    (7, &directory),
-                                    (8, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string())),
-                                    (9, &(file_entry.modified_date)),
-                                    (10, &(MAIN_ROW_COLOR.to_string())),
-                                    (11, &(TEXT_COLOR.to_string())),
-                                ];
-                                list_store.set(&list_store.append(), &values);
-                            }
-                        }
-
-                        print_text_messages_to_text_view(text_messages, &text_view_errors);
-                    }
-
-                    // Set state
-                    {
-                        *shared_similar_images_state.borrow_mut() = sf;
-
-                        if base_images_size > 0 {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SimilarImages).unwrap().get_mut("save").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SimilarImages).unwrap().get_mut("delete").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SimilarImages).unwrap().get_mut("select").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SimilarImages).unwrap().get_mut("symlink").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SimilarImages).unwrap().get_mut("hardlink").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SimilarImages).unwrap().get_mut("move").unwrap() = true;
-                        } else {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SimilarImages).unwrap().get_mut("save").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SimilarImages).unwrap().get_mut("delete").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SimilarImages).unwrap().get_mut("select").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SimilarImages).unwrap().get_mut("symlink").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SimilarImages).unwrap().get_mut("hardlink").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SimilarImages).unwrap().get_mut("move").unwrap() = false;
-                        }
-                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SimilarImages).unwrap(), &buttons_array, &buttons_names);
-                    }
-                }
-            }
-            Message::ZeroedFiles(zf) => {
-                if zf.get_stopped_search() {
-                    entry_info.set_text("Searching for zeroed files was stopped by user");
-                } else {
-                    let information = zf.get_information();
-                    let text_messages = zf.get_text_messages();
-
-                    let zeroed_files_number: usize = information.number_of_zeroed_files;
-
-                    entry_info.set_text(format!("Found {} zeroed files.", zeroed_files_number).as_str());
-
-                    // Create GUI
-                    {
-                        let list_store = get_list_store(&tree_view_zeroed_files_finder);
-
-                        let vector = zf.get_zeroed_files();
-
-                        // Sort
-                        let mut vector = vector.clone();
-                        vector.sort_by_key(|e| {
-                            let t = split_path(e.path.as_path());
-                            (t.0, t.1)
-                        });
-
-                        for file_entry in vector {
-                            let (directory, file) = split_path(&file_entry.path);
-                            let values: [(u32, &dyn ToValue); 6] = [
-                                (0, &false),
-                                (1, &(file_entry.size.file_size(options::BINARY).unwrap())),
-                                (2, &(file_entry.size)),
-                                (3, &file),
-                                (4, &directory),
-                                (5, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string())),
-                            ];
-                            list_store.set(&list_store.append(), &values);
-                        }
-                        print_text_messages_to_text_view(text_messages, &text_view_errors);
-                    }
-
-                    // Set state
-                    {
-                        *shared_zeroed_files_state.borrow_mut() = zf;
-
-                        if zeroed_files_number > 0 {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Zeroed).unwrap().get_mut("save").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Zeroed).unwrap().get_mut("delete").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Zeroed).unwrap().get_mut("select").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Zeroed).unwrap().get_mut("move").unwrap() = true;
-                        } else {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Zeroed).unwrap().get_mut("save").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Zeroed).unwrap().get_mut("delete").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Zeroed).unwrap().get_mut("select").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Zeroed).unwrap().get_mut("move").unwrap() = false;
-                        }
-                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Zeroed).unwrap(), &buttons_array, &buttons_names);
-                    }
-                }
-            }
-            Message::SameMusic(mf) => {
-                if mf.get_stopped_search() {
-                    entry_info.set_text("Searching for same music was stopped by user");
-                } else {
-                    let information = mf.get_information();
-                    let text_messages = mf.get_text_messages();
-
-                    let same_music_number: usize = information.number_of_duplicates_music_files;
-
-                    entry_info.set_text(format!("Found {} duplicated music files.", same_music_number).as_str());
-
-                    // Create GUI
-                    {
-                        let list_store = get_list_store(&tree_view_same_music_finder);
-
-                        let vector = mf.get_duplicated_music_entries();
-
-                        let music_similarity = *mf.get_music_similarity();
-
-                        let is_title = (MusicSimilarity::TITLE & music_similarity) != MusicSimilarity::NONE;
-                        let is_artist = (MusicSimilarity::ARTIST & music_similarity) != MusicSimilarity::NONE;
-                        let is_album_title = (MusicSimilarity::ALBUM_TITLE & music_similarity) != MusicSimilarity::NONE;
-                        let is_album_artist = (MusicSimilarity::ALBUM_ARTIST & music_similarity) != MusicSimilarity::NONE;
-                        let is_year = (MusicSimilarity::YEAR & music_similarity) != MusicSimilarity::NONE;
-
-                        let text: String = "-----".to_string();
-
-                        for vec_file_entry in vector {
-                            // Sort
-                            let vec_file_entry = if vec_file_entry.len() >= 2 {
-                                let mut vec_file_entry = vec_file_entry.clone();
-                                vec_file_entry.sort_by_key(|e| {
-                                    let t = split_path(e.path.as_path());
-                                    (t.0, t.1)
-                                });
-                                vec_file_entry
-                            } else {
-                                vec_file_entry.clone()
-                            };
-
-                            let values: [(u32, &dyn ToValue); 15] = [
-                                (0, &false),
-                                (1, &false),
-                                (2, &"".to_string()),
-                                (3, &(0)),
-                                (4, &"".to_string()),
-                                (5, &"".to_string()),
-                                (
-                                    6,
-                                    &(match is_title {
-                                        true => text.clone(),
-                                        false => "".to_string(),
-                                    }),
-                                ),
-                                (
-                                    7,
-                                    &(match is_artist {
-                                        true => text.clone(),
-                                        false => "".to_string(),
-                                    }),
-                                ),
-                                (
-                                    8,
-                                    &(match is_album_title {
-                                        true => text.clone(),
-                                        false => "".to_string(),
-                                    }),
-                                ),
-                                (
-                                    9,
-                                    &(match is_album_artist {
-                                        true => text.clone(),
-                                        false => "".to_string(),
-                                    }),
-                                ),
-                                (
-                                    10,
-                                    &(match is_year {
-                                        true => text.clone(),
-                                        false => "".to_string(),
-                                    }),
-                                ),
-                                (11, &"".to_string()),
-                                (12, &(0)),
-                                (13, &(HEADER_ROW_COLOR.to_string())),
-                                (14, &(TEXT_COLOR.to_string())),
-                            ];
-                            list_store.set(&list_store.append(), &values);
-                            for file_entry in vec_file_entry {
-                                let (directory, file) = split_path(&file_entry.path);
-                                let values: [(u32, &dyn ToValue); 15] = [
-                                    (0, &true),
-                                    (1, &false),
-                                    (2, &file_entry.size.file_size(options::BINARY).unwrap()),
-                                    (3, &file_entry.size),
-                                    (4, &file),
-                                    (5, &directory),
-                                    (6, &file_entry.title),
-                                    (7, &file_entry.artist),
-                                    (8, &file_entry.album_title),
-                                    (9, &file_entry.album_artist),
-                                    (10, &file_entry.year.to_string()),
-                                    (11, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string())),
-                                    (12, &(file_entry.modified_date)),
-                                    (13, &(MAIN_ROW_COLOR.to_string())),
-                                    (14, &(TEXT_COLOR.to_string())),
-                                ];
-                                list_store.set(&list_store.append(), &values);
-                            }
-                        }
-                        print_text_messages_to_text_view(text_messages, &text_view_errors);
-                    }
-
-                    // Set state
-                    {
-                        *shared_same_music_state.borrow_mut() = mf;
-
-                        if same_music_number > 0 {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SameMusic).unwrap().get_mut("save").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SameMusic).unwrap().get_mut("delete").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SameMusic).unwrap().get_mut("select").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SameMusic).unwrap().get_mut("symlink").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SameMusic).unwrap().get_mut("hardlink").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SameMusic).unwrap().get_mut("move").unwrap() = true;
-                        } else {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SameMusic).unwrap().get_mut("save").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SameMusic).unwrap().get_mut("delete").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SameMusic).unwrap().get_mut("select").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SameMusic).unwrap().get_mut("symlink").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SameMusic).unwrap().get_mut("hardlink").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SameMusic).unwrap().get_mut("move").unwrap() = false;
-                        }
-                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::SameMusic).unwrap(), &buttons_array, &buttons_names);
-                    }
-                }
-            }
-            Message::InvalidSymlinks(ifs) => {
-                if ifs.get_stopped_search() {
-                    entry_info.set_text("Searching for invalid symlink was stopped by user");
-                } else {
-                    let information = ifs.get_information();
-                    let text_messages = ifs.get_text_messages();
-
-                    let invalid_symlinks: usize = information.number_of_invalid_symlinks;
-
-                    entry_info.set_text(format!("Found {} invalid symlinks.", invalid_symlinks).as_str());
-
-                    // Create GUI
-                    {
-                        let list_store = get_list_store(&tree_view_invalid_symlinks);
-
-                        let vector = ifs.get_invalid_symlinks();
-
-                        // Sort
-                        let mut vector = vector.clone();
-
-                        vector.sort_by_key(|e| {
-                            let t = split_path(e.symlink_path.as_path());
-                            (t.0, t.1)
-                        });
-
-                        for file_entry in vector {
-                            let (directory, file) = split_path(&file_entry.symlink_path);
-                            let values: [(u32, &dyn ToValue); 6] = [
-                                (0, &false),
-                                (1, &file),
-                                (2, &directory),
-                                (3, &file_entry.destination_path.to_string_lossy().to_string()),
-                                (4, &get_text_from_invalid_symlink_cause(&file_entry.type_of_error)),
-                                (5, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string())),
-                            ];
-                            list_store.set(&list_store.append(), &values);
-                        }
-                        print_text_messages_to_text_view(text_messages, &text_view_errors);
-                    }
-
-                    // Set state
-                    {
-                        *shared_same_invalid_symlinks.borrow_mut() = ifs;
-
-                        if invalid_symlinks > 0 {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Symlinks).unwrap().get_mut("save").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Symlinks).unwrap().get_mut("delete").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Symlinks).unwrap().get_mut("select").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Symlinks).unwrap().get_mut("move").unwrap() = true;
-                        } else {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Symlinks).unwrap().get_mut("save").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Symlinks).unwrap().get_mut("delete").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Symlinks).unwrap().get_mut("select").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Symlinks).unwrap().get_mut("move").unwrap() = false;
-                        }
-                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::Symlinks).unwrap(), &buttons_array, &buttons_names);
-                    }
-                }
-            }
-            Message::BrokenFiles(br) => {
-                if br.get_stopped_search() {
-                    entry_info.set_text("Searching for broken files was stopped by user");
-                } else {
-                    let information = br.get_information();
-                    let text_messages = br.get_text_messages();
-
-                    let broken_files_number: usize = information.number_of_broken_files;
-
-                    entry_info.set_text(format!("Found {} broken files.", broken_files_number).as_str());
-
-                    // Create GUI
-                    {
-                        let list_store = get_list_store(&tree_view_broken_files);
-
-                        let vector = br.get_broken_files();
-
-                        // Sort
-                        let mut vector = vector.clone();
-                        vector.sort_by_key(|e| {
-                            let t = split_path(e.path.as_path());
-                            (t.0, t.1)
-                        });
-
-                        for file_entry in vector {
-                            let (directory, file) = split_path(&file_entry.path);
-                            let values: [(u32, &dyn ToValue); 5] = [
-                                (0, &false),
-                                (1, &file),
-                                (2, &directory),
-                                (3, &file_entry.error_string),
-                                (4, &(NaiveDateTime::from_timestamp(file_entry.modified_date as i64, 0).to_string())),
-                            ];
-                            list_store.set(&list_store.append(), &values);
-                        }
-                        print_text_messages_to_text_view(text_messages, &text_view_errors);
-                    }
-
-                    // Set state
-                    {
-                        *shared_broken_files_state.borrow_mut() = br;
-
-                        if broken_files_number > 0 {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BrokenFiles).unwrap().get_mut("save").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BrokenFiles).unwrap().get_mut("delete").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BrokenFiles).unwrap().get_mut("select").unwrap() = true;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BrokenFiles).unwrap().get_mut("move").unwrap() = true;
-                        } else {
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BrokenFiles).unwrap().get_mut("save").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BrokenFiles).unwrap().get_mut("delete").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BrokenFiles).unwrap().get_mut("select").unwrap() = false;
-                            *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BrokenFiles).unwrap().get_mut("move").unwrap() = false;
-                        }
-                        set_buttons(&mut *shared_buttons.borrow_mut().get_mut(&NotebookMainEnum::BrokenFiles).unwrap(), &buttons_array, &buttons_names);
-                    }
-                }
-            }
-        }
-        // Returning false here would close the receiver and have senders fail
-        glib::Continue(true)
-    });
-}
diff -Naur orig/czkawka_gui/src/connect_duplicate_buttons.rs patched/czkawka_gui/src/connect_duplicate_buttons.rs
--- orig/czkawka_gui/src/connect_duplicate_buttons.rs	1970-01-01 01:00:00.000000000 +0100
+++ patched/czkawka_gui/src/connect_duplicate_buttons.rs	2021-12-04 17:07:36.882961295 +0100
@@ -0,0 +1,21 @@
+use gtk::prelude::*;
+
+use crate::gui_data::GuiData;
+
+pub fn connect_duplicate_buttons(gui_data: &GuiData) {
+    let radio_button_duplicates_hash = gui_data.main_notebook.radio_button_duplicates_hash.clone();
+    let radio_button_hash_type_blake3 = gui_data.main_notebook.radio_button_hash_type_blake3.clone();
+    let radio_button_hash_type_xxh3 = gui_data.main_notebook.radio_button_hash_type_xxh3.clone();
+    let radio_button_hash_type_crc32 = gui_data.main_notebook.radio_button_hash_type_crc32.clone();
+    radio_button_duplicates_hash.connect_toggled(move |radio_button_duplicates_hash| {
+        if radio_button_duplicates_hash.is_active() {
+            radio_button_hash_type_blake3.set_sensitive(true);
+            radio_button_hash_type_xxh3.set_sensitive(true);
+            radio_button_hash_type_crc32.set_sensitive(true);
+        } else {
+            radio_button_hash_type_blake3.set_sensitive(false);
+            radio_button_hash_type_xxh3.set_sensitive(false);
+            radio_button_hash_type_crc32.set_sensitive(false);
+        }
+    });
+}
diff -Naur orig/czkawka_gui/src/connect_header_buttons.rs patched/czkawka_gui/src/connect_header_buttons.rs
--- orig/czkawka_gui/src/connect_header_buttons.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_header_buttons.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,16 +1,17 @@
-use crate::gui_data::GuiData;
 use gtk::prelude::*;
-use gtk::{ResponseType, WindowPosition};
+
+use crate::gui_data::GuiData;
 
 pub fn connect_button_about(gui_data: &GuiData) {
     let about_dialog = gui_data.about.about_dialog.clone();
     let button_app_info = gui_data.header.button_app_info.clone();
     button_app_info.connect_clicked(move |_| {
-        about_dialog.set_position(WindowPosition::Center);
         about_dialog.show();
-        let response = about_dialog.run();
-        if response != ResponseType::None {
-            about_dialog.hide();
-        }
+
+        // Prevent from deleting dialog after close
+        about_dialog.connect_delete_event(|dialog, _| {
+            dialog.hide();
+            Inhibit(true)
+        });
     });
 }
diff -Naur orig/czkawka_gui/src/connect_hide_text_view_errors.rs patched/czkawka_gui/src/connect_hide_text_view_errors.rs
--- orig/czkawka_gui/src/connect_hide_text_view_errors.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_hide_text_view_errors.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,6 +1,7 @@
-use crate::gui_data::GuiData;
 use gtk::prelude::*;
 
+use crate::gui_data::GuiData;
+
 pub fn connect_hide_text_view_errors(gui_data: &GuiData) {
     let check_button_settings_show_text_view = gui_data.settings.check_button_settings_show_text_view.clone();
     let buttons_show_errors = gui_data.bottom_buttons.buttons_show_errors.clone();
diff -Naur orig/czkawka_gui/src/connect_notebook_tabs.rs patched/czkawka_gui/src/connect_notebook_tabs.rs
--- orig/czkawka_gui/src/connect_notebook_tabs.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_notebook_tabs.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,7 +1,8 @@
+use gtk::prelude::*;
+
 use crate::gui_data::GuiData;
 use crate::help_functions::*;
 use crate::notebook_enums::*;
-use gtk::prelude::*;
 
 pub fn connect_notebook_tabs(gui_data: &GuiData) {
     let shared_buttons = gui_data.shared_buttons.clone();
@@ -21,7 +22,7 @@
         {
             for (index, upper_tab) in get_all_upper_tabs().iter().enumerate() {
                 if *shared_upper_notebooks.borrow_mut().get_mut(&current_tab_in_main_notebook).unwrap().get_mut(upper_tab).unwrap() {
-                    notebook_upper.children().get(index).unwrap().show();
+                    notebook_upper.children().get(index).unwrap().show(); // TODO find alternative for children
                 } else {
                     notebook_upper.children().get(index).unwrap().hide();
                 }
diff -Naur orig/czkawka_gui/src/connect_popovers.rs patched/czkawka_gui/src/connect_popovers.rs
--- orig/czkawka_gui/src/connect_popovers.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_popovers.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,27 +1,41 @@
+use gtk::prelude::*;
+use gtk::{ResponseType, TreeIter, Window};
+use regex::Regex;
+
+use czkawka_core::common::Common;
+
 use crate::gui_data::GuiData;
 use crate::help_functions::*;
-use crate::notebook_enums::*;
-use czkawka_core::common::Common;
-use gtk::prelude::*;
-use gtk::TreeIter;
 
 // File length variable allows users to choose duplicates which have shorter file name
 // e.g. 'tar.gz' will be selected instead 'tar.gz (copy)' etc.
 
-fn popover_select_all(popover: &gtk::Popover, tree_view: &gtk::TreeView, column_button_selection: u32) {
+fn popover_select_all(popover: &gtk::Popover, tree_view: &gtk::TreeView, column_button_selection: u32, column_color: Option<i32>) {
     let model = get_list_store(tree_view);
 
     if let Some(iter) = model.iter_first() {
-        loop {
-            model.set_value(&iter, column_button_selection, &true.to_value());
+        if let Some(column_color) = column_color {
+            loop {
+                if model.value(&iter, column_color).get::<String>().unwrap() == MAIN_ROW_COLOR {
+                    model.set_value(&iter, column_button_selection, &true.to_value());
+                }
+                if !model.iter_next(&iter) {
+                    break;
+                }
+            }
+        } else {
+            loop {
+                model.set_value(&iter, column_button_selection, &true.to_value());
 
-            if !model.iter_next(&iter) {
-                break;
+                if !model.iter_next(&iter) {
+                    break;
+                }
             }
         }
     }
     popover.popdown();
 }
+
 fn popover_unselect_all(popover: &gtk::Popover, tree_view: &gtk::TreeView, column_button_selection: u32) {
     let model = get_list_store(tree_view);
 
@@ -36,144 +50,48 @@
     }
     popover.popdown();
 }
-fn popover_reverse(popover: &gtk::Popover, tree_view: &gtk::TreeView, column_button_selection: u32) {
-    let model = get_list_store(tree_view);
-
-    if let Some(iter) = model.iter_first() {
-        loop {
-            let current_value: bool = model.value(&iter, column_button_selection as i32).get::<bool>().unwrap();
-            model.set_value(&iter, column_button_selection, &(!current_value).to_value());
 
-            if !model.iter_next(&iter) {
-                break;
-            }
-        }
-    }
-    popover.popdown();
-}
-
-fn popover_all_except_oldest(popover: &gtk::Popover, tree_view: &gtk::TreeView, column_color: i32, column_modification_as_secs: i32, column_file_name: i32, column_button_selection: u32) {
+fn popover_reverse(popover: &gtk::Popover, tree_view: &gtk::TreeView, column_button_selection: u32, column_color: Option<i32>) {
     let model = get_list_store(tree_view);
 
     if let Some(iter) = model.iter_first() {
-        let mut end: bool = false;
-        loop {
-            let mut tree_iter_array: Vec<TreeIter> = Vec::new();
-            let mut oldest_index: Option<usize> = None;
-            let mut current_index: usize = 0;
-            let mut oldest_modification_time: u64 = u64::MAX;
-
-            let mut file_length: usize = 0;
-
+        if let Some(column_color) = column_color {
             loop {
-                let color = model.value(&iter, column_color).get::<String>().unwrap();
-                if color == HEADER_ROW_COLOR {
-                    if !model.iter_next(&iter) {
-                        end = true;
-                    }
-                    break;
+                if model.value(&iter, column_color).get::<String>().unwrap() == MAIN_ROW_COLOR {
+                    let current_value: bool = model.value(&iter, column_button_selection as i32).get::<bool>().unwrap();
+                    model.set_value(&iter, column_button_selection, &(!current_value).to_value());
                 }
-                tree_iter_array.push(iter.clone());
-                let modification = model.value(&iter, column_modification_as_secs).get::<u64>().unwrap();
-                let current_file_length = model.value(&iter, column_file_name).get::<String>().unwrap().len();
-                if modification < oldest_modification_time || (modification == oldest_modification_time && current_file_length < file_length) {
-                    file_length = current_file_length;
-                    oldest_modification_time = modification;
-                    oldest_index = Some(current_index);
-                }
-
-                current_index += 1;
-
                 if !model.iter_next(&iter) {
-                    end = true;
                     break;
                 }
             }
-            if oldest_index == None {
-                continue;
-            }
-            for (index, tree_iter) in tree_iter_array.iter().enumerate() {
-                if index != oldest_index.unwrap() {
-                    model.set_value(tree_iter, column_button_selection, &true.to_value());
-                } else {
-                    model.set_value(tree_iter, column_button_selection, &false.to_value());
-                }
-            }
-
-            if end {
-                break;
-            }
-        }
-    }
-
-    popover.popdown();
-}
-fn popover_all_except_newest(popover: &gtk::Popover, tree_view: &gtk::TreeView, column_color: i32, column_modification_as_secs: i32, column_file_name: i32, column_button_selection: u32) {
-    let model = get_list_store(tree_view);
-
-    if let Some(iter) = model.iter_first() {
-        let mut end: bool = false;
-        loop {
-            let mut tree_iter_array: Vec<TreeIter> = Vec::new();
-            let mut newest_index: Option<usize> = None;
-            let mut current_index: usize = 0;
-            let mut newest_modification_time: u64 = 0;
-
-            let mut file_length: usize = 0;
-
+        } else {
             loop {
-                let color = model.value(&iter, column_color).get::<String>().unwrap();
-                if color == HEADER_ROW_COLOR {
-                    if !model.iter_next(&iter) {
-                        end = true;
-                    }
-                    break;
-                }
-                tree_iter_array.push(iter.clone());
-                let modification = model.value(&iter, column_modification_as_secs).get::<u64>().unwrap();
-                let current_file_length = model.value(&iter, column_file_name).get::<String>().unwrap().len();
-                if modification > newest_modification_time || (modification == newest_modification_time && current_file_length < file_length) {
-                    file_length = current_file_length;
-                    newest_modification_time = modification;
-                    newest_index = Some(current_index);
-                }
-
-                current_index += 1;
+                let current_value: bool = model.value(&iter, column_button_selection as i32).get::<bool>().unwrap();
+                model.set_value(&iter, column_button_selection, &(!current_value).to_value());
 
                 if !model.iter_next(&iter) {
-                    end = true;
                     break;
                 }
             }
-            if newest_index == None {
-                continue;
-            }
-            for (index, tree_iter) in tree_iter_array.iter().enumerate() {
-                if index != newest_index.unwrap() {
-                    model.set_value(tree_iter, column_button_selection, &true.to_value());
-                } else {
-                    model.set_value(tree_iter, column_button_selection, &false.to_value());
-                }
-            }
-
-            if end {
-                break;
-            }
         }
     }
-
     popover.popdown();
 }
-fn popover_one_oldest(popover: &gtk::Popover, tree_view: &gtk::TreeView, column_color: i32, column_modification_as_secs: i32, column_file_name: i32, column_button_selection: u32) {
+
+fn popover_all_except_oldest_newest(popover: &gtk::Popover, tree_view: &gtk::TreeView, column_color: i32, column_modification_as_secs: i32, column_file_name: i32, column_button_selection: u32, except_oldest: bool) {
     let model = get_list_store(tree_view);
 
     if let Some(iter) = model.iter_first() {
         let mut end: bool = false;
         loop {
             let mut tree_iter_array: Vec<TreeIter> = Vec::new();
-            let mut oldest_index: Option<usize> = None;
+            let mut used_index: Option<usize> = None;
             let mut current_index: usize = 0;
-            let mut oldest_modification_time: u64 = u64::MAX;
+            let mut modification_time_min_max: u64 = match except_oldest {
+                true => u64::MAX,
+                false => 0,
+            };
 
             let mut file_length: usize = 0;
 
@@ -188,12 +106,19 @@
                 tree_iter_array.push(iter.clone());
                 let modification = model.value(&iter, column_modification_as_secs).get::<u64>().unwrap();
                 let current_file_length = model.value(&iter, column_file_name).get::<String>().unwrap().len();
-                if modification < oldest_modification_time || (modification == oldest_modification_time && current_file_length > file_length) {
-                    file_length = current_file_length;
-                    oldest_modification_time = modification;
-                    oldest_index = Some(current_index);
+                if except_oldest {
+                    if modification < modification_time_min_max || (modification == modification_time_min_max && current_file_length < file_length) {
+                        file_length = current_file_length;
+                        modification_time_min_max = modification;
+                        used_index = Some(current_index);
+                    }
+                } else {
+                    if modification > modification_time_min_max || (modification == modification_time_min_max && current_file_length < file_length) {
+                        file_length = current_file_length;
+                        modification_time_min_max = modification;
+                        used_index = Some(current_index);
+                    }
                 }
-
                 current_index += 1;
 
                 if !model.iter_next(&iter) {
@@ -201,11 +126,11 @@
                     break;
                 }
             }
-            if oldest_index == None {
+            if used_index == None {
                 continue;
             }
             for (index, tree_iter) in tree_iter_array.iter().enumerate() {
-                if index == oldest_index.unwrap() {
+                if index != used_index.unwrap() {
                     model.set_value(tree_iter, column_button_selection, &true.to_value());
                 } else {
                     model.set_value(tree_iter, column_button_selection, &false.to_value());
@@ -220,18 +145,23 @@
 
     popover.popdown();
 }
-fn popover_one_newest(popover: &gtk::Popover, tree_view: &gtk::TreeView, column_color: i32, column_modification_as_secs: i32, column_file_name: i32, column_button_selection: u32) {
+
+fn popover_one_oldest_newest(popover: &gtk::Popover, tree_view: &gtk::TreeView, column_color: i32, column_modification_as_secs: i32, column_file_name: i32, column_button_selection: u32, check_oldest: bool) {
     let model = get_list_store(tree_view);
 
     if let Some(iter) = model.iter_first() {
         let mut end: bool = false;
         loop {
             let mut tree_iter_array: Vec<TreeIter> = Vec::new();
-            let mut newest_index: Option<usize> = None;
+            let mut used_index: Option<usize> = None;
             let mut current_index: usize = 0;
-            let mut newest_modification_time: u64 = 0;
+            let mut modification_time_min_max: u64 = match check_oldest {
+                true => u64::MAX,
+                false => 0,
+            };
 
             let mut file_length: usize = 0;
+
             loop {
                 let color = model.value(&iter, column_color).get::<String>().unwrap();
                 if color == HEADER_ROW_COLOR {
@@ -243,10 +173,18 @@
                 tree_iter_array.push(iter.clone());
                 let modification = model.value(&iter, column_modification_as_secs).get::<u64>().unwrap();
                 let current_file_length = model.value(&iter, column_file_name).get::<String>().unwrap().len();
-                if modification > newest_modification_time || (modification == newest_modification_time && current_file_length > file_length) {
-                    file_length = current_file_length;
-                    newest_modification_time = modification;
-                    newest_index = Some(current_index);
+                if check_oldest {
+                    if modification < modification_time_min_max || (modification == modification_time_min_max && current_file_length > file_length) {
+                        file_length = current_file_length;
+                        modification_time_min_max = modification;
+                        used_index = Some(current_index);
+                    }
+                } else {
+                    if modification > modification_time_min_max || (modification == modification_time_min_max && current_file_length > file_length) {
+                        file_length = current_file_length;
+                        modification_time_min_max = modification;
+                        used_index = Some(current_index);
+                    }
                 }
 
                 current_index += 1;
@@ -256,11 +194,11 @@
                     break;
                 }
             }
-            if newest_index == None {
+            if used_index == None {
                 continue;
             }
             for (index, tree_iter) in tree_iter_array.iter().enumerate() {
-                if index == newest_index.unwrap() {
+                if index == used_index.unwrap() {
                     model.set_value(tree_iter, column_button_selection, &true.to_value());
                 } else {
                     model.set_value(tree_iter, column_button_selection, &false.to_value());
@@ -276,256 +214,269 @@
     popover.popdown();
 }
 
-fn popover_select_custom(popover: &gtk::Popover, gui_data: &GuiData, tree_view: &gtk::TreeView, column_color: Option<i32>, column_file_name: i32, column_path: i32, column_button_selection: u32) {
+fn popover_custom_select_unselect(popover: &gtk::Popover, window_main: &Window, tree_view: &gtk::TreeView, column_color: Option<i32>, column_file_name: i32, column_path: i32, column_button_selection: u32, select_things: bool) {
     popover.popdown();
 
-    let wildcard: String;
-    enum WildcardType {
-        Path,
-        Name,
-        PathName,
-    }
-    let wildcard_type: WildcardType;
+    let window_title = match select_things {
+        false => "Unselect Custom",
+        true => "Select Custom",
+    };
 
-    // Accept Dialog
+    // Dialog for select/unselect items
     {
-        let window_main = gui_data.window_main.clone();
-        let confirmation_dialog_delete = gtk::Dialog::with_buttons(Some("Select custom"), Some(&window_main), gtk::DialogFlags::MODAL, &[("Ok", gtk::ResponseType::Ok), ("Close", gtk::ResponseType::Cancel)]);
-        let label: gtk::Label = gtk::Label::new(Some("Usage: */folder-nr*/* or name-version-*.txt"));
-
-        let radio_path = gtk::RadioButton::with_label("Path");
-        let radio_name = gtk::RadioButton::with_label_from_widget(&radio_path, "Name");
-        let radio_name_path = gtk::RadioButton::with_label_from_widget(&radio_path, "Path + Name");
-
-        let entry_path = gtk::Entry::new();
-        let entry_name = gtk::Entry::new();
-        let entry_name_path = gtk::Entry::new();
-
-        label.set_margin_bottom(5);
-        label.set_margin_end(5);
-        label.set_margin_start(5);
-
-        // TODO Label should have const width, and rest should fill entry, but for now is 50%-50%
-        let grid = gtk::Grid::new();
-        grid.set_row_homogeneous(true);
-        grid.set_column_homogeneous(true);
-
-        grid.attach(&label, 0, 0, 2, 1);
-
-        grid.attach(&radio_path, 0, 1, 1, 1);
-        grid.attach(&radio_name, 0, 2, 1, 1);
-        grid.attach(&radio_name_path, 0, 3, 1, 1);
-
-        grid.attach(&entry_path, 1, 1, 1, 1);
-        grid.attach(&entry_name, 1, 2, 1, 1);
-        grid.attach(&entry_name_path, 1, 3, 1, 1);
-
-        for widgets in confirmation_dialog_delete.children() {
-            // By default GtkBox is child of dialog, so we can easily add other things to it
-            widgets.downcast::<gtk::Box>().unwrap().add(&grid);
-        }
+        let dialog = gtk::Dialog::builder().title(window_title).transient_for(window_main).build();
+        dialog.add_button("Ok", ResponseType::Ok);
+        dialog.add_button("Close", ResponseType::Cancel);
+
+        let check_button_path = gtk::CheckButton::builder().label("Path").build();
+        let check_button_name = gtk::CheckButton::builder().label("Name").build();
+        let check_button_rust_regex = gtk::CheckButton::builder().label("Regex Path + Name").build();
 
-        confirmation_dialog_delete.show_all();
-
-        let response_type = confirmation_dialog_delete.run();
-        if response_type == gtk::ResponseType::Ok {
-            if radio_path.is_active() {
-                wildcard_type = WildcardType::Path;
-                wildcard = entry_path.text().to_string();
-            } else if radio_name.is_active() {
-                wildcard_type = WildcardType::Name;
-                wildcard = entry_name.text().to_string();
-            } else if radio_name_path.is_active() {
-                wildcard_type = WildcardType::PathName;
-                wildcard = entry_name_path.text().to_string();
-            } else {
-                panic!("Non handled option in select wildcard");
-            }
-        } else {
-            confirmation_dialog_delete.close();
-            return;
-        }
-        confirmation_dialog_delete.close();
-    }
-    if !wildcard.is_empty() {
-        let wildcard = wildcard.trim();
-
-        #[cfg(target_family = "windows")]
-        let wildcard = wildcard.replace("/", "\\");
-        #[cfg(target_family = "windows")]
-        let wildcard = wildcard.as_str();
-
-        let model = get_list_store(tree_view);
-
-        let iter = model.iter_first().unwrap(); // Never should be available button where there is no available records
-
-        loop {
-            if let Some(column_color) = column_color {
-                let color = model.value(&iter, column_color).get::<String>().unwrap();
-                if color == HEADER_ROW_COLOR {
-                    if !model.iter_next(&iter) {
-                        break;
-                    }
-                    continue;
-                }
-            }
-
-            let path = model.value(&iter, column_path).get::<String>().unwrap();
-            let name = model.value(&iter, column_file_name).get::<String>().unwrap();
-            match wildcard_type {
-                WildcardType::Path => {
-                    if Common::regex_check(wildcard, path) {
-                        model.set_value(&iter, column_button_selection, &true.to_value());
-                    }
-                }
-                WildcardType::Name => {
-                    if Common::regex_check(wildcard, name) {
-                        model.set_value(&iter, column_button_selection, &true.to_value());
-                    }
-                }
-                WildcardType::PathName => {
-                    if Common::regex_check(wildcard, format!("{}/{}", path, name)) {
-                        model.set_value(&iter, column_button_selection, &true.to_value());
-                    }
-                }
-            }
-
-            if !model.iter_next(&iter) {
-                break;
-            }
-        }
-    }
-}
-fn popover_unselect_custom(popover: &gtk::Popover, gui_data: &GuiData, tree_view: &gtk::TreeView, column_color: Option<i32>, column_file_name: i32, column_path: i32, column_button_selection: u32) {
-    popover.popdown();
-
-    let wildcard: String;
-    enum WildcardType {
-        Path,
-        Name,
-        PathName,
-    }
-    let wildcard_type: WildcardType;
-
-    // Accept Dialog
-    {
-        let window_main = gui_data.window_main.clone();
-        let confirmation_dialog_delete = gtk::Dialog::with_buttons(Some("Unselect custom"), Some(&window_main), gtk::DialogFlags::MODAL, &[("Ok", gtk::ResponseType::Ok), ("Close", gtk::ResponseType::Cancel)]);
-        let label: gtk::Label = gtk::Label::new(Some("Usage: */folder-nr*/* or name-version-*.txt"));
-
-        let radio_path = gtk::RadioButton::with_label("Path");
-        let radio_name = gtk::RadioButton::with_label_from_widget(&radio_path, "Name");
-        let radio_name_path = gtk::RadioButton::with_label_from_widget(&radio_path, "Path + Name");
+        let check_button_select_not_all_results = gtk::CheckButton::builder().label("Don't select all records in group").build();
+        check_button_select_not_all_results.set_active(true);
 
         let entry_path = gtk::Entry::new();
         let entry_name = gtk::Entry::new();
-        let entry_name_path = gtk::Entry::new();
-
-        label.set_margin_bottom(5);
-        label.set_margin_end(5);
-        label.set_margin_start(5);
-
-        // TODO Label should have const width, and rest should fill entry, but for now is 50%-50%
-        let grid = gtk::Grid::new();
-        grid.set_row_homogeneous(true);
-        grid.set_column_homogeneous(true);
-
-        grid.attach(&label, 0, 0, 2, 1);
-
-        grid.attach(&radio_path, 0, 1, 1, 1);
-        grid.attach(&radio_name, 0, 2, 1, 1);
-        grid.attach(&radio_name_path, 0, 3, 1, 1);
-
-        grid.attach(&entry_path, 1, 1, 1, 1);
-        grid.attach(&entry_name, 1, 2, 1, 1);
-        grid.attach(&entry_name_path, 1, 3, 1, 1);
-
-        let box_widget = get_dialog_box_child(&confirmation_dialog_delete);
-        box_widget.add(&grid);
-
-        confirmation_dialog_delete.show_all();
-
-        let response_type = confirmation_dialog_delete.run();
-        if response_type == gtk::ResponseType::Ok {
-            if radio_path.is_active() {
-                wildcard_type = WildcardType::Path;
-                wildcard = entry_path.text().to_string();
-            } else if radio_name.is_active() {
-                wildcard_type = WildcardType::Name;
-                wildcard = entry_name.text().to_string();
-            } else if radio_name_path.is_active() {
-                wildcard_type = WildcardType::PathName;
-                wildcard = entry_name_path.text().to_string();
-            } else {
-                panic!("Non handled option in unselect wildcard");
-            }
-        } else {
-            confirmation_dialog_delete.close();
-            return;
-        }
-        confirmation_dialog_delete.close();
-    }
-    if !wildcard.is_empty() {
-        let wildcard = wildcard.trim();
-
-        #[cfg(target_family = "windows")]
-        let wildcard = wildcard.replace("/", "\\");
-        #[cfg(target_family = "windows")]
-        let wildcard = wildcard.as_str();
-
-        let model = get_list_store(tree_view);
+        let entry_rust_regex = gtk::Entry::new();
+        entry_rust_regex.set_sensitive(false); // By default check button regex is disabled
 
-        let iter = model.iter_first().unwrap(); // Never should be available button where there is no available records
+        let label_regex_valid = gtk::Label::new(None);
 
-        loop {
-            if let Some(column_color) = column_color {
-                let color = model.value(&iter, column_color).get::<String>().unwrap();
-                if color == HEADER_ROW_COLOR {
-                    if !model.iter_next(&iter) {
-                        break;
+        // Tooltips
+        {
+            let tooltip_path = "Allows to select records by its path.\n\nExample usage:\n/home/pimpek/rzecz.txt can be found with /home/pim*";
+            let tooltip_name = "Allows to select records by file names.\n\nExample usage:\n/usr/ping/pong.txt can be found with *ong*";
+            let tooltip_regex = "Allows to select records by specified Regex.\n\nWith this mode, searched text is Path with Name\n\nExample usage:\n/usr/bin/ziemniak.txt can be found with /ziem[a-z]+\n\nThis use default Rust regex implementation, so you can read more about it in https://docs.rs/regex.";
+            let tooltip_group_button = "Prevents from selecting all records in group.\n\n This is enabled by default, because in most of situations user don't want to delete both original and duplicates files, but want to leave at least one file.\n\nWarning: This setting don't work if already user selected all results in group manually.";
+
+            check_button_path.set_tooltip_text(Some(tooltip_path));
+            entry_path.set_tooltip_text(Some(tooltip_path));
+
+            check_button_name.set_tooltip_text(Some(tooltip_name));
+            entry_name.set_tooltip_text(Some(tooltip_name));
+
+            check_button_rust_regex.set_tooltip_text(Some(tooltip_regex));
+            entry_rust_regex.set_tooltip_text(Some(tooltip_regex));
+
+            check_button_select_not_all_results.set_tooltip_text(Some(tooltip_group_button));
+        }
+        {
+            let label_regex_valid = label_regex_valid.clone();
+            entry_rust_regex.connect_changed(move |entry_rust_regex| {
+                let message;
+                let text_to_check = entry_rust_regex.text().to_string();
+                if text_to_check.is_empty() {
+                    message = "";
+                } else {
+                    match Regex::new(&text_to_check) {
+                        Ok(_) => message = "Regex is valid",
+                        Err(_) => message = "Regex is invalid",
                     }
-                    continue;
                 }
-            }
 
-            let path = model.value(&iter, column_path).get::<String>().unwrap();
-            let name = model.value(&iter, column_file_name).get::<String>().unwrap();
-            match wildcard_type {
-                WildcardType::Path => {
-                    if Common::regex_check(wildcard, path) {
-                        model.set_value(&iter, column_button_selection, &false.to_value());
-                    }
-                }
-                WildcardType::Name => {
-                    if Common::regex_check(wildcard, name) {
-                        model.set_value(&iter, column_button_selection, &false.to_value());
-                    }
-                }
-                WildcardType::PathName => {
-                    if Common::regex_check(wildcard, format!("{}/{}", path, name)) {
-                        model.set_value(&iter, column_button_selection, &false.to_value());
+                // TODO add red and green color to text
+                // let attributes_list = AttrList::new();
+                // let p_a = PangoAttribute::init();
+                // let attribute = PangoAttrFontDesc { attr };
+                // attributes_list.insert(attribute);
+                // label_regex_valid.set_attributes(Some(&attributes_list));
+                label_regex_valid.set_text(message);
+            });
+        }
+
+        // Disable other modes when Rust Regex is enabled
+        {
+            let check_button_path = check_button_path.clone();
+            let check_button_name = check_button_name.clone();
+            let check_button_rust_regex = check_button_rust_regex.clone();
+            let entry_path = entry_path.clone();
+            let entry_name = entry_name.clone();
+            let entry_rust_regex = entry_rust_regex.clone();
+            check_button_rust_regex.connect_toggled(move |check_button_rust_regex| {
+                if check_button_rust_regex.is_active() {
+                    check_button_path.set_sensitive(false);
+                    check_button_name.set_sensitive(false);
+                    entry_path.set_sensitive(false);
+                    entry_name.set_sensitive(false);
+                    entry_rust_regex.set_sensitive(true);
+                } else {
+                    check_button_path.set_sensitive(true);
+                    check_button_name.set_sensitive(true);
+                    entry_path.set_sensitive(true);
+                    entry_name.set_sensitive(true);
+                    entry_rust_regex.set_sensitive(false);
+                }
+            });
+        }
+
+        // Configure look of things
+        {
+            // TODO Label should have const width, and rest should fill entry, but for now is 50%-50%
+            let grid = gtk::Grid::new();
+            grid.set_row_homogeneous(true);
+            grid.set_column_homogeneous(true);
+
+            grid.attach(&check_button_name, 0, 1, 1, 1);
+            grid.attach(&check_button_path, 0, 2, 1, 1);
+            grid.attach(&check_button_rust_regex, 0, 3, 1, 1);
+
+            grid.attach(&entry_name, 1, 1, 1, 1);
+            grid.attach(&entry_path, 1, 2, 1, 1);
+            grid.attach(&entry_rust_regex, 1, 3, 1, 1);
+
+            grid.attach(&label_regex_valid, 0, 4, 2, 1);
+
+            if select_things {
+                grid.attach(&check_button_select_not_all_results, 0, 5, 2, 1);
+            }
+
+            let box_widget = get_dialog_box_child(&dialog);
+            box_widget.add(&grid);
+
+            dialog.show_all();
+        }
+
+        let tree_view = tree_view.clone();
+        dialog.connect_response(move |confirmation_dialog_select_unselect, response_type| {
+            let name_widcard = entry_name.text().trim().to_string();
+            let path_widcard = entry_path.text().trim().to_string();
+            let regex_widcard = entry_rust_regex.text().trim().to_string();
+
+            #[cfg(target_family = "windows")]
+            let name_widcard = name_widcard.replace("/", "\\");
+            #[cfg(target_family = "windows")]
+            let path_widcard = name_widcard.replace("/", "\\");
+
+            if response_type == gtk::ResponseType::Ok {
+                let check_path = check_button_path.is_active();
+                let check_name = check_button_name.is_active();
+                let check_regex = check_button_rust_regex.is_active();
+
+                let check_all_selected = check_button_select_not_all_results.is_active();
+
+                if check_button_path.is_active() || check_button_name.is_active() || check_button_rust_regex.is_active() {
+                    let compiled_regex = match check_regex {
+                        true => match Regex::new(&regex_widcard) {
+                            Ok(t) => t,
+                            Err(_) => {
+                                eprintln!("What? Regex should compile properly.");
+                                confirmation_dialog_select_unselect.close();
+                                return;
+                            }
+                        },
+                        false => Regex::new("").unwrap(),
+                    };
+
+                    let model = get_list_store(&tree_view);
+
+                    let iter = model.iter_first().unwrap(); // Never should be available button where there is no available records
+
+                    let mut number_of_all_things = 0;
+                    let mut number_of_already_selected_things = 0;
+                    let mut vec_of_iters: Vec<TreeIter> = Vec::new();
+                    loop {
+                        if let Some(column_color) = column_color {
+                            let color = model.value(&iter, column_color).get::<String>().unwrap();
+                            if color == HEADER_ROW_COLOR {
+                                if select_things {
+                                    if check_all_selected && (number_of_all_things - number_of_already_selected_things == vec_of_iters.len()) {
+                                        vec_of_iters.pop();
+                                    }
+                                    for iter in vec_of_iters {
+                                        model.set_value(&iter, column_button_selection, &true.to_value());
+                                    }
+                                } else {
+                                    for iter in vec_of_iters {
+                                        model.set_value(&iter, column_button_selection, &false.to_value());
+                                    }
+                                }
+
+                                if !model.iter_next(&iter) {
+                                    break;
+                                }
+
+                                number_of_all_things = 0;
+                                number_of_already_selected_things = 0;
+                                vec_of_iters = Vec::new();
+                                continue;
+                            }
+                        }
+
+                        let is_selected = model.value(&iter, column_button_selection as i32).get::<bool>().unwrap();
+                        let path = model.value(&iter, column_path).get::<String>().unwrap();
+                        let name = model.value(&iter, column_file_name).get::<String>().unwrap();
+                        #[cfg(not(target_family = "windows"))]
+                        let character = "/";
+                        #[cfg(target_family = "windows")]
+                        let character = "\\";
+                        let path_and_name = format!("{}{}{}", path, character, name);
+
+                        let mut need_to_change_thing: bool = false;
+
+                        number_of_all_things += 1;
+                        if check_regex && compiled_regex.find(&path_and_name).is_some() {
+                            need_to_change_thing = true;
+                        } else {
+                            if check_name && Common::regex_check(&name_widcard, &name) {
+                                need_to_change_thing = true;
+                            }
+                            if check_path && Common::regex_check(&path_widcard, &path) {
+                                need_to_change_thing = true;
+                            }
+                        }
+
+                        if need_to_change_thing {
+                            if select_things {
+                                if is_selected {
+                                    number_of_already_selected_things += 1;
+                                } else {
+                                    vec_of_iters.push(iter.clone());
+                                }
+                            } else {
+                                vec_of_iters.push(iter.clone());
+                            }
+                        }
+
+                        if !model.iter_next(&iter) {
+                            if select_things {
+                                if check_all_selected && (number_of_all_things - number_of_already_selected_things == vec_of_iters.len()) {
+                                    vec_of_iters.pop();
+                                }
+                                for iter in vec_of_iters {
+                                    model.set_value(&iter, column_button_selection, &true.to_value());
+                                }
+                            } else {
+                                for iter in vec_of_iters {
+                                    model.set_value(&iter, column_button_selection, &false.to_value());
+                                }
+                            }
+                            break;
+                        }
                     }
                 }
             }
-
-            if !model.iter_next(&iter) {
-                break;
-            }
-        }
+            confirmation_dialog_select_unselect.close();
+        });
     }
 }
 
-fn popover_all_except_biggest(popover: &gtk::Popover, tree_view: &gtk::TreeView, column_color: i32, column_size_as_bytes: i32, column_dimensions: i32, column_button_selection: u32) {
+fn popover_all_except_biggest_smallest(popover: &gtk::Popover, tree_view: &gtk::TreeView, column_color: i32, column_size_as_bytes: i32, column_dimensions: Option<i32>, column_button_selection: u32, except_biggest: bool) {
     let model = get_list_store(tree_view);
 
     if let Some(iter) = model.iter_first() {
         let mut end: bool = false;
         loop {
             let mut tree_iter_array: Vec<TreeIter> = Vec::new();
-            let mut biggest_index: Option<usize> = None;
+            let mut used_index: Option<usize> = None;
             let mut current_index: usize = 0;
-            let mut biggest_size_as_bytes: u64 = 0;
-            let mut biggest_number_of_pixels: u64 = 0;
+            let mut size_as_bytes_min_max: u64 = match except_biggest {
+                true => 0,
+                false => u64::MAX,
+            };
+            let mut number_of_pixels_min_max: u64 = match except_biggest {
+                true => 0,
+                false => u64::MAX,
+            };
 
             loop {
                 let color = model.value(&iter, column_color).get::<String>().unwrap();
@@ -537,74 +488,39 @@
                 }
                 tree_iter_array.push(iter.clone());
                 let size_as_bytes = model.value(&iter, column_size_as_bytes).get::<u64>().unwrap();
-                let dimensions_string = model.value(&iter, column_dimensions).get::<String>().unwrap();
-
-                let dimensions = change_dimension_to_krotka(dimensions_string);
-                let number_of_pixels = dimensions.0 * dimensions.1;
-
-                if number_of_pixels > biggest_number_of_pixels || (number_of_pixels == biggest_number_of_pixels && size_as_bytes > biggest_size_as_bytes) {
-                    biggest_number_of_pixels = number_of_pixels;
-                    biggest_size_as_bytes = size_as_bytes;
-                    biggest_index = Some(current_index);
-                }
 
-                current_index += 1;
-
-                if !model.iter_next(&iter) {
-                    end = true;
-                    break;
-                }
-            }
-            if biggest_index == None {
-                continue;
-            }
-            for (index, tree_iter) in tree_iter_array.iter().enumerate() {
-                if index != biggest_index.unwrap() {
-                    model.set_value(tree_iter, column_button_selection, &true.to_value());
+                // If dimension exists, then needs to be checked images
+                if let Some(column_dimensions) = column_dimensions {
+                    let dimensions_string = model.value(&iter, column_dimensions).get::<String>().unwrap();
+
+                    let dimensions = change_dimension_to_krotka(dimensions_string);
+                    let number_of_pixels = dimensions.0 * dimensions.1;
+
+                    if except_biggest {
+                        if number_of_pixels > number_of_pixels_min_max || (number_of_pixels == number_of_pixels_min_max && size_as_bytes > size_as_bytes_min_max) {
+                            number_of_pixels_min_max = number_of_pixels;
+                            size_as_bytes_min_max = size_as_bytes;
+                            used_index = Some(current_index);
+                        }
+                    } else {
+                        if number_of_pixels < number_of_pixels_min_max || (number_of_pixels == number_of_pixels_min_max && size_as_bytes < size_as_bytes_min_max) {
+                            number_of_pixels_min_max = number_of_pixels;
+                            size_as_bytes_min_max = size_as_bytes;
+                            used_index = Some(current_index);
+                        }
+                    }
                 } else {
-                    model.set_value(tree_iter, column_button_selection, &false.to_value());
-                }
-            }
-
-            if end {
-                break;
-            }
-        }
-    }
-
-    popover.popdown();
-}
-fn popover_all_except_smallest(popover: &gtk::Popover, tree_view: &gtk::TreeView, column_color: i32, column_size_as_bytes: i32, column_dimensions: i32, column_button_selection: u32) {
-    let model = get_list_store(tree_view);
-
-    if let Some(iter) = model.iter_first() {
-        let mut end: bool = false;
-        loop {
-            let mut tree_iter_array: Vec<TreeIter> = Vec::new();
-            let mut smallest_index: Option<usize> = None;
-            let mut current_index: usize = 0;
-            let mut smallest_size_as_bytes: u64 = u64::MAX;
-            let mut smallest_number_of_pixels: u64 = u64::MAX;
-
-            loop {
-                let color = model.value(&iter, column_color).get::<String>().unwrap();
-                if color == HEADER_ROW_COLOR {
-                    if !model.iter_next(&iter) {
-                        end = true;
+                    if except_biggest {
+                        if size_as_bytes > size_as_bytes_min_max {
+                            size_as_bytes_min_max = size_as_bytes;
+                            used_index = Some(current_index);
+                        }
+                    } else {
+                        if size_as_bytes < size_as_bytes_min_max {
+                            size_as_bytes_min_max = size_as_bytes;
+                            used_index = Some(current_index);
+                        }
                     }
-                    break;
-                }
-                tree_iter_array.push(iter.clone());
-                let size_as_bytes = model.value(&iter, column_size_as_bytes).get::<u64>().unwrap();
-                let dimensions_string = model.value(&iter, column_dimensions).get::<String>().unwrap();
-
-                let dimensions = change_dimension_to_krotka(dimensions_string);
-                let number_of_pixels = dimensions.0 * dimensions.1;
-
-                if number_of_pixels < smallest_number_of_pixels || (number_of_pixels == smallest_number_of_pixels && size_as_bytes < smallest_size_as_bytes) {
-                    smallest_number_of_pixels = number_of_pixels;
-                    smallest_size_as_bytes = size_as_bytes;
-                    smallest_index = Some(current_index);
                 }
 
                 current_index += 1;
@@ -614,11 +530,11 @@
                     break;
                 }
             }
-            if smallest_index == None {
+            if used_index == None {
                 continue;
             }
             for (index, tree_iter) in tree_iter_array.iter().enumerate() {
-                if index != smallest_index.unwrap() {
+                if index != used_index.unwrap() {
                     model.set_value(tree_iter, column_button_selection, &true.to_value());
                 } else {
                     model.set_value(tree_iter, column_button_selection, &false.to_value());
@@ -634,320 +550,205 @@
     popover.popdown();
 }
 
-#[derive(Clone)]
-pub struct PopoverObject {
-    pub notebook_type: NotebookMainEnum,
-    pub available_modes: Vec<String>,
-    pub tree_view: gtk::TreeView,
-    pub column_path: i32,
-    pub column_name: i32,
-    pub column_selection: u32, // TODo Change this to i32 after properly implement all things
-    pub column_color: Option<i32>,
-    pub column_dimensions: Option<i32>,
-    pub column_size: Option<i32>,
-    pub column_size_as_bytes: Option<i32>,
-    pub column_modification_as_secs: Option<i32>,
-}
-
-pub fn find_name(notebook_type: &NotebookMainEnum, vec: &[PopoverObject]) -> Option<PopoverObject> {
-    for e in vec {
-        if e.notebook_type == *notebook_type {
-            return Some(e.clone());
-        }
-    }
-    None
-}
-
 pub fn connect_popovers(gui_data: &GuiData) {
-    let popover_objects = vec![
-        PopoverObject {
-            notebook_type: NotebookMainEnum::Duplicate,
-            available_modes: vec!["all", "reverse", "custom", "date"].iter().map(|e| e.to_string()).collect(),
-            tree_view: gui_data.main_notebook.tree_view_duplicate_finder.clone(),
-            column_path: ColumnsDuplicates::Path as i32,
-            column_name: ColumnsDuplicates::Name as i32,
-            column_selection: ColumnsDuplicates::ActiveSelectButton as u32,
-            column_color: Some(ColumnsDuplicates::Color as i32),
-            column_dimensions: None,
-            column_size: None,
-            column_size_as_bytes: None,
-            column_modification_as_secs: Some(ColumnsDuplicates::ModificationAsSecs as i32),
-        },
-        PopoverObject {
-            notebook_type: NotebookMainEnum::SameMusic,
-            available_modes: vec!["all", "reverse", "custom", "date"].iter().map(|e| e.to_string()).collect(),
-            tree_view: gui_data.main_notebook.tree_view_same_music_finder.clone(),
-            column_path: ColumnsSameMusic::Path as i32,
-            column_name: ColumnsSameMusic::Name as i32,
-            column_selection: ColumnsSameMusic::ActiveSelectButton as u32,
-            column_color: Some(ColumnsSameMusic::Color as i32),
-            column_dimensions: None,
-            column_size: None,
-            column_size_as_bytes: Some(ColumnsSameMusic::SizeAsBytes as i32),
-            column_modification_as_secs: Some(ColumnsSameMusic::ModificationAsSecs as i32),
-        },
-        PopoverObject {
-            notebook_type: NotebookMainEnum::SimilarImages,
-            available_modes: vec!["all", "reverse", "custom", "date"].iter().map(|e| e.to_string()).collect(),
-            tree_view: gui_data.main_notebook.tree_view_similar_images_finder.clone(),
-            column_path: ColumnsSimilarImages::Path as i32,
-            column_name: ColumnsSimilarImages::Name as i32,
-            column_selection: ColumnsSimilarImages::ActiveSelectButton as u32,
-            column_color: Some(ColumnsSimilarImages::Color as i32),
-            column_dimensions: Some(ColumnsSimilarImages::Dimensions as i32),
-            column_size: Some(ColumnsSimilarImages::Size as i32),
-            column_size_as_bytes: Some(ColumnsSimilarImages::SizeAsBytes as i32),
-            column_modification_as_secs: Some(ColumnsSimilarImages::ModificationAsSecs as i32),
-        },
-        PopoverObject {
-            notebook_type: NotebookMainEnum::EmptyDirectories,
-            available_modes: vec!["all", "reverse", "custom"].iter().map(|e| e.to_string()).collect(),
-            tree_view: gui_data.main_notebook.tree_view_empty_folder_finder.clone(),
-            column_path: ColumnsEmptyFolders::Path as i32,
-            column_name: ColumnsEmptyFolders::Name as i32,
-            column_selection: ColumnsEmptyFolders::ActiveSelectButton as u32,
-            column_color: None,
-            column_dimensions: None,
-            column_size: None,
-            column_size_as_bytes: None,
-            column_modification_as_secs: None,
-        },
-        PopoverObject {
-            notebook_type: NotebookMainEnum::EmptyFiles,
-            available_modes: vec!["all", "reverse", "custom"].iter().map(|e| e.to_string()).collect(),
-            tree_view: gui_data.main_notebook.tree_view_empty_files_finder.clone(),
-            column_path: ColumnsEmptyFiles::Path as i32,
-            column_name: ColumnsEmptyFiles::Name as i32,
-            column_selection: ColumnsEmptyFiles::ActiveSelectButton as u32,
-            column_color: None,
-            column_dimensions: None,
-            column_size: None,
-            column_size_as_bytes: None,
-            column_modification_as_secs: None,
-        },
-        PopoverObject {
-            notebook_type: NotebookMainEnum::Temporary,
-            available_modes: vec!["all", "reverse", "custom"].iter().map(|e| e.to_string()).collect(),
-            tree_view: gui_data.main_notebook.tree_view_temporary_files_finder.clone(),
-            column_path: ColumnsTemporaryFiles::Path as i32,
-            column_name: ColumnsTemporaryFiles::Name as i32,
-            column_selection: ColumnsTemporaryFiles::ActiveSelectButton as u32,
-            column_color: None,
-            column_dimensions: None,
-            column_size: None,
-            column_size_as_bytes: None,
-            column_modification_as_secs: None,
-        },
-        PopoverObject {
-            notebook_type: NotebookMainEnum::BigFiles,
-            available_modes: vec!["all", "reverse", "custom"].iter().map(|e| e.to_string()).collect(),
-            tree_view: gui_data.main_notebook.tree_view_big_files_finder.clone(),
-            column_path: ColumnsBigFiles::Path as i32,
-            column_name: ColumnsBigFiles::Name as i32,
-            column_selection: ColumnsBigFiles::ActiveSelectButton as u32,
-            column_color: None,
-            column_dimensions: None,
-            column_size: None,
-            column_size_as_bytes: None,
-            column_modification_as_secs: None,
-        },
-        PopoverObject {
-            notebook_type: NotebookMainEnum::Zeroed,
-            available_modes: vec!["all", "reverse", "custom"].iter().map(|e| e.to_string()).collect(),
-            tree_view: gui_data.main_notebook.tree_view_zeroed_files_finder.clone(),
-            column_path: ColumnsZeroedFiles::Path as i32,
-            column_name: ColumnsZeroedFiles::Name as i32,
-            column_selection: ColumnsZeroedFiles::ActiveSelectButton as u32,
-            column_color: None,
-            column_dimensions: None,
-            column_size: None,
-            column_size_as_bytes: Some(ColumnsZeroedFiles::SizeAsBytes as i32),
-            column_modification_as_secs: None,
-        },
-        PopoverObject {
-            notebook_type: NotebookMainEnum::BrokenFiles,
-            available_modes: vec!["all", "reverse", "custom"].iter().map(|e| e.to_string()).collect(),
-            tree_view: gui_data.main_notebook.tree_view_broken_files.clone(),
-            column_path: ColumnsBrokenFiles::Path as i32,
-            column_name: ColumnsBrokenFiles::Name as i32,
-            column_selection: ColumnsBrokenFiles::ActiveSelectButton as u32,
-            column_color: None,
-            column_dimensions: None,
-            column_size: None,
-            column_size_as_bytes: None,
-            column_modification_as_secs: None,
-        },
-        PopoverObject {
-            notebook_type: NotebookMainEnum::Symlinks,
-            available_modes: vec!["all", "reverse", "custom"].iter().map(|e| e.to_string()).collect(),
-            tree_view: gui_data.main_notebook.tree_view_invalid_symlinks.clone(),
-            column_path: ColumnsInvalidSymlinks::Path as i32,
-            column_name: ColumnsInvalidSymlinks::Name as i32,
-            column_selection: ColumnsInvalidSymlinks::ActiveSelectButton as u32,
-            column_color: None,
-            column_dimensions: None,
-            column_size: None,
-            column_size_as_bytes: None,
-            column_modification_as_secs: None,
-        },
-    ];
-
     let popover_select = gui_data.popovers.popover_select.clone();
     let buttons_popover_select_all = gui_data.popovers.buttons_popover_select_all.clone();
     let notebook_main = gui_data.main_notebook.notebook_main.clone();
-    let vec_popover_objects = popover_objects.clone();
+    let main_tree_views = gui_data.main_notebook.get_main_tree_views();
+
     buttons_popover_select_all.connect_clicked(move |_| {
-        let object_popover = find_name(&to_notebook_main_enum(notebook_main.current_page().unwrap()), &vec_popover_objects).unwrap();
-        popover_select_all(&popover_select, &object_popover.tree_view, object_popover.column_selection);
+        let nb_number = notebook_main.current_page().unwrap();
+        let tree_view = &main_tree_views[nb_number as usize];
+        let nb_object = &NOTEBOOKS_INFOS[nb_number as usize];
+
+        popover_select_all(&popover_select, tree_view, nb_object.column_selection as u32, nb_object.column_color);
     });
 
     let popover_select = gui_data.popovers.popover_select.clone();
     let buttons_popover_unselect_all = gui_data.popovers.buttons_popover_unselect_all.clone();
     let notebook_main = gui_data.main_notebook.notebook_main.clone();
-    let vec_popover_objects = popover_objects.clone();
+    let main_tree_views = gui_data.main_notebook.get_main_tree_views();
     buttons_popover_unselect_all.connect_clicked(move |_| {
-        let object_popover = find_name(&to_notebook_main_enum(notebook_main.current_page().unwrap()), &vec_popover_objects).unwrap();
-        popover_unselect_all(&popover_select, &object_popover.tree_view, object_popover.column_selection);
+        let nb_number = notebook_main.current_page().unwrap();
+        let tree_view = &main_tree_views[nb_number as usize];
+        let nb_object = &NOTEBOOKS_INFOS[nb_number as usize];
+
+        popover_unselect_all(&popover_select, tree_view, nb_object.column_selection as u32);
     });
 
     let popover_select = gui_data.popovers.popover_select.clone();
     let buttons_popover_reverse = gui_data.popovers.buttons_popover_reverse.clone();
     let notebook_main = gui_data.main_notebook.notebook_main.clone();
-    let vec_popover_objects = popover_objects.clone();
+    let main_tree_views = gui_data.main_notebook.get_main_tree_views();
     buttons_popover_reverse.connect_clicked(move |_| {
-        let object_popover = find_name(&to_notebook_main_enum(notebook_main.current_page().unwrap()), &vec_popover_objects).unwrap();
-        popover_reverse(&popover_select, &object_popover.tree_view, object_popover.column_selection);
+        let nb_number = notebook_main.current_page().unwrap();
+        let tree_view = &main_tree_views[nb_number as usize];
+        let nb_object = &NOTEBOOKS_INFOS[nb_number as usize];
+
+        popover_reverse(&popover_select, tree_view, nb_object.column_selection as u32, nb_object.column_color);
     });
 
     let popover_select = gui_data.popovers.popover_select.clone();
     let buttons_popover_select_all_except_oldest = gui_data.popovers.buttons_popover_select_all_except_oldest.clone();
     let notebook_main = gui_data.main_notebook.notebook_main.clone();
-    let vec_popover_objects = popover_objects.clone();
+    let main_tree_views = gui_data.main_notebook.get_main_tree_views();
     buttons_popover_select_all_except_oldest.connect_clicked(move |_| {
-        let object_popover = find_name(&to_notebook_main_enum(notebook_main.current_page().unwrap()), &vec_popover_objects).unwrap();
-        popover_all_except_oldest(
+        let nb_number = notebook_main.current_page().unwrap();
+        let tree_view = &main_tree_views[nb_number as usize];
+        let nb_object = &NOTEBOOKS_INFOS[nb_number as usize];
+
+        popover_all_except_oldest_newest(
             &popover_select,
-            &object_popover.tree_view,
-            object_popover.column_color.unwrap(),
-            object_popover.column_modification_as_secs.unwrap(),
-            object_popover.column_name,
-            object_popover.column_selection,
+            tree_view,
+            nb_object.column_color.expect("AEO can't be used without headers"),
+            nb_object.column_modification_as_secs.expect("AEO needs modification as secs column"),
+            nb_object.column_name,
+            nb_object.column_selection as u32,
+            true,
         );
     });
 
     let popover_select = gui_data.popovers.popover_select.clone();
     let buttons_popover_select_all_except_newest = gui_data.popovers.buttons_popover_select_all_except_newest.clone();
     let notebook_main = gui_data.main_notebook.notebook_main.clone();
-    let vec_popover_objects = popover_objects.clone();
+    let main_tree_views = gui_data.main_notebook.get_main_tree_views();
     buttons_popover_select_all_except_newest.connect_clicked(move |_| {
-        let object_popover = find_name(&to_notebook_main_enum(notebook_main.current_page().unwrap()), &vec_popover_objects).unwrap();
-        popover_all_except_newest(
+        let nb_number = notebook_main.current_page().unwrap();
+        let tree_view = &main_tree_views[nb_number as usize];
+        let nb_object = &NOTEBOOKS_INFOS[nb_number as usize];
+
+        popover_all_except_oldest_newest(
             &popover_select,
-            &object_popover.tree_view,
-            object_popover.column_color.unwrap(),
-            object_popover.column_modification_as_secs.unwrap(),
-            object_popover.column_name,
-            object_popover.column_selection,
+            tree_view,
+            nb_object.column_color.expect("AEN can't be used without headers"),
+            nb_object.column_modification_as_secs.expect("AEN needs modification as secs column"),
+            nb_object.column_name,
+            nb_object.column_selection as u32,
+            false,
         );
     });
 
     let popover_select = gui_data.popovers.popover_select.clone();
     let buttons_popover_select_one_oldest = gui_data.popovers.buttons_popover_select_one_oldest.clone();
     let notebook_main = gui_data.main_notebook.notebook_main.clone();
-    let vec_popover_objects = popover_objects.clone();
+    let main_tree_views = gui_data.main_notebook.get_main_tree_views();
     buttons_popover_select_one_oldest.connect_clicked(move |_| {
-        let object_popover = find_name(&to_notebook_main_enum(notebook_main.current_page().unwrap()), &vec_popover_objects).unwrap();
-        popover_one_oldest(
+        let nb_number = notebook_main.current_page().unwrap();
+        let tree_view = &main_tree_views[nb_number as usize];
+        let nb_object = &NOTEBOOKS_INFOS[nb_number as usize];
+
+        popover_one_oldest_newest(
             &popover_select,
-            &object_popover.tree_view,
-            object_popover.column_color.unwrap(),
-            object_popover.column_modification_as_secs.unwrap(),
-            object_popover.column_name,
-            object_popover.column_selection,
+            tree_view,
+            nb_object.column_color.expect("OO can't be used without headers"),
+            nb_object.column_modification_as_secs.expect("OO needs modification as secs column"),
+            nb_object.column_name,
+            nb_object.column_selection as u32,
+            true,
         );
     });
 
     let popover_select = gui_data.popovers.popover_select.clone();
     let buttons_popover_select_one_newest = gui_data.popovers.buttons_popover_select_one_newest.clone();
     let notebook_main = gui_data.main_notebook.notebook_main.clone();
-    let vec_popover_objects = popover_objects.clone();
+    let main_tree_views = gui_data.main_notebook.get_main_tree_views();
     buttons_popover_select_one_newest.connect_clicked(move |_| {
-        let object_popover = find_name(&to_notebook_main_enum(notebook_main.current_page().unwrap()), &vec_popover_objects).unwrap();
-        popover_one_newest(
+        let nb_number = notebook_main.current_page().unwrap();
+        let tree_view = &main_tree_views[nb_number as usize];
+        let nb_object = &NOTEBOOKS_INFOS[nb_number as usize];
+
+        popover_one_oldest_newest(
             &popover_select,
-            &object_popover.tree_view,
-            object_popover.column_color.unwrap(),
-            object_popover.column_modification_as_secs.unwrap(),
-            object_popover.column_name,
-            object_popover.column_selection,
+            tree_view,
+            nb_object.column_color.expect("ON can't be used without headers"),
+            nb_object.column_modification_as_secs.expect("ON needs modification as secs column"),
+            nb_object.column_name,
+            nb_object.column_selection as u32,
+            false,
         );
     });
 
     let popover_select = gui_data.popovers.popover_select.clone();
     let buttons_popover_select_custom = gui_data.popovers.buttons_popover_select_custom.clone();
     let notebook_main = gui_data.main_notebook.notebook_main.clone();
-    let vec_popover_objects = popover_objects.clone();
-    let gui_data_clone = gui_data.clone();
+    let main_tree_views = gui_data.main_notebook.get_main_tree_views();
+    let window_main = gui_data.window_main.clone();
     buttons_popover_select_custom.connect_clicked(move |_| {
-        let object_popover = find_name(&to_notebook_main_enum(notebook_main.current_page().unwrap()), &vec_popover_objects).unwrap();
-        popover_select_custom(
+        let nb_number = notebook_main.current_page().unwrap();
+        let tree_view = &main_tree_views[nb_number as usize];
+        let nb_object = &NOTEBOOKS_INFOS[nb_number as usize];
+
+        popover_custom_select_unselect(
             &popover_select,
-            &gui_data_clone,
-            &object_popover.tree_view,
-            object_popover.column_color,
-            object_popover.column_name,
-            object_popover.column_path,
-            object_popover.column_selection,
+            &window_main,
+            tree_view,
+            nb_object.column_color,
+            nb_object.column_name,
+            nb_object.column_path,
+            nb_object.column_selection as u32,
+            true,
         );
     });
 
     let popover_select = gui_data.popovers.popover_select.clone();
     let buttons_popover_unselect_custom = gui_data.popovers.buttons_popover_unselect_custom.clone();
     let notebook_main = gui_data.main_notebook.notebook_main.clone();
-    let vec_popover_objects = popover_objects.clone();
-    let gui_data_clone = gui_data.clone();
+    let main_tree_views = gui_data.main_notebook.get_main_tree_views();
+    let window_main = gui_data.window_main.clone();
     buttons_popover_unselect_custom.connect_clicked(move |_| {
-        let object_popover = find_name(&to_notebook_main_enum(notebook_main.current_page().unwrap()), &vec_popover_objects).unwrap();
-        popover_unselect_custom(
+        let nb_number = notebook_main.current_page().unwrap();
+        let tree_view = &main_tree_views[nb_number as usize];
+        let nb_object = &NOTEBOOKS_INFOS[nb_number as usize];
+
+        popover_custom_select_unselect(
             &popover_select,
-            &gui_data_clone,
-            &object_popover.tree_view,
-            object_popover.column_color,
-            object_popover.column_name,
-            object_popover.column_path,
-            object_popover.column_selection,
+            &window_main,
+            tree_view,
+            nb_object.column_color,
+            nb_object.column_name,
+            nb_object.column_path,
+            nb_object.column_selection as u32,
+            false,
         );
     });
 
     let popover_select = gui_data.popovers.popover_select.clone();
     let buttons_popover_select_all_images_except_biggest = gui_data.popovers.buttons_popover_select_all_images_except_biggest.clone();
     let notebook_main = gui_data.main_notebook.notebook_main.clone();
-    let vec_popover_objects = popover_objects.clone();
+    let main_tree_views = gui_data.main_notebook.get_main_tree_views();
     buttons_popover_select_all_images_except_biggest.connect_clicked(move |_| {
-        let object_popover = find_name(&to_notebook_main_enum(notebook_main.current_page().unwrap()), &vec_popover_objects).unwrap();
-        popover_all_except_biggest(
+        let nb_number = notebook_main.current_page().unwrap();
+        let tree_view = &main_tree_views[nb_number as usize];
+        let nb_object = &NOTEBOOKS_INFOS[nb_number as usize];
+
+        popover_all_except_biggest_smallest(
             &popover_select,
-            &object_popover.tree_view,
-            object_popover.column_color.unwrap(),
-            object_popover.column_size_as_bytes.unwrap(),
-            object_popover.column_dimensions.unwrap(),
-            object_popover.column_selection,
+            tree_view,
+            nb_object.column_color.expect("AEB can't be used without headers"),
+            nb_object.column_size_as_bytes.expect("AEB needs size as bytes column"),
+            nb_object.column_dimensions,
+            nb_object.column_selection as u32,
+            true,
         );
     });
 
     let popover_select = gui_data.popovers.popover_select.clone();
     let buttons_popover_select_all_images_except_smallest = gui_data.popovers.buttons_popover_select_all_images_except_smallest.clone();
     let notebook_main = gui_data.main_notebook.notebook_main.clone();
-    let vec_popover_objects = popover_objects; //.clone();
+    let main_tree_views = gui_data.main_notebook.get_main_tree_views();
     buttons_popover_select_all_images_except_smallest.connect_clicked(move |_| {
-        let object_popover = find_name(&to_notebook_main_enum(notebook_main.current_page().unwrap()), &vec_popover_objects).unwrap();
-        popover_all_except_smallest(
+        let nb_number = notebook_main.current_page().unwrap();
+        let tree_view = &main_tree_views[nb_number as usize];
+        let nb_object = &NOTEBOOKS_INFOS[nb_number as usize];
+
+        popover_all_except_biggest_smallest(
             &popover_select,
-            &object_popover.tree_view,
-            object_popover.column_color.unwrap(),
-            object_popover.column_size_as_bytes.unwrap(),
-            object_popover.column_dimensions.unwrap(),
-            object_popover.column_selection,
+            tree_view,
+            nb_object.column_color.expect("AES can't be used without headers"),
+            nb_object.column_size_as_bytes.expect("AES needs size as bytes column"),
+            nb_object.column_dimensions,
+            nb_object.column_selection as u32,
+            false,
         );
     });
 }
diff -Naur orig/czkawka_gui/src/connect_progress_window.rs patched/czkawka_gui/src/connect_progress_window.rs
--- orig/czkawka_gui/src/connect_progress_window.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_progress_window.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,12 +1,11 @@
-use crate::gui_data::GuiData;
-use crate::taskbar_progress::tbp_flags::TBPF_INDETERMINATE;
-
-use czkawka_core::{big_file, broken_files, duplicate, empty_files, empty_folder, invalid_symlinks, same_music, similar_images, temporary, zeroed};
-
 use futures::StreamExt;
-
 use gtk::prelude::*;
 
+use czkawka_core::{big_file, broken_files, duplicate, empty_files, empty_folder, invalid_symlinks, same_music, similar_images, similar_videos, temporary};
+
+use crate::gui_data::GuiData;
+use crate::taskbar_progress::tbp_flags::TBPF_INDETERMINATE;
+
 #[allow(clippy::too_many_arguments)]
 pub fn connect_progress_window(
     gui_data: &GuiData,
@@ -16,8 +15,8 @@
     mut futures_receiver_big_files: futures::channel::mpsc::UnboundedReceiver<big_file::ProgressData>,
     mut futures_receiver_same_music: futures::channel::mpsc::UnboundedReceiver<same_music::ProgressData>,
     mut futures_receiver_similar_images: futures::channel::mpsc::UnboundedReceiver<similar_images::ProgressData>,
+    mut futures_receiver_similar_videos: futures::channel::mpsc::UnboundedReceiver<similar_videos::ProgressData>,
     mut futures_receiver_temporary: futures::channel::mpsc::UnboundedReceiver<temporary::ProgressData>,
-    mut futures_receiver_zeroed: futures::channel::mpsc::UnboundedReceiver<zeroed::ProgressData>,
     mut futures_receiver_invalid_symlinks: futures::channel::mpsc::UnboundedReceiver<invalid_symlinks::ProgressData>,
     mut futures_receiver_broken_files: futures::channel::mpsc::UnboundedReceiver<broken_files::ProgressData>,
 ) {
@@ -34,7 +33,7 @@
         let future = async move {
             while let Some(item) = futures_receiver_duplicate_files.next().await {
                 match item.checking_method {
-                    duplicate::CheckingMethod::Hash | duplicate::CheckingMethod::HashMb => {
+                    duplicate::CheckingMethod::Hash => {
                         label_stage.show();
                         match item.current_stage {
                             // Checking Size
@@ -230,43 +229,33 @@
         main_context.spawn_local(future);
     }
     {
-        // Temporary
-        let label_stage = gui_data.progress_window.label_stage.clone();
-        let taskbar_state = gui_data.taskbar_state.clone();
-        let future = async move {
-            while let Some(item) = futures_receiver_temporary.next().await {
-                label_stage.set_text(format!("Scanned {} files", item.files_checked).as_str());
-                taskbar_state.borrow().set_progress_state(TBPF_INDETERMINATE);
-            }
-        };
-        main_context.spawn_local(future);
-    }
-    {
-        // Zeroed Files
+        // Similar Videos
         let label_stage = gui_data.progress_window.label_stage.clone();
         let progress_bar_current_stage = gui_data.progress_window.progress_bar_current_stage.clone();
         let progress_bar_all_stages = gui_data.progress_window.progress_bar_all_stages.clone();
         let taskbar_state = gui_data.taskbar_state.clone();
         let future = async move {
-            while let Some(item) = futures_receiver_zeroed.next().await {
+            while let Some(item) = futures_receiver_similar_videos.next().await {
                 match item.current_stage {
                     0 => {
                         progress_bar_current_stage.hide();
-                        label_stage.set_text(format!("Scanned {} files", item.files_checked).as_str());
+                        label_stage.set_text(format!("Scanned {} files", item.videos_checked).as_str());
                         taskbar_state.borrow().set_progress_state(TBPF_INDETERMINATE);
                     }
                     1 => {
                         progress_bar_current_stage.show();
-                        if item.files_to_check != 0 {
-                            progress_bar_all_stages.set_fraction((1f64 + (item.files_checked) as f64 / item.files_to_check as f64) / (item.max_stage + 1) as f64);
-                            progress_bar_current_stage.set_fraction((item.files_checked) as f64 / item.files_to_check as f64);
-                            taskbar_state.borrow().set_progress_value((item.files_to_check + item.files_checked) as u64, item.files_to_check as u64 * (item.max_stage + 1) as u64);
+                        if item.videos_to_check != 0 {
+                            progress_bar_all_stages.set_fraction((1f64 + (item.videos_checked) as f64 / item.videos_to_check as f64) / (item.max_stage + 1) as f64);
+                            progress_bar_current_stage.set_fraction((item.videos_checked) as f64 / item.videos_to_check as f64);
+                            taskbar_state
+                                .borrow()
+                                .set_progress_value((item.videos_to_check + item.videos_checked) as u64, item.videos_to_check as u64 * (item.max_stage + 1) as u64);
                         } else {
                             progress_bar_all_stages.set_fraction((1f64) / (item.max_stage + 1) as f64);
                             progress_bar_current_stage.set_fraction(0f64);
                             taskbar_state.borrow().set_progress_value(1, (item.max_stage + 1) as u64);
                         }
-                        label_stage.set_text(format!("Checking {}/{} file", item.files_checked, item.files_to_check).as_str());
+                        label_stage.set_text(format!("Hashing {}/{} video", item.videos_checked, item.videos_to_check).as_str());
                     }
                     _ => {
                         panic!();
@@ -275,6 +264,18 @@
             }
         };
         main_context.spawn_local(future);
+    }
+    {
+        // Temporary
+        let label_stage = gui_data.progress_window.label_stage.clone();
+        let taskbar_state = gui_data.taskbar_state.clone();
+        let future = async move {
+            while let Some(item) = futures_receiver_temporary.next().await {
+                label_stage.set_text(format!("Scanned {} files", item.files_checked).as_str());
+                taskbar_state.borrow().set_progress_state(TBPF_INDETERMINATE);
+            }
+        };
+        main_context.spawn_local(future);
     }
     {
         // Invalid Symlinks
diff -Naur orig/czkawka_gui/src/connect_selection_of_directories.rs patched/czkawka_gui/src/connect_selection_of_directories.rs
--- orig/czkawka_gui/src/connect_selection_of_directories.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_selection_of_directories.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,10 +1,12 @@
-use crate::gui_data::GuiData;
-use crate::help_functions::get_list_store;
 use gtk::prelude::*;
+use gtk::{ResponseType, TreeView, Window};
 
 #[cfg(target_family = "windows")]
 use czkawka_core::common::Common;
 
+use crate::gui_data::GuiData;
+use crate::help_functions::{get_dialog_box_child, get_list_store, ColumnsDirectory};
+
 pub fn connect_selection_of_directories(gui_data: &GuiData) {
     // Add manually directory
     {
@@ -12,34 +14,7 @@
         let window_main = gui_data.window_main.clone();
         let buttons_manual_add_directory = gui_data.upper_notebook.buttons_manual_add_directory.clone();
         buttons_manual_add_directory.connect_clicked(move |_| {
-            let dialog_manual_add_directory = gtk::Dialog::with_buttons(Some("Add directory manually"), Some(&window_main), gtk::DialogFlags::MODAL, &[("Ok", gtk::ResponseType::Ok), ("Close", gtk::ResponseType::Cancel)]);
-            let entry: gtk::Entry = gtk::Entry::new();
-
-            for widgets in dialog_manual_add_directory.children() {
-                // By default GtkBox is child of dialog, so we can easily add other things to it
-                widgets.clone().downcast::<gtk::Box>().unwrap().add(&entry);
-            }
-
-            dialog_manual_add_directory.show_all();
-
-            let response_type = dialog_manual_add_directory.run();
-            if response_type == gtk::ResponseType::Ok {
-                let text = entry.text().to_string().trim().to_string();
-
-                #[cfg(target_family = "windows")]
-                let text = Common::normalize_windows_path(text).to_string_lossy().to_string();
-
-                if !text.is_empty() {
-                    let list_store = get_list_store(&tree_view_included_directories);
-
-                    let values: [(u32, &dyn ToValue); 1] = [(0, &text)];
-                    list_store.set(&list_store.append(), &values);
-                }
-            } else {
-                dialog_manual_add_directory.close();
-                return;
-            }
-            dialog_manual_add_directory.close();
+            add_manually_directories(&window_main, &tree_view_included_directories);
         });
     }
     // Add manually excluded directory
@@ -48,39 +23,7 @@
         let window_main = gui_data.window_main.clone();
         let buttons_manual_add_excluded_directory = gui_data.upper_notebook.buttons_manual_add_excluded_directory.clone();
         buttons_manual_add_excluded_directory.connect_clicked(move |_| {
-            let dialog_manual_add_directory = gtk::Dialog::with_buttons(
-                Some("Add excluded directory manually"),
-                Some(&window_main),
-                gtk::DialogFlags::MODAL,
-                &[("Ok", gtk::ResponseType::Ok), ("Close", gtk::ResponseType::Cancel)],
-            );
-            let entry: gtk::Entry = gtk::Entry::new();
-
-            for widgets in dialog_manual_add_directory.children() {
-                // By default GtkBox is child of dialog, so we can easily add other things to it
-                widgets.clone().downcast::<gtk::Box>().unwrap().add(&entry);
-            }
-
-            dialog_manual_add_directory.show_all();
-
-            let response_type = dialog_manual_add_directory.run();
-            if response_type == gtk::ResponseType::Ok {
-                let text = entry.text().to_string().trim().to_string();
-
-                #[cfg(target_family = "windows")]
-                let text = Common::normalize_windows_path(text).to_string_lossy().to_string();
-
-                if !text.is_empty() {
-                    let list_store = get_list_store(&tree_view_excluded_directories);
-
-                    let values: [(u32, &dyn ToValue); 1] = [(0, &text)];
-                    list_store.set(&list_store.append(), &values);
-                }
-            } else {
-                dialog_manual_add_directory.close();
-                return;
-            }
-            dialog_manual_add_directory.close();
+            add_manually_directories(&window_main, &tree_view_excluded_directories);
         });
     }
     // Add included directory
@@ -89,26 +32,7 @@
         let window_main = gui_data.window_main.clone();
         let buttons_add_included_directory = gui_data.upper_notebook.buttons_add_included_directory.clone();
         buttons_add_included_directory.connect_clicked(move |_| {
-            let chooser = gtk::FileChooserDialog::with_buttons(
-                Some("Folders to include"),
-                Some(&window_main),
-                gtk::FileChooserAction::SelectFolder,
-                &[("Ok", gtk::ResponseType::Ok), ("Close", gtk::ResponseType::Cancel)],
-            );
-            chooser.set_select_multiple(true);
-            chooser.show_all();
-            let response_type = chooser.run();
-            if response_type == gtk::ResponseType::Ok {
-                let folder = chooser.filenames();
-
-                let list_store = get_list_store(&tree_view_included_directories);
-
-                for file_entry in &folder {
-                    let values: [(u32, &dyn ToValue); 1] = [(0, &file_entry.to_string_lossy().to_string())];
-                    list_store.set(&list_store.append(), &values);
-                }
-            }
-            chooser.close();
+            add_chosen_directories(&window_main, &tree_view_included_directories, false);
         });
     }
     // Add excluded directory
@@ -117,26 +41,7 @@
         let window_main = gui_data.window_main.clone();
         let buttons_add_excluded_directory = gui_data.upper_notebook.buttons_add_excluded_directory.clone();
         buttons_add_excluded_directory.connect_clicked(move |_| {
-            let chooser = gtk::FileChooserDialog::with_buttons(
-                Some("Folders to exclude"),
-                Some(&window_main),
-                gtk::FileChooserAction::SelectFolder,
-                &[("Ok", gtk::ResponseType::Ok), ("Close", gtk::ResponseType::Cancel)],
-            );
-            chooser.set_select_multiple(true);
-            chooser.show_all();
-            let response_type = chooser.run();
-            if response_type == gtk::ResponseType::Ok {
-                let folder = chooser.filenames();
-
-                let list_store = get_list_store(&tree_view_excluded_directories);
-
-                for file_entry in &folder {
-                    let values: [(u32, &dyn ToValue); 1] = [(0, &file_entry.to_string_lossy().to_string())];
-                    list_store.set(&list_store.append(), &values);
-                }
-            }
-            chooser.close();
+            add_chosen_directories(&window_main, &tree_view_excluded_directories, true);
         });
     }
     // Remove Excluded Folder
@@ -170,3 +75,59 @@
         });
     }
 }
+
+fn add_chosen_directories(window_main: &Window, tree_view: &TreeView, excluded_items: bool) {
+    let folders_to = if excluded_items { "Folders to exclude" } else { "Folders to include" };
+
+    let chooser = gtk::FileChooserDialog::builder().title(folders_to).action(gtk::FileChooserAction::SelectFolder).transient_for(window_main).build();
+    chooser.add_button("Ok", ResponseType::Ok);
+    chooser.add_button("Close", ResponseType::Cancel);
+
+    chooser.set_select_multiple(true);
+    chooser.show_all();
+
+    let tree_view = tree_view.clone();
+    chooser.connect_response(move |chooser, response_type| {
+        if response_type == gtk::ResponseType::Ok {
+            let folder = chooser.filenames();
+
+            let list_store = get_list_store(&tree_view);
+
+            for file_entry in &folder {
+                let values: [(u32, &dyn ToValue); 1] = [(ColumnsDirectory::Path as u32, &file_entry.to_string_lossy().to_string())];
+                list_store.set(&list_store.append(), &values);
+            }
+        }
+        chooser.close();
+    });
+}
+
+fn add_manually_directories(window_main: &Window, tree_view: &TreeView) {
+    let dialog = gtk::Dialog::builder().title("Add directory manually").transient_for(window_main).build();
+    dialog.add_button("Ok", ResponseType::Ok);
+    dialog.add_button("Close", ResponseType::Cancel);
+
+    let entry: gtk::Entry = gtk::Entry::new();
+
+    get_dialog_box_child(&dialog).add(&entry);
+
+    dialog.show_all();
+
+    let tree_view = tree_view.clone();
+    dialog.connect_response(move |dialog, response_type| {
+        if response_type == gtk::ResponseType::Ok {
+            let text = entry.text().to_string().trim().to_string();
+
+            #[cfg(target_family = "windows")]
+            let text = Common::normalize_windows_path(text).to_string_lossy().to_string();
+
+            if !text.is_empty() {
+                let list_store = get_list_store(&tree_view);
+
+                let values: [(u32, &dyn ToValue); 1] = [(ColumnsDirectory::Path as u32, &text)];
+                list_store.set(&list_store.append(), &values);
+            }
+        }
+        dialog.close();
+    });
+}
diff -Naur orig/czkawka_gui/src/connect_settings.rs patched/czkawka_gui/src/connect_settings.rs
--- orig/czkawka_gui/src/connect_settings.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_settings.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,54 +1,205 @@
+use czkawka_core::common_messages::Messages;
+use czkawka_core::duplicate::HashType;
+use directories_next::ProjectDirs;
+use gtk::prelude::*;
+use gtk::{LabelBuilder, ResponseType, Window};
+use image::imageops::FilterType;
+use img_hash::HashAlg;
+use std::collections::BTreeMap;
+use std::default::Default;
+
 use crate::gui_data::GuiData;
+use crate::help_functions::get_dialog_box_child;
 use crate::saving_loading::{load_configuration, reset_configuration, save_configuration};
-use gtk::prelude::*;
-use gtk::WindowPosition;
 
 pub fn connect_settings(gui_data: &GuiData) {
     // Connect button settings
     {
         let button_settings = gui_data.header.button_settings.clone();
-        let window_main = gui_data.window_main.clone();
         let window_settings = gui_data.settings.window_settings.clone();
         button_settings.connect_clicked(move |_| {
-            window_main.set_sensitive(false);
             window_settings.show();
-            window_settings.set_position(WindowPosition::Center);
         });
 
-        let window_main = gui_data.window_main.clone();
         let window_settings = gui_data.settings.window_settings.clone();
 
-        window_settings.hide_on_delete();
-
-        window_settings.connect_delete_event(move |window, _y| {
+        window_settings.connect_delete_event(move |window, _| {
             window.hide();
-            window_main.set_sensitive(true);
             gtk::Inhibit(true)
         });
     }
 
     // Connect save configuration button
     {
-        let gui_data = gui_data.clone();
+        let upper_notebook = gui_data.upper_notebook.clone();
+        let settings = gui_data.settings.clone();
+        let text_view_errors = gui_data.text_view_errors.clone();
         let button_settings_save_configuration = gui_data.settings.button_settings_save_configuration.clone();
         button_settings_save_configuration.connect_clicked(move |_| {
-            save_configuration(&gui_data, true);
+            save_configuration(true, &upper_notebook, &settings, &text_view_errors);
         });
     }
     // Connect load configuration button
     {
-        let gui_data = gui_data.clone();
+        let upper_notebook = gui_data.upper_notebook.clone();
+        let settings = gui_data.settings.clone();
+        let text_view_errors = gui_data.text_view_errors.clone();
         let button_settings_load_configuration = gui_data.settings.button_settings_load_configuration.clone();
+        let scrolled_window_errors = gui_data.scrolled_window_errors.clone();
         button_settings_load_configuration.connect_clicked(move |_| {
-            load_configuration(&gui_data, true);
+            load_configuration(true, &upper_notebook, &settings, &text_view_errors, &scrolled_window_errors);
         });
     }
     // Connect reset configuration button
     {
-        let gui_data = gui_data.clone();
+        let upper_notebook = gui_data.upper_notebook.clone();
+        let settings = gui_data.settings.clone();
+        let text_view_errors = gui_data.text_view_errors.clone();
         let button_settings_reset_configuration = gui_data.settings.button_settings_reset_configuration.clone();
         button_settings_reset_configuration.connect_clicked(move |_| {
-            reset_configuration(&gui_data, true);
+            reset_configuration(true, &upper_notebook, &settings, &text_view_errors);
+        });
+    }
+    // Connect button for opening cache
+    {
+        let button_settings_open_cache_folder = gui_data.settings.button_settings_open_cache_folder.clone();
+        button_settings_open_cache_folder.connect_clicked(move |_| {
+            if let Some(proj_dirs) = ProjectDirs::from("pl", "Qarmin", "Czkawka") {
+                let cache_dir = proj_dirs.cache_dir();
+                open::that_in_background(cache_dir);
+            }
         });
     }
+    // Connect button for opening settings
+    {
+        let button_settings_open_settings_folder = gui_data.settings.button_settings_open_settings_folder.clone();
+        button_settings_open_settings_folder.connect_clicked(move |_| {
+            if let Some(proj_dirs) = ProjectDirs::from("pl", "Qarmin", "Czkawka") {
+                let config_dir = proj_dirs.config_dir();
+                open::that_in_background(config_dir);
+            }
+        });
+    }
+    // Connect clear cache methods
+    {
+        {
+            let button_settings_duplicates_clear_cache = gui_data.settings.button_settings_duplicates_clear_cache.clone();
+            let settings_window = gui_data.settings.window_settings.clone();
+            let text_view_errors = gui_data.text_view_errors.clone();
+            let entry_settings_cache_file_minimal_size = gui_data.settings.entry_settings_cache_file_minimal_size.clone();
+
+            button_settings_duplicates_clear_cache.connect_clicked(move |_| {
+                let dialog = create_clear_cache_dialog("duplicates", &settings_window);
+                dialog.show_all();
+
+                let text_view_errors = text_view_errors.clone();
+                let entry_settings_cache_file_minimal_size = entry_settings_cache_file_minimal_size.clone();
+
+                dialog.connect_response(move |dialog, response_type| {
+                    if response_type == ResponseType::Ok {
+                        let mut messages: Messages = Messages::new();
+                        for use_prehash in [true, false] {
+                            for type_of_hash in [HashType::Xxh3, HashType::Blake3, HashType::Crc32].iter() {
+                                if let Some(cache_entries) = czkawka_core::duplicate::load_hashes_from_file(&mut messages, true, type_of_hash, use_prehash) {
+                                    let mut hashmap_to_save: BTreeMap<String, czkawka_core::duplicate::FileEntry> = Default::default();
+                                    for (_, vec_file_entry) in cache_entries {
+                                        for file_entry in vec_file_entry {
+                                            hashmap_to_save.insert(file_entry.path.to_string_lossy().to_string(), file_entry);
+                                        }
+                                    }
+                                    czkawka_core::duplicate::save_hashes_to_file(
+                                        &hashmap_to_save,
+                                        &mut messages,
+                                        type_of_hash,
+                                        use_prehash,
+                                        entry_settings_cache_file_minimal_size.text().as_str().parse::<u64>().unwrap_or(2 * 1024 * 1024),
+                                    )
+                                }
+                            }
+
+                            messages.messages.push("Properly cleared cache".to_string());
+                            text_view_errors.buffer().unwrap().set_text(messages.create_messages_text().as_str());
+                        }
+                    }
+                    dialog.close();
+                });
+            });
+        }
+        {
+            let button_settings_similar_images_clear_cache = gui_data.settings.button_settings_similar_images_clear_cache.clone();
+            let settings_window = gui_data.settings.window_settings.clone();
+            let text_view_errors = gui_data.text_view_errors.clone();
+
+            button_settings_similar_images_clear_cache.connect_clicked(move |_| {
+                let dialog = create_clear_cache_dialog("similar images", &settings_window);
+                dialog.show_all();
+
+                let text_view_errors = text_view_errors.clone();
+
+                dialog.connect_response(move |dialog, response_type| {
+                    if response_type == ResponseType::Ok {
+                        let mut messages: Messages = Messages::new();
+                        for hash_size in [8, 16, 32, 64].iter() {
+                            for image_filter in [FilterType::Lanczos3, FilterType::CatmullRom, FilterType::Gaussian, FilterType::Nearest, FilterType::Triangle].iter() {
+                                for hash_alg in [HashAlg::Blockhash, HashAlg::Gradient, HashAlg::DoubleGradient, HashAlg::VertGradient, HashAlg::Mean].iter() {
+                                    if let Some(cache_entries) = czkawka_core::similar_images::load_hashes_from_file(&mut messages, true, *hash_size, *hash_alg, *image_filter) {
+                                        czkawka_core::similar_images::save_hashes_to_file(&cache_entries, &mut messages, *hash_size, *hash_alg, *image_filter);
+                                    }
+                                }
+                            }
+                        }
+
+                        messages.messages.push("Properly cleared cache".to_string());
+                        text_view_errors.buffer().unwrap().set_text(messages.create_messages_text().as_str());
+                    }
+                    dialog.close();
+                });
+            });
+        }
+        {
+            let button_settings_similar_videos_clear_cache = gui_data.settings.button_settings_similar_videos_clear_cache.clone();
+            let settings_window = gui_data.settings.window_settings.clone();
+            let text_view_errors = gui_data.text_view_errors.clone();
+
+            button_settings_similar_videos_clear_cache.connect_clicked(move |_| {
+                let dialog = create_clear_cache_dialog("similar videos", &settings_window);
+                dialog.show_all();
+
+                let text_view_errors = text_view_errors.clone();
+
+                dialog.connect_response(move |dialog, response_type| {
+                    if response_type == ResponseType::Ok {
+                        let mut messages: Messages = Messages::new();
+                        if let Some(cache_entries) = czkawka_core::similar_videos::load_hashes_from_file(&mut messages, true) {
+                            czkawka_core::similar_videos::save_hashes_to_file(&cache_entries, &mut messages);
+                        }
+
+                        messages.messages.push("Properly cleared cache".to_string());
+                        text_view_errors.buffer().unwrap().set_text(messages.create_messages_text().as_str());
+                    }
+                    dialog.close();
+                });
+            });
+        }
+    }
+}
+
+fn create_clear_cache_dialog(title_str: &str, window_settings: &Window) -> gtk::Dialog {
+    let dialog = gtk::Dialog::builder().title(format!("Clearing {} cache", title_str).as_str()).transient_for(window_settings).build();
+    dialog.add_button("OK", ResponseType::Ok);
+    dialog.add_button("Cancel", ResponseType::Cancel);
+
+    let label = LabelBuilder::new().label(format!("Do you want to clear {} cache from outdated entries?", title_str).as_str()).build();
+    let label2 = LabelBuilder::new().label("This operation will remove all cache entries which points to invalid files.").build();
+    let label3 = LabelBuilder::new().label("This may speedup a little loading/saving to cache.").build();
+    let label4 = LabelBuilder::new()
+        .label("WARNING: Operation will remove all cached data from unplugged external drives, so hash will need to be generated again.")
+        .build();
+
+    let internal_box = get_dialog_box_child(&dialog);
+    internal_box.add(&label);
+    internal_box.add(&label2);
+    internal_box.add(&label3);
+    internal_box.add(&label4);
+    dialog
 }
diff -Naur orig/czkawka_gui/src/connect_similar_image_size_change.rs patched/czkawka_gui/src/connect_similar_image_size_change.rs
--- orig/czkawka_gui/src/connect_similar_image_size_change.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/connect_similar_image_size_change.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,31 +1,48 @@
-use crate::gui_data::GuiData;
-use czkawka_core::similar_images::SIMILAR_VALUES;
 use gtk::prelude::*;
 
+use czkawka_core::similar_images::SIMILAR_VALUES;
+
+use crate::gui_data::GuiData;
+
 pub fn connect_similar_image_size_change(gui_data: &GuiData) {
-    // This should set values to max possible value like in return_similarity_from_similarity_preset and get_string_from_similarity
     {
-        let radio_button_similar_hash_size_4 = gui_data.main_notebook.radio_button_similar_hash_size_4.clone();
-        let scale_similarity = gui_data.main_notebook.scale_similarity.clone();
-        radio_button_similar_hash_size_4.connect_clicked(move |_| {
-            scale_similarity.set_range(0_f64, SIMILAR_VALUES[0][5] as f64);
-            scale_similarity.set_fill_level(SIMILAR_VALUES[0][5] as f64);
+        let radio_button_similar_hash_size_8 = gui_data.main_notebook.radio_button_similar_hash_size_8.clone();
+        let label_similar_images_minimal_similarity = gui_data.main_notebook.label_similar_images_minimal_similarity.clone();
+        let scale_similarity_similar_images = gui_data.main_notebook.scale_similarity_similar_images.clone();
+        radio_button_similar_hash_size_8.connect_toggled(move |_| {
+            scale_similarity_similar_images.set_range(0_f64, SIMILAR_VALUES[0][5] as f64);
+            scale_similarity_similar_images.set_fill_level(SIMILAR_VALUES[0][5] as f64);
+            label_similar_images_minimal_similarity.set_text(" Minimal ");
         });
     }
     {
-        let radio_button_similar_hash_size_8 = gui_data.main_notebook.radio_button_similar_hash_size_8.clone();
-        let scale_similarity = gui_data.main_notebook.scale_similarity.clone();
-        radio_button_similar_hash_size_8.connect_clicked(move |_| {
-            scale_similarity.set_range(0_f64, SIMILAR_VALUES[1][5] as f64);
-            scale_similarity.set_fill_level(SIMILAR_VALUES[1][5] as f64);
+        let radio_button_similar_hash_size_16 = gui_data.main_notebook.radio_button_similar_hash_size_16.clone();
+        let label_similar_images_minimal_similarity = gui_data.main_notebook.label_similar_images_minimal_similarity.clone();
+        let scale_similarity_similar_images = gui_data.main_notebook.scale_similarity_similar_images.clone();
+        radio_button_similar_hash_size_16.connect_toggled(move |_| {
+            scale_similarity_similar_images.set_range(0_f64, SIMILAR_VALUES[1][5] as f64);
+            scale_similarity_similar_images.set_fill_level(SIMILAR_VALUES[1][5] as f64);
+            label_similar_images_minimal_similarity.set_text(" Very Small ");
         });
     }
     {
-        let radio_button_similar_hash_size_16 = gui_data.main_notebook.radio_button_similar_hash_size_16.clone();
-        let scale_similarity = gui_data.main_notebook.scale_similarity.clone();
-        radio_button_similar_hash_size_16.connect_clicked(move |_| {
-            scale_similarity.set_range(0_f64, SIMILAR_VALUES[2][5] as f64);
-            scale_similarity.set_fill_level(SIMILAR_VALUES[2][5] as f64);
+        let radio_button_similar_hash_size_32 = gui_data.main_notebook.radio_button_similar_hash_size_32.clone();
+        let label_similar_images_minimal_similarity = gui_data.main_notebook.label_similar_images_minimal_similarity.clone();
+        let scale_similarity_similar_images = gui_data.main_notebook.scale_similarity_similar_images.clone();
+        radio_button_similar_hash_size_32.connect_toggled(move |_| {
+            scale_similarity_similar_images.set_range(0_f64, SIMILAR_VALUES[2][5] as f64);
+            scale_similarity_similar_images.set_fill_level(SIMILAR_VALUES[2][5] as f64);
+            label_similar_images_minimal_similarity.set_text(" Small ");
+        });
+    }
+    {
+        let radio_button_similar_hash_size_64 = gui_data.main_notebook.radio_button_similar_hash_size_64.clone();
+        let label_similar_images_minimal_similarity = gui_data.main_notebook.label_similar_images_minimal_similarity.clone();
+        let scale_similarity_similar_images = gui_data.main_notebook.scale_similarity_similar_images.clone();
+        radio_button_similar_hash_size_64.connect_toggled(move |_| {
+            scale_similarity_similar_images.set_range(0_f64, SIMILAR_VALUES[3][5] as f64);
+            scale_similarity_similar_images.set_fill_level(SIMILAR_VALUES[3][5] as f64);
+            label_similar_images_minimal_similarity.set_text(" Medium ");
         });
     }
 }
diff -Naur orig/czkawka_gui/src/create_tree_view.rs patched/czkawka_gui/src/create_tree_view.rs
--- orig/czkawka_gui/src/create_tree_view.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/create_tree_view.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,7 +1,8 @@
-use crate::help_functions::*;
 use gtk::prelude::*;
 use gtk::TreeViewColumn;
 
+use crate::help_functions::*;
+
 pub fn create_tree_view_duplicates(tree_view: &mut gtk::TreeView) {
     let model = get_list_store(tree_view);
 
@@ -9,18 +10,18 @@
     renderer.connect_toggled(move |_r, path| {
         let iter = model.iter(&path).unwrap();
         let mut fixed = model
-            .value(&iter, ColumnsDuplicates::ActiveSelectButton as i32)
+            .value(&iter, ColumnsDuplicates::SelectionButton as i32)
             .get::<bool>()
-            .unwrap_or_else(|err| panic!("ListStore value missing at path {}: {}", path, err));
+            .unwrap_or_else(|err| panic!("ListStore value missing at path {:?}: {}", path, err));
         fixed = !fixed;
-        model.set_value(&iter, ColumnsDuplicates::ActiveSelectButton as u32, &fixed.to_value());
+        model.set_value(&iter, ColumnsDuplicates::SelectionButton as u32, &fixed.to_value());
     });
     let column = gtk::TreeViewColumn::new();
     column.pack_start(&renderer, true);
     column.set_resizable(false);
     column.set_fixed_width(30);
     column.add_attribute(&renderer, "activatable", ColumnsDuplicates::ActivatableSelectButton as i32);
-    column.add_attribute(&renderer, "active", ColumnsDuplicates::ActiveSelectButton as i32);
+    column.add_attribute(&renderer, "active", ColumnsDuplicates::SelectionButton as i32);
     column.add_attribute(&renderer, "cell-background", ColumnsDuplicates::Color as i32);
     tree_view.append_column(&column);
 
@@ -67,17 +68,17 @@
     renderer.connect_toggled(move |_r, path| {
         let iter = model.iter(&path).unwrap();
         let mut fixed = model
-            .value(&iter, ColumnsEmptyFolders::ActiveSelectButton as i32)
+            .value(&iter, ColumnsEmptyFolders::SelectionButton as i32)
             .get::<bool>()
-            .unwrap_or_else(|err| panic!("ListStore value missing at path {}: {}", path, err));
+            .unwrap_or_else(|err| panic!("ListStore value missing at path {:?}: {}", path, err));
         fixed = !fixed;
-        model.set_value(&iter, ColumnsEmptyFolders::ActiveSelectButton as u32, &fixed.to_value());
+        model.set_value(&iter, ColumnsEmptyFolders::SelectionButton as u32, &fixed.to_value());
     });
     let column = gtk::TreeViewColumn::new();
     column.pack_start(&renderer, true);
     column.set_resizable(false);
     column.set_fixed_width(30);
-    column.add_attribute(&renderer, "active", ColumnsEmptyFolders::ActiveSelectButton as i32);
+    column.add_attribute(&renderer, "active", ColumnsEmptyFolders::SelectionButton as i32);
     tree_view.append_column(&column);
 
     let renderer = gtk::CellRendererText::new();
@@ -117,17 +118,17 @@
     renderer.connect_toggled(move |_r, path| {
         let iter = model.iter(&path).unwrap();
         let mut fixed = model
-            .value(&iter, ColumnsBigFiles::ActiveSelectButton as i32)
+            .value(&iter, ColumnsBigFiles::SelectionButton as i32)
             .get::<bool>()
-            .unwrap_or_else(|err| panic!("ListStore value missing at path {}: {}", path, err));
+            .unwrap_or_else(|err| panic!("ListStore value missing at path {:?}: {}", path, err));
         fixed = !fixed;
-        model.set_value(&iter, ColumnsBigFiles::ActiveSelectButton as u32, &fixed.to_value());
+        model.set_value(&iter, ColumnsBigFiles::SelectionButton as u32, &fixed.to_value());
     });
     let column = gtk::TreeViewColumn::new();
     column.pack_start(&renderer, true);
     column.set_resizable(false);
     column.set_fixed_width(30);
-    column.add_attribute(&renderer, "active", ColumnsBigFiles::ActiveSelectButton as i32);
+    column.add_attribute(&renderer, "active", ColumnsBigFiles::SelectionButton as i32);
     tree_view.append_column(&column);
 
     let renderer = gtk::CellRendererText::new();
@@ -176,17 +177,17 @@
     renderer.connect_toggled(move |_r, path| {
         let iter = model.iter(&path).unwrap();
         let mut fixed = model
-            .value(&iter, ColumnsTemporaryFiles::ActiveSelectButton as i32)
+            .value(&iter, ColumnsTemporaryFiles::SelectionButton as i32)
             .get::<bool>()
-            .unwrap_or_else(|err| panic!("ListStore value missing at path {}: {}", path, err));
+            .unwrap_or_else(|err| panic!("ListStore value missing at path {:?}: {}", path, err));
         fixed = !fixed;
-        model.set_value(&iter, ColumnsTemporaryFiles::ActiveSelectButton as u32, &fixed.to_value());
+        model.set_value(&iter, ColumnsTemporaryFiles::SelectionButton as u32, &fixed.to_value());
     });
     let column = gtk::TreeViewColumn::new();
     column.pack_start(&renderer, true);
     column.set_resizable(false);
     column.set_fixed_width(30);
-    column.add_attribute(&renderer, "active", ColumnsTemporaryFiles::ActiveSelectButton as i32);
+    column.add_attribute(&renderer, "active", ColumnsTemporaryFiles::SelectionButton as i32);
     tree_view.append_column(&column);
 
     let renderer = gtk::CellRendererText::new();
@@ -226,17 +227,17 @@
     renderer.connect_toggled(move |_r, path| {
         let iter = model.iter(&path).unwrap();
         let mut fixed = model
-            .value(&iter, ColumnsEmptyFiles::ActiveSelectButton as i32)
+            .value(&iter, ColumnsEmptyFiles::SelectionButton as i32)
             .get::<bool>()
-            .unwrap_or_else(|err| panic!("ListStore value missing at path {}: {}", path, err));
+            .unwrap_or_else(|err| panic!("ListStore value missing at path {:?}: {}", path, err));
         fixed = !fixed;
-        model.set_value(&iter, ColumnsEmptyFiles::ActiveSelectButton as u32, &fixed.to_value());
+        model.set_value(&iter, ColumnsEmptyFiles::SelectionButton as u32, &fixed.to_value());
     });
     let column = gtk::TreeViewColumn::new();
     column.pack_start(&renderer, true);
     column.set_resizable(false);
     column.set_fixed_width(30);
-    column.add_attribute(&renderer, "active", ColumnsEmptyFiles::ActiveSelectButton as i32);
+    column.add_attribute(&renderer, "active", ColumnsEmptyFiles::SelectionButton as i32);
     tree_view.append_column(&column);
 
     let renderer = gtk::CellRendererText::new();
@@ -276,18 +277,18 @@
     renderer.connect_toggled(move |_r, path| {
         let iter = model.iter(&path).unwrap();
         let mut fixed = model
-            .value(&iter, ColumnsSimilarImages::ActiveSelectButton as i32)
+            .value(&iter, ColumnsSimilarImages::SelectionButton as i32)
             .get::<bool>()
-            .unwrap_or_else(|err| panic!("ListStore value missing at path {}: {}", path, err));
+            .unwrap_or_else(|err| panic!("ListStore value missing at path {:?}: {}", path, err));
         fixed = !fixed;
-        model.set_value(&iter, ColumnsSimilarImages::ActiveSelectButton as u32, &fixed.to_value());
+        model.set_value(&iter, ColumnsSimilarImages::SelectionButton as u32, &fixed.to_value());
     });
     let column = gtk::TreeViewColumn::new();
     column.pack_start(&renderer, true);
     column.set_resizable(false);
     column.set_fixed_width(30);
     column.add_attribute(&renderer, "activatable", ColumnsSimilarImages::ActivatableSelectButton as i32);
-    column.add_attribute(&renderer, "active", ColumnsSimilarImages::ActiveSelectButton as i32);
+    column.add_attribute(&renderer, "active", ColumnsSimilarImages::SelectionButton as i32);
     column.add_attribute(&renderer, "cell-background", ColumnsSimilarImages::Color as i32);
     tree_view.append_column(&column);
 
@@ -360,34 +361,26 @@
     tree_view.set_vexpand(true);
 }
 
-pub fn create_tree_view_directories(tree_view: &mut gtk::TreeView) {
-    let renderer = gtk::CellRendererText::new();
-    let column: gtk::TreeViewColumn = TreeViewColumn::new();
-    column.pack_start(&renderer, true);
-    column.add_attribute(&renderer, "text", ColumnsDirectory::Path as i32);
-    tree_view.append_column(&column);
-
-    tree_view.set_headers_visible(false);
-}
-
-pub fn create_tree_view_zeroed_files(tree_view: &mut gtk::TreeView) {
+pub fn create_tree_view_similar_videos(tree_view: &mut gtk::TreeView) {
     let model = get_list_store(tree_view);
 
     let renderer = gtk::CellRendererToggle::new();
     renderer.connect_toggled(move |_r, path| {
         let iter = model.iter(&path).unwrap();
         let mut fixed = model
-            .value(&iter, ColumnsZeroedFiles::ActiveSelectButton as i32)
+            .value(&iter, ColumnsSimilarVideos::SelectionButton as i32)
             .get::<bool>()
-            .unwrap_or_else(|err| panic!("ListStore value missing at path {}: {}", path, err));
+            .unwrap_or_else(|err| panic!("ListStore value missing at path {:?}: {}", path, err));
         fixed = !fixed;
-        model.set_value(&iter, ColumnsZeroedFiles::ActiveSelectButton as u32, &fixed.to_value());
+        model.set_value(&iter, ColumnsSimilarVideos::SelectionButton as u32, &fixed.to_value());
     });
     let column = gtk::TreeViewColumn::new();
     column.pack_start(&renderer, true);
     column.set_resizable(false);
     column.set_fixed_width(30);
-    column.add_attribute(&renderer, "active", ColumnsZeroedFiles::ActiveSelectButton as i32);
+    column.add_attribute(&renderer, "activatable", ColumnsSimilarVideos::ActivatableSelectButton as i32);
+    column.add_attribute(&renderer, "active", ColumnsSimilarVideos::SelectionButton as i32);
+    column.add_attribute(&renderer, "cell-background", ColumnsSimilarVideos::Color as i32);
     tree_view.append_column(&column);
 
     let renderer = gtk::CellRendererText::new();
@@ -396,7 +389,9 @@
     column.set_title("Size");
     column.set_resizable(true);
     column.set_min_width(50);
-    column.add_attribute(&renderer, "text", ColumnsZeroedFiles::Size as i32);
+    column.add_attribute(&renderer, "text", ColumnsSimilarVideos::Size as i32);
+    column.add_attribute(&renderer, "background", ColumnsSimilarVideos::Color as i32);
+    column.add_attribute(&renderer, "foreground", ColumnsSimilarVideos::TextColor as i32);
     tree_view.append_column(&column);
 
     let renderer = gtk::CellRendererText::new();
@@ -405,7 +400,9 @@
     column.set_title("File Name");
     column.set_resizable(true);
     column.set_min_width(50);
-    column.add_attribute(&renderer, "text", ColumnsZeroedFiles::Name as i32);
+    column.add_attribute(&renderer, "text", ColumnsSimilarVideos::Name as i32);
+    column.add_attribute(&renderer, "background", ColumnsSimilarVideos::Color as i32);
+    column.add_attribute(&renderer, "foreground", ColumnsSimilarVideos::TextColor as i32);
     tree_view.append_column(&column);
 
     let renderer = gtk::CellRendererText::new();
@@ -414,7 +411,9 @@
     column.set_title("Path");
     column.set_resizable(true);
     column.set_min_width(50);
-    column.add_attribute(&renderer, "text", ColumnsZeroedFiles::Path as i32);
+    column.add_attribute(&renderer, "text", ColumnsSimilarVideos::Path as i32);
+    column.add_attribute(&renderer, "background", ColumnsSimilarVideos::Color as i32);
+    column.add_attribute(&renderer, "foreground", ColumnsSimilarVideos::TextColor as i32);
     tree_view.append_column(&column);
 
     let renderer = gtk::CellRendererText::new();
@@ -423,12 +422,24 @@
     column.set_title("Modification Date");
     column.set_resizable(true);
     column.set_min_width(50);
-    column.add_attribute(&renderer, "text", ColumnsZeroedFiles::Modification as i32);
+    column.add_attribute(&renderer, "text", ColumnsSimilarVideos::Modification as i32);
+    column.add_attribute(&renderer, "background", ColumnsSimilarVideos::Color as i32);
+    column.add_attribute(&renderer, "foreground", ColumnsSimilarVideos::TextColor as i32);
     tree_view.append_column(&column);
 
     tree_view.set_vexpand(true);
 }
 
+pub fn create_tree_view_directories(tree_view: &mut gtk::TreeView) {
+    let renderer = gtk::CellRendererText::new();
+    let column: gtk::TreeViewColumn = TreeViewColumn::new();
+    column.pack_start(&renderer, true);
+    column.add_attribute(&renderer, "text", ColumnsDirectory::Path as i32);
+    tree_view.append_column(&column);
+
+    tree_view.set_headers_visible(false);
+}
+
 pub fn create_tree_view_same_music(tree_view: &mut gtk::TreeView) {
     let model = get_list_store(tree_view);
 
@@ -436,18 +447,18 @@
     renderer.connect_toggled(move |_r, path| {
         let iter = model.iter(&path).unwrap();
         let mut fixed = model
-            .value(&iter, ColumnsSameMusic::ActiveSelectButton as i32)
+            .value(&iter, ColumnsSameMusic::SelectionButton as i32)
             .get::<bool>()
-            .unwrap_or_else(|err| panic!("ListStore value missing at path {}: {}", path, err));
+            .unwrap_or_else(|err| panic!("ListStore value missing at path {:?}: {}", path, err));
         fixed = !fixed;
-        model.set_value(&iter, ColumnsSameMusic::ActiveSelectButton as u32, &fixed.to_value());
+        model.set_value(&iter, ColumnsSameMusic::SelectionButton as u32, &fixed.to_value());
     });
     let column = gtk::TreeViewColumn::new();
     column.pack_start(&renderer, true);
     column.set_resizable(false);
     column.set_fixed_width(30);
     column.add_attribute(&renderer, "activatable", ColumnsSameMusic::ActivatableSelectButton as i32);
-    column.add_attribute(&renderer, "active", ColumnsSameMusic::ActiveSelectButton as i32);
+    column.add_attribute(&renderer, "active", ColumnsSameMusic::SelectionButton as i32);
     column.add_attribute(&renderer, "cell-background", ColumnsSameMusic::Color as i32);
     tree_view.append_column(&column);
 
@@ -509,10 +520,10 @@
     let renderer = gtk::CellRendererText::new();
     let column: gtk::TreeViewColumn = TreeViewColumn::new();
     column.pack_start(&renderer, true);
-    column.set_title("Album Title");
+    column.set_title("Year");
     column.set_resizable(true);
     column.set_min_width(50);
-    column.add_attribute(&renderer, "text", ColumnsSameMusic::AlbumTitle as i32);
+    column.add_attribute(&renderer, "text", ColumnsSameMusic::Year as i32);
     column.add_attribute(&renderer, "background", ColumnsSameMusic::Color as i32);
     column.add_attribute(&renderer, "foreground", ColumnsSameMusic::TextColor as i32);
     tree_view.append_column(&column);
@@ -520,10 +531,10 @@
     let renderer = gtk::CellRendererText::new();
     let column: gtk::TreeViewColumn = TreeViewColumn::new();
     column.pack_start(&renderer, true);
-    column.set_title("Album Artist");
+    column.set_title("Album Title");
     column.set_resizable(true);
     column.set_min_width(50);
-    column.add_attribute(&renderer, "text", ColumnsSameMusic::AlbumArtist as i32);
+    column.add_attribute(&renderer, "text", ColumnsSameMusic::AlbumTitle as i32);
     column.add_attribute(&renderer, "background", ColumnsSameMusic::Color as i32);
     column.add_attribute(&renderer, "foreground", ColumnsSameMusic::TextColor as i32);
     tree_view.append_column(&column);
@@ -531,10 +542,10 @@
     let renderer = gtk::CellRendererText::new();
     let column: gtk::TreeViewColumn = TreeViewColumn::new();
     column.pack_start(&renderer, true);
-    column.set_title("Year");
+    column.set_title("Album Artist");
     column.set_resizable(true);
     column.set_min_width(50);
-    column.add_attribute(&renderer, "text", ColumnsSameMusic::Year as i32);
+    column.add_attribute(&renderer, "text", ColumnsSameMusic::AlbumArtist as i32);
     column.add_attribute(&renderer, "background", ColumnsSameMusic::Color as i32);
     column.add_attribute(&renderer, "foreground", ColumnsSameMusic::TextColor as i32);
     tree_view.append_column(&column);
@@ -560,17 +571,17 @@
     renderer.connect_toggled(move |_r, path| {
         let iter = model.iter(&path).unwrap();
         let mut fixed = model
-            .value(&iter, ColumnsInvalidSymlinks::ActiveSelectButton as i32)
+            .value(&iter, ColumnsInvalidSymlinks::SelectionButton as i32)
             .get::<bool>()
-            .unwrap_or_else(|err| panic!("ListStore value missing at path {}: {}", path, err));
+            .unwrap_or_else(|err| panic!("ListStore value missing at path {:?}: {}", path, err));
         fixed = !fixed;
-        model.set_value(&iter, ColumnsInvalidSymlinks::ActiveSelectButton as u32, &fixed.to_value());
+        model.set_value(&iter, ColumnsInvalidSymlinks::SelectionButton as u32, &fixed.to_value());
     });
     let column = gtk::TreeViewColumn::new();
     column.pack_start(&renderer, true);
     column.set_resizable(false);
     column.set_fixed_width(30);
-    column.add_attribute(&renderer, "active", ColumnsInvalidSymlinks::ActiveSelectButton as i32);
+    column.add_attribute(&renderer, "active", ColumnsInvalidSymlinks::SelectionButton as i32);
     tree_view.append_column(&column);
 
     let renderer = gtk::CellRendererText::new();
@@ -628,17 +639,17 @@
     renderer.connect_toggled(move |_r, path| {
         let iter = model.iter(&path).unwrap();
         let mut fixed = model
-            .value(&iter, ColumnsBrokenFiles::ActiveSelectButton as i32)
+            .value(&iter, ColumnsBrokenFiles::SelectionButton as i32)
             .get::<bool>()
-            .unwrap_or_else(|err| panic!("ListStore value missing at path {}: {}", path, err));
+            .unwrap_or_else(|err| panic!("ListStore value missing at path {:?}: {}", path, err));
         fixed = !fixed;
-        model.set_value(&iter, ColumnsBrokenFiles::ActiveSelectButton as u32, &fixed.to_value());
+        model.set_value(&iter, ColumnsBrokenFiles::SelectionButton as u32, &fixed.to_value());
     });
     let column = gtk::TreeViewColumn::new();
     column.pack_start(&renderer, true);
     column.set_resizable(false);
     column.set_fixed_width(30);
-    column.add_attribute(&renderer, "active", ColumnsBrokenFiles::ActiveSelectButton as i32);
+    column.add_attribute(&renderer, "active", ColumnsBrokenFiles::SelectionButton as i32);
     tree_view.append_column(&column);
 
     let renderer = gtk::CellRendererText::new();
diff -Naur orig/czkawka_gui/src/double_click_opening.rs patched/czkawka_gui/src/double_click_opening.rs
--- orig/czkawka_gui/src/double_click_opening.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/double_click_opening.rs	1970-01-01 01:00:00.000000000 +0100
@@ -1,186 +0,0 @@
-use crate::help_functions::*;
-use gtk::prelude::*;
-
-const KEY_ENTER: u16 = 36;
-const KEY_SPACE: u16 = 65;
-
-// TODO add option to open files and folders from context menu activated by pressing ONCE with right mouse button
-
-pub fn opening_double_click_function_duplicates(tree_view: &gtk::TreeView, event: &gdk::EventButton) -> gtk::Inhibit {
-    if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 1 {
-        common_open_function(tree_view, ColumnsDuplicates::Name as i32, ColumnsDuplicates::Path as i32, OpenMode::PathAndName);
-    } else if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 3 {
-        common_open_function(tree_view, ColumnsDuplicates::Name as i32, ColumnsDuplicates::Path as i32, OpenMode::OnlyPath);
-    }
-    gtk::Inhibit(false)
-}
-pub fn opening_enter_function_duplicates(tree_view: &gtk::TreeView, event: &gdk::EventKey) -> gtk::Inhibit {
-    handle_tree_keypress(tree_view, event, ColumnsDuplicates::Name as u32, ColumnsDuplicates::Path as u32, ColumnsDuplicates::ActiveSelectButton as u32)
-}
-
-pub fn opening_double_click_function_empty_folders(tree_view: &gtk::TreeView, event: &gdk::EventButton) -> gtk::Inhibit {
-    if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 1 {
-        common_open_function(tree_view, ColumnsEmptyFolders::Name as i32, ColumnsEmptyFolders::Path as i32, OpenMode::PathAndName);
-    } else if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 3 {
-        common_open_function(tree_view, ColumnsEmptyFolders::Name as i32, ColumnsEmptyFolders::Path as i32, OpenMode::OnlyPath);
-    }
-    gtk::Inhibit(false)
-}
-pub fn opening_enter_function_empty_folders(tree_view: &gtk::TreeView, event: &gdk::EventKey) -> gtk::Inhibit {
-    handle_tree_keypress(tree_view, event, ColumnsEmptyFolders::Name as u32, ColumnsEmptyFolders::Path as u32, ColumnsEmptyFolders::ActiveSelectButton as u32)
-}
-
-pub fn opening_double_click_function_empty_files(tree_view: &gtk::TreeView, event: &gdk::EventButton) -> gtk::Inhibit {
-    if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 1 {
-        common_open_function(tree_view, ColumnsEmptyFiles::Name as i32, ColumnsEmptyFiles::Path as i32, OpenMode::PathAndName);
-    } else if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 3 {
-        common_open_function(tree_view, ColumnsEmptyFiles::Name as i32, ColumnsEmptyFiles::Path as i32, OpenMode::OnlyPath);
-    }
-    gtk::Inhibit(false)
-}
-pub fn opening_enter_function_empty_files(tree_view: &gtk::TreeView, event: &gdk::EventKey) -> gtk::Inhibit {
-    handle_tree_keypress(tree_view, event, ColumnsEmptyFiles::Name as u32, ColumnsEmptyFiles::Path as u32, ColumnsEmptyFiles::ActiveSelectButton as u32)
-}
-
-pub fn opening_double_click_function_temporary_files(tree_view: &gtk::TreeView, event: &gdk::EventButton) -> gtk::Inhibit {
-    if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 1 {
-        common_open_function(tree_view, ColumnsTemporaryFiles::Name as i32, ColumnsTemporaryFiles::Path as i32, OpenMode::PathAndName);
-    } else if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 3 {
-        common_open_function(tree_view, ColumnsTemporaryFiles::Name as i32, ColumnsTemporaryFiles::Path as i32, OpenMode::OnlyPath);
-    }
-    gtk::Inhibit(false)
-}
-pub fn opening_enter_function_temporary_files(tree_view: &gtk::TreeView, event: &gdk::EventKey) -> gtk::Inhibit {
-    handle_tree_keypress(tree_view, event, ColumnsTemporaryFiles::Name as u32, ColumnsTemporaryFiles::Path as u32, ColumnsTemporaryFiles::ActiveSelectButton as u32)
-}
-
-pub fn opening_double_click_function_big_files(tree_view: &gtk::TreeView, event: &gdk::EventButton) -> gtk::Inhibit {
-    if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 1 {
-        common_open_function(tree_view, ColumnsBigFiles::Name as i32, ColumnsBigFiles::Path as i32, OpenMode::PathAndName);
-    } else if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 3 {
-        common_open_function(tree_view, ColumnsBigFiles::Name as i32, ColumnsBigFiles::Path as i32, OpenMode::OnlyPath);
-    }
-    gtk::Inhibit(false)
-}
-pub fn opening_enter_function_big_files(tree_view: &gtk::TreeView, event: &gdk::EventKey) -> gtk::Inhibit {
-    handle_tree_keypress(tree_view, event, ColumnsBigFiles::Name as u32, ColumnsBigFiles::Path as u32, ColumnsBigFiles::ActiveSelectButton as u32)
-}
-
-pub fn opening_double_click_function_zeroed_files(tree_view: &gtk::TreeView, event: &gdk::EventButton) -> gtk::Inhibit {
-    if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 1 {
-        common_open_function(tree_view, ColumnsZeroedFiles::Name as i32, ColumnsZeroedFiles::Path as i32, OpenMode::PathAndName);
-    } else if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 3 {
-        common_open_function(tree_view, ColumnsZeroedFiles::Name as i32, ColumnsZeroedFiles::Path as i32, OpenMode::OnlyPath);
-    }
-    gtk::Inhibit(false)
-}
-pub fn opening_enter_function_zeroed_files(tree_view: &gtk::TreeView, event: &gdk::EventKey) -> gtk::Inhibit {
-    handle_tree_keypress(tree_view, event, ColumnsZeroedFiles::Name as u32, ColumnsZeroedFiles::Path as u32, ColumnsZeroedFiles::ActiveSelectButton as u32)
-}
-
-pub fn opening_double_click_function_same_music(tree_view: &gtk::TreeView, event: &gdk::EventButton) -> gtk::Inhibit {
-    if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 1 {
-        common_open_function(tree_view, ColumnsSameMusic::Name as i32, ColumnsSameMusic::Path as i32, OpenMode::PathAndName);
-    } else if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 3 {
-        common_open_function(tree_view, ColumnsSameMusic::Name as i32, ColumnsSameMusic::Path as i32, OpenMode::OnlyPath);
-    }
-    gtk::Inhibit(false)
-}
-pub fn opening_enter_function_same_music(tree_view: &gtk::TreeView, event: &gdk::EventKey) -> gtk::Inhibit {
-    handle_tree_keypress(tree_view, event, ColumnsSameMusic::Name as u32, ColumnsSameMusic::Path as u32, ColumnsSameMusic::ActiveSelectButton as u32)
-}
-
-pub fn opening_double_click_function_similar_images(tree_view: &gtk::TreeView, event: &gdk::EventButton) -> gtk::Inhibit {
-    if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 1 {
-        common_open_function(tree_view, ColumnsSimilarImages::Name as i32, ColumnsSimilarImages::Path as i32, OpenMode::PathAndName);
-    } else if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 3 {
-        common_open_function(tree_view, ColumnsSimilarImages::Name as i32, ColumnsSimilarImages::Path as i32, OpenMode::OnlyPath);
-    }
-    gtk::Inhibit(false)
-}
-
-pub fn opening_enter_function_similar_images(tree_view: &gtk::TreeView, event: &gdk::EventKey) -> gtk::Inhibit {
-    handle_tree_keypress(tree_view, event, ColumnsSimilarImages::Name as u32, ColumnsSimilarImages::Path as u32, ColumnsSimilarImages::ActiveSelectButton as u32)
-}
-
-pub fn opening_double_click_function_invalid_symlinks(tree_view: &gtk::TreeView, event: &gdk::EventButton) -> gtk::Inhibit {
-    if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 1 {
-        common_open_function(tree_view, ColumnsInvalidSymlinks::Name as i32, ColumnsInvalidSymlinks::Path as i32, OpenMode::PathAndName);
-    } else if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 3 {
-        common_open_function(tree_view, ColumnsInvalidSymlinks::Name as i32, ColumnsInvalidSymlinks::Path as i32, OpenMode::OnlyPath);
-    }
-    gtk::Inhibit(false)
-}
-pub fn opening_enter_function_invalid_symlinks(tree_view: &gtk::TreeView, event: &gdk::EventKey) -> gtk::Inhibit {
-    handle_tree_keypress(tree_view, event, ColumnsInvalidSymlinks::Name as u32, ColumnsInvalidSymlinks::Path as u32, ColumnsInvalidSymlinks::ActiveSelectButton as u32)
-}
-
-pub fn opening_double_click_function_broken_files(tree_view: &gtk::TreeView, event: &gdk::EventButton) -> gtk::Inhibit {
-    if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 1 {
-        common_open_function(tree_view, ColumnsBrokenFiles::Name as i32, ColumnsBrokenFiles::Path as i32, OpenMode::PathAndName);
-    } else if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 3 {
-        common_open_function(tree_view, ColumnsBrokenFiles::Name as i32, ColumnsBrokenFiles::Path as i32, OpenMode::OnlyPath);
-    }
-    gtk::Inhibit(false)
-}
-pub fn opening_enter_function_broken_files(tree_view: &gtk::TreeView, event: &gdk::EventKey) -> gtk::Inhibit {
-    handle_tree_keypress(tree_view, event, ColumnsBrokenFiles::Name as u32, ColumnsBrokenFiles::Path as u32, ColumnsBrokenFiles::ActiveSelectButton as u32)
-}
-
-enum OpenMode {
-    OnlyPath,
-    PathAndName,
-}
-
-fn common_mark_function(tree_view: &gtk::TreeView, column_name: u32) {
-    let selection = tree_view.selection();
-    let (selection_rows, tree_model) = selection.selected_rows();
-
-    let model = get_list_store(tree_view);
-
-    for tree_path in selection_rows.iter().rev() {
-        let value = !tree_model.value(&tree_model.iter(tree_path).unwrap(), column_name as i32).get::<bool>().unwrap();
-        model.set_value(&tree_model.iter(tree_path).unwrap(), column_name, &value.to_value());
-    }
-}
-
-fn common_open_function(tree_view: &gtk::TreeView, column_name: i32, column_path: i32, opening_mode: OpenMode) {
-    let selection = tree_view.selection();
-    let (selection_rows, tree_model) = selection.selected_rows();
-
-    for tree_path in selection_rows.iter().rev() {
-        let end_path;
-        let name = tree_model.value(&tree_model.iter(tree_path).unwrap(), column_name).get::<String>().unwrap();
-        let path = tree_model.value(&tree_model.iter(tree_path).unwrap(), column_path).get::<String>().unwrap();
-
-        match opening_mode {
-            OpenMode::OnlyPath => {
-                end_path = path;
-            }
-            OpenMode::PathAndName => {
-                end_path = format!("{}/{}", path, name);
-            }
-        }
-
-        open::that_in_background(&end_path);
-
-        // if let Err(e) = open::that(&end_path) {
-        //     println!("Failed to open {} - Error {}", end_path, e);
-        // }
-    }
-}
-
-fn handle_tree_keypress(tree_view: &gtk::TreeView, event: &gdk::EventKey, name_column: u32, path_column: u32, mark_column: u32) -> gtk::Inhibit {
-    match event.keycode() {
-        Some(KEY_ENTER) => {
-            // Enter
-            common_open_function(tree_view, name_column as i32, path_column as i32, OpenMode::PathAndName);
-        }
-        Some(KEY_SPACE) => {
-            // Space
-            common_mark_function(tree_view, mark_column);
-        }
-        _ => {}
-    }
-    gtk::Inhibit(false)
-}
diff -Naur orig/czkawka_gui/src/gui_about.rs patched/czkawka_gui/src/gui_about.rs
--- orig/czkawka_gui/src/gui_about.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/gui_about.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,5 +1,5 @@
 use gtk::prelude::*;
-use gtk::{Builder, WindowPosition};
+use gtk::{Builder, Window};
 
 #[derive(Clone)]
 pub struct GuiAbout {
@@ -11,16 +11,20 @@
 }
 
 impl GuiAbout {
-    pub fn create_from_builder() -> Self {
+    pub fn create_from_builder(window_main: &Window) -> Self {
         let glade_src = include_str!("../ui/about_dialog.glade").to_string();
         let builder = Builder::from_string(glade_src.as_str());
 
         let about_dialog: gtk::AboutDialog = builder.object("about_dialog").unwrap();
-        about_dialog.set_position(WindowPosition::Center);
+        about_dialog.set_modal(true);
+        about_dialog.set_transient_for(Some(window_main));
 
         let button_repository: gtk::Button = builder.object("button_repository").unwrap();
+        button_repository.set_tooltip_text(Some("Link to repository page with source code."));
         let button_donation: gtk::Button = builder.object("button_donation").unwrap();
+        button_donation.set_tooltip_text(Some("Link to donation page."));
         let button_instruction: gtk::Button = builder.object("button_instruction").unwrap();
+        button_instruction.set_tooltip_text(Some("Link to instruction page."));
 
         Self {
             about_dialog,
diff -Naur orig/czkawka_gui/src/gui_bottom_buttons.rs patched/czkawka_gui/src/gui_bottom_buttons.rs
--- orig/czkawka_gui/src/gui_bottom_buttons.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/gui_bottom_buttons.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,10 +1,10 @@
 use gtk::prelude::*;
-use gtk::Button;
+use gtk::Widget;
 
 #[derive(Clone)]
 pub struct GuiBottomButtons {
     pub buttons_search: gtk::Button,
-    pub buttons_select: gtk::Button,
+    pub buttons_select: gtk::MenuButton,
     pub buttons_delete: gtk::Button,
     pub buttons_save: gtk::Button,
     pub buttons_symlink: gtk::Button,
@@ -12,20 +12,33 @@
     pub buttons_move: gtk::Button,
     pub buttons_show_errors: gtk::Button,
     pub buttons_names: [String; 7],
-    pub buttons_array: [Button; 7],
+    pub buttons_array: [Widget; 7],
 }
 
 impl GuiBottomButtons {
-    pub fn create_from_builder(builder: &gtk::Builder) -> Self {
+    pub fn create_from_builder(builder: &gtk::Builder, popover_select: &gtk::Popover) -> Self {
         let buttons_search: gtk::Button = builder.object("buttons_search").unwrap();
-        let buttons_select: gtk::Button = builder.object("buttons_select").unwrap();
+        let buttons_select: gtk::MenuButton = builder.object("buttons_select").unwrap();
         let buttons_delete: gtk::Button = builder.object("buttons_delete").unwrap();
         let buttons_save: gtk::Button = builder.object("buttons_save").unwrap();
         let buttons_symlink: gtk::Button = builder.object("buttons_symlink").unwrap();
         let buttons_hardlink: gtk::Button = builder.object("buttons_hardlink").unwrap();
         let buttons_move: gtk::Button = builder.object("buttons_move").unwrap();
 
+        buttons_search.set_tooltip_text(Some("Start to search for files/folders"));
+        buttons_select.set_tooltip_text(Some("Selects records\nOnly selected files/folders can be later processed."));
+        buttons_delete.set_tooltip_text(Some("Delete selected files/folders"));
+        buttons_save.set_tooltip_text(Some("Save data about search to file"));
+        buttons_symlink.set_tooltip_text(Some(
+            "Creates symbolic links\nOnly works when at least 2 results in group are selected\nFirst is unchanged and second and later are symlinked to first",
+        ));
+        buttons_hardlink.set_tooltip_text(Some("Creates hardlinks\nOnly works when at least 2 results in group are selected\nFirst is unchanged and second and later are hardlinked to first"));
+        buttons_move.set_tooltip_text(Some(
+            "Moves files to chosen folder\nIt copy all files to folder without preserving directory tree\nWhen trying to move 2 files with identical name to folder, second will fail and show error",
+        ));
+
         let buttons_show_errors: gtk::Button = builder.object("buttons_show_errors").unwrap();
+        buttons_show_errors.set_tooltip_text(Some("Show/Hide bottom error panel"));
 
         let buttons_names = [
             "search".to_string(),
@@ -36,15 +49,18 @@
             "hardlink".to_string(),
             "move".to_string(),
         ];
-        let buttons_array = [
-            buttons_search.clone(),
-            buttons_select.clone(),
-            buttons_delete.clone(),
-            buttons_save.clone(),
-            buttons_symlink.clone(),
-            buttons_hardlink.clone(),
-            buttons_move.clone(),
+        let buttons_array: [Widget; 7] = [
+            buttons_search.clone().upcast::<Widget>(),
+            buttons_select.clone().upcast::<Widget>(),
+            buttons_delete.clone().upcast::<Widget>(),
+            buttons_save.clone().upcast::<Widget>(),
+            buttons_symlink.clone().upcast::<Widget>(),
+            buttons_hardlink.clone().upcast::<Widget>(),
+            buttons_move.clone().upcast::<Widget>(),
         ];
+
+        buttons_select.set_popover(Some(popover_select));
+
         Self {
             buttons_search,
             buttons_select,
diff -Naur orig/czkawka_gui/src/gui_data.rs patched/czkawka_gui/src/gui_data.rs
--- orig/czkawka_gui/src/gui_data.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/gui_data.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,14 +1,11 @@
-use crate::gui_about::GuiAbout;
-use crate::gui_bottom_buttons::GuiBottomButtons;
-use crate::gui_header::GuiHeader;
-use crate::gui_main_notebook::GuiMainNotebook;
-use crate::gui_popovers::GuiPopovers;
-use crate::gui_progress_dialog::GuiProgressDialog;
-use crate::gui_settings::GuiSettings;
-use crate::gui_upper_notepad::GuiUpperNotebook;
-use crate::notebook_enums::*;
-use crate::taskbar_progress::TaskbarProgress;
+use std::cell::RefCell;
+use std::collections::HashMap;
+use std::rc::Rc;
+
 use crossbeam_channel::unbounded;
+use gtk::prelude::*;
+use gtk::Builder;
+
 use czkawka_core::big_file::BigFile;
 use czkawka_core::broken_files::BrokenFiles;
 use czkawka_core::duplicate::DuplicateFinder;
@@ -17,13 +14,19 @@
 use czkawka_core::invalid_symlinks::InvalidSymlinks;
 use czkawka_core::same_music::SameMusic;
 use czkawka_core::similar_images::SimilarImages;
+use czkawka_core::similar_videos::SimilarVideos;
 use czkawka_core::temporary::Temporary;
-use czkawka_core::zeroed::ZeroedFiles;
-use gtk::prelude::*;
-use gtk::{Builder, WindowPosition};
-use std::cell::RefCell;
-use std::collections::HashMap;
-use std::rc::Rc;
+
+use crate::gui_about::GuiAbout;
+use crate::gui_bottom_buttons::GuiBottomButtons;
+use crate::gui_header::GuiHeader;
+use crate::gui_main_notebook::GuiMainNotebook;
+use crate::gui_popovers::GuiPopovers;
+use crate::gui_progress_dialog::GuiProgressDialog;
+use crate::gui_settings::GuiSettings;
+use crate::gui_upper_notepad::GuiUpperNotebook;
+use crate::notebook_enums::*;
+use crate::taskbar_progress::TaskbarProgress;
 
 #[derive(Clone)]
 pub struct GuiData {
@@ -59,11 +62,13 @@
     pub shared_temporary_files_state: Rc<RefCell<Temporary>>,
     pub shared_big_files_state: Rc<RefCell<BigFile>>,
     pub shared_similar_images_state: Rc<RefCell<SimilarImages>>,
-    pub shared_zeroed_files_state: Rc<RefCell<ZeroedFiles>>,
+    pub shared_similar_videos_state: Rc<RefCell<SimilarVideos>>,
     pub shared_same_music_state: Rc<RefCell<SameMusic>>,
     pub shared_same_invalid_symlinks: Rc<RefCell<InvalidSymlinks>>,
     pub shared_broken_files_state: Rc<RefCell<BrokenFiles>>,
 
+    pub preview_path: Rc<RefCell<String>>,
+
     //// Entry
     pub entry_info: gtk::Entry,
 
@@ -77,7 +82,7 @@
 }
 
 impl GuiData {
-    pub fn new() -> Self {
+    pub fn new_with_application(application: &gtk::Application) -> Self {
         //// Loading glade file content and build with it help UI
         let glade_src = include_str!("../ui/main_window.glade").to_string();
         let builder = Builder::from_string(glade_src.as_str());
@@ -86,16 +91,16 @@
         let window_main: gtk::Window = builder.object("window_main").unwrap();
         window_main.show_all();
         window_main.set_title("Czkawka");
-        window_main.set_position(WindowPosition::Center);
+        window_main.set_application(Some(application));
 
         let main_notebook = GuiMainNotebook::create_from_builder(&builder);
         let upper_notebook = GuiUpperNotebook::create_from_builder(&builder);
         let popovers = GuiPopovers::create_from_builder();
-        let bottom_buttons = GuiBottomButtons::create_from_builder(&builder);
-        let progress_window = GuiProgressDialog::create_from_builder();
-        let about = GuiAbout::create_from_builder();
+        let bottom_buttons = GuiBottomButtons::create_from_builder(&builder, &popovers.popover_select);
+        let progress_window = GuiProgressDialog::create_from_builder(&window_main);
+        let about = GuiAbout::create_from_builder(&window_main);
         let header = GuiHeader::create_from_builder(&builder);
-        let settings = GuiSettings::create_from_builder();
+        let settings = GuiSettings::create_from_builder(&window_main);
 
         ////////////////////////////////////////////////////////////////////////////////////////////////
 
@@ -139,11 +144,13 @@
         let shared_temporary_files_state: Rc<RefCell<_>> = Rc::new(RefCell::new(Temporary::new()));
         let shared_big_files_state: Rc<RefCell<_>> = Rc::new(RefCell::new(BigFile::new()));
         let shared_similar_images_state: Rc<RefCell<_>> = Rc::new(RefCell::new(SimilarImages::new()));
-        let shared_zeroed_files_state: Rc<RefCell<_>> = Rc::new(RefCell::new(ZeroedFiles::new()));
+        let shared_similar_videos_state: Rc<RefCell<_>> = Rc::new(RefCell::new(SimilarVideos::new()));
         let shared_same_music_state: Rc<RefCell<_>> = Rc::new(RefCell::new(SameMusic::new()));
         let shared_same_invalid_symlinks: Rc<RefCell<_>> = Rc::new(RefCell::new(InvalidSymlinks::new()));
         let shared_broken_files_state: Rc<RefCell<_>> = Rc::new(RefCell::new(BrokenFiles::new()));
 
+        let preview_path: Rc<RefCell<_>> = Rc::new(RefCell::new("".to_string()));
+
         //// Entry
         let entry_info: gtk::Entry = builder.object("entry_info").unwrap();
 
@@ -176,10 +183,11 @@
             shared_temporary_files_state,
             shared_big_files_state,
             shared_similar_images_state,
-            shared_zeroed_files_state,
+            shared_similar_videos_state,
             shared_same_music_state,
             shared_same_invalid_symlinks,
             shared_broken_files_state,
+            preview_path,
             entry_info,
             text_view_errors,
             scrolled_window_errors,
diff -Naur orig/czkawka_gui/src/gui_header.rs patched/czkawka_gui/src/gui_header.rs
--- orig/czkawka_gui/src/gui_header.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/gui_header.rs	2021-12-04 17:07:36.882961295 +0100
@@ -10,6 +10,10 @@
     pub fn create_from_builder(builder: &gtk::Builder) -> Self {
         let button_settings: gtk::Button = builder.object("button_settings").unwrap();
         let button_app_info: gtk::Button = builder.object("button_app_info").unwrap();
+
+        button_settings.set_tooltip_text(Some("Opens settings dialog"));
+        button_app_info.set_tooltip_text(Some("Opens dialog with info about app"));
+
         Self { button_settings, button_app_info }
     }
 }
diff -Naur orig/czkawka_gui/src/gui_main_notebook.rs patched/czkawka_gui/src/gui_main_notebook.rs
--- orig/czkawka_gui/src/gui_main_notebook.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/gui_main_notebook.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,5 +1,7 @@
 use gtk::prelude::*;
-use gtk::TreeView;
+use gtk::{EventControllerKey, TreeView};
+
+use crate::notebook_enums::NUMBER_OF_NOTEBOOK_MAIN_TABS;
 
 #[derive(Clone)]
 pub struct GuiMainNotebook {
@@ -11,7 +13,7 @@
     pub scrolled_window_temporary_files_finder: gtk::ScrolledWindow,
     pub scrolled_window_big_files_finder: gtk::ScrolledWindow,
     pub scrolled_window_similar_images_finder: gtk::ScrolledWindow,
-    pub scrolled_window_zeroed_files_finder: gtk::ScrolledWindow,
+    pub scrolled_window_similar_videos_finder: gtk::ScrolledWindow,
     pub scrolled_window_same_music_finder: gtk::ScrolledWindow,
     pub scrolled_window_invalid_symlinks: gtk::ScrolledWindow,
     pub scrolled_window_broken_files: gtk::ScrolledWindow,
@@ -22,13 +24,26 @@
     pub tree_view_temporary_files_finder: gtk::TreeView,
     pub tree_view_big_files_finder: gtk::TreeView,
     pub tree_view_similar_images_finder: gtk::TreeView,
-    pub tree_view_zeroed_files_finder: gtk::TreeView,
+    pub tree_view_similar_videos_finder: gtk::TreeView,
     pub tree_view_same_music_finder: gtk::TreeView,
     pub tree_view_invalid_symlinks: gtk::TreeView,
     pub tree_view_broken_files: gtk::TreeView,
 
+    pub evk_tree_view_duplicate_finder: gtk::EventControllerKey, // TODO, in GTK4 this can be changed to e.g. add_controller which is not 100% compatible with this  - https://discourse.gnome.org/t/how-to-convert-code-to-use-eventcontrollerkey/8198/2
+    pub evk_tree_view_empty_folder_finder: gtk::EventControllerKey,
+    pub evk_tree_view_empty_files_finder: gtk::EventControllerKey,
+    pub evk_tree_view_temporary_files_finder: gtk::EventControllerKey,
+    pub evk_tree_view_big_files_finder: gtk::EventControllerKey,
+    pub evk_tree_view_similar_images_finder: gtk::EventControllerKey,
+    pub evk_tree_view_similar_videos_finder: gtk::EventControllerKey,
+    pub evk_tree_view_same_music_finder: gtk::EventControllerKey,
+    pub evk_tree_view_invalid_symlinks: gtk::EventControllerKey,
+    pub evk_tree_view_broken_files: gtk::EventControllerKey,
+
     pub entry_similar_images_minimal_size: gtk::Entry,
     pub entry_similar_images_maximal_size: gtk::Entry,
+    pub entry_similar_videos_minimal_size: gtk::Entry,
+    pub entry_similar_videos_maximal_size: gtk::Entry,
     pub entry_duplicate_minimal_size: gtk::Entry,
     pub entry_duplicate_maximal_size: gtk::Entry,
     pub entry_same_music_minimal_size: gtk::Entry,
@@ -42,15 +57,16 @@
     pub check_button_music_album_title: gtk::CheckButton,
     pub check_button_music_album_artist: gtk::CheckButton,
     pub check_button_music_year: gtk::CheckButton,
+    pub check_button_music_approximate_comparison: gtk::CheckButton,
 
     //// Radio Buttons
     // Duplicates
     pub radio_button_duplicates_name: gtk::RadioButton,
     pub radio_button_duplicates_size: gtk::RadioButton,
-    pub radio_button_duplicates_hashmb: gtk::RadioButton,
     pub radio_button_duplicates_hash: gtk::RadioButton,
 
-    pub scale_similarity: gtk::Scale,
+    pub scale_similarity_similar_images: gtk::Scale,
+    pub scale_similarity_similar_videos: gtk::Scale,
 
     pub radio_button_hash_type_blake3: gtk::RadioButton,
     pub radio_button_hash_type_crc32: gtk::RadioButton,
@@ -68,9 +84,12 @@
     pub radio_button_similar_hash_algorithm_vertgradient: gtk::RadioButton,
     pub radio_button_similar_hash_algorithm_doublegradient: gtk::RadioButton,
 
-    pub radio_button_similar_hash_size_4: gtk::RadioButton,
     pub radio_button_similar_hash_size_8: gtk::RadioButton,
     pub radio_button_similar_hash_size_16: gtk::RadioButton,
+    pub radio_button_similar_hash_size_32: gtk::RadioButton,
+    pub radio_button_similar_hash_size_64: gtk::RadioButton,
+
+    pub label_similar_images_minimal_similarity: gtk::Label,
 
     pub image_preview_similar_images: gtk::Image,
     pub image_preview_duplicates: gtk::Image,
@@ -86,24 +105,60 @@
         let scrolled_window_temporary_files_finder: gtk::ScrolledWindow = builder.object("scrolled_window_temporary_files_finder").unwrap();
         let scrolled_window_big_files_finder: gtk::ScrolledWindow = builder.object("scrolled_window_big_files_finder").unwrap();
         let scrolled_window_similar_images_finder: gtk::ScrolledWindow = builder.object("scrolled_window_similar_images_finder").unwrap();
-        let scrolled_window_zeroed_files_finder: gtk::ScrolledWindow = builder.object("scrolled_window_zeroed_files_finder").unwrap();
+        let scrolled_window_similar_videos_finder: gtk::ScrolledWindow = builder.object("scrolled_window_similar_videos_finder").unwrap();
         let scrolled_window_same_music_finder: gtk::ScrolledWindow = builder.object("scrolled_window_same_music_finder").unwrap();
         let scrolled_window_invalid_symlinks: gtk::ScrolledWindow = builder.object("scrolled_window_invalid_symlinks").unwrap();
         let scrolled_window_broken_files: gtk::ScrolledWindow = builder.object("scrolled_window_broken_files").unwrap();
 
         let tree_view_duplicate_finder: gtk::TreeView = TreeView::new();
+        tree_view_duplicate_finder.set_widget_name("PIERD");
         let tree_view_empty_folder_finder: gtk::TreeView = TreeView::new();
         let tree_view_empty_files_finder: gtk::TreeView = TreeView::new();
         let tree_view_temporary_files_finder: gtk::TreeView = TreeView::new();
         let tree_view_big_files_finder: gtk::TreeView = TreeView::new();
         let tree_view_similar_images_finder: gtk::TreeView = TreeView::new();
-        let tree_view_zeroed_files_finder: gtk::TreeView = TreeView::new();
+        let tree_view_similar_videos_finder: gtk::TreeView = TreeView::new();
         let tree_view_same_music_finder: gtk::TreeView = TreeView::new();
         let tree_view_invalid_symlinks: gtk::TreeView = TreeView::new();
         let tree_view_broken_files: gtk::TreeView = TreeView::new();
 
+        let evk_tree_view_duplicate_finder: gtk::EventControllerKey = EventControllerKey::new(&tree_view_duplicate_finder);
+        let evk_tree_view_empty_folder_finder: gtk::EventControllerKey = EventControllerKey::new(&tree_view_empty_folder_finder);
+        let evk_tree_view_empty_files_finder: gtk::EventControllerKey = EventControllerKey::new(&tree_view_empty_files_finder);
+        let evk_tree_view_temporary_files_finder: gtk::EventControllerKey = EventControllerKey::new(&tree_view_temporary_files_finder);
+        let evk_tree_view_big_files_finder: gtk::EventControllerKey = EventControllerKey::new(&tree_view_big_files_finder);
+        let evk_tree_view_similar_images_finder: gtk::EventControllerKey = EventControllerKey::new(&tree_view_similar_images_finder);
+        let evk_tree_view_similar_videos_finder: gtk::EventControllerKey = EventControllerKey::new(&tree_view_similar_videos_finder);
+        let evk_tree_view_same_music_finder: gtk::EventControllerKey = EventControllerKey::new(&tree_view_same_music_finder);
+        let evk_tree_view_invalid_symlinks: gtk::EventControllerKey = EventControllerKey::new(&tree_view_invalid_symlinks);
+        let evk_tree_view_broken_files: gtk::EventControllerKey = EventControllerKey::new(&tree_view_broken_files);
+
+        // TODO GTK 4
+        // let evk_tree_view_duplicate_finder: gtk4::EventControllerKey = EventControllerKey::new();
+        // tree_view_duplicate_finder.add_controller(&evk_tree_view_duplicate_finder);
+        // let evk_tree_view_empty_folder_finder: gtk4::EventControllerKey = EventControllerKey::new();
+        // tree_view_empty_folder_finder.add_controller(&evk_tree_view_empty_folder_finder);
+        // let evk_tree_view_empty_files_finder: gtk4::EventControllerKey = EventControllerKey::new();
+        // tree_view_empty_files_finder.add_controller(&evk_tree_view_empty_files_finder);
+        // let evk_tree_view_temporary_files_finder: gtk4::EventControllerKey = EventControllerKey::new();
+        // tree_view_temporary_files_finder.add_controller(&evk_tree_view_temporary_files_finder);
+        // let evk_tree_view_big_files_finder: gtk4::EventControllerKey = EventControllerKey::new();
+        // tree_view_big_files_finder.add_controller(&evk_tree_view_big_files_finder);
+        // let evk_tree_view_similar_images_finder: gtk4::EventControllerKey = EventControllerKey::new();
+        // tree_view_similar_images_finder.add_controller(&evk_tree_view_similar_images_finder);
+        // let evk_tree_view_similar_videos_finder: gtk4::EventControllerKey = EventControllerKey::new();
+        // tree_view_similar_videos_finder.add_controller(&evk_tree_view_similar_videos_finder);
+        // let evk_tree_view_same_music_finder: gtk4::EventControllerKey = EventControllerKey::new();
+        // tree_view_same_music_finder.add_controller(&evk_tree_view_same_music_finder);
+        // let evk_tree_view_invalid_symlinks: gtk4::EventControllerKey = EventControllerKey::new();
+        // tree_view_invalid_symlinks.add_controller(&evk_tree_view_invalid_symlinks);
+        // let evk_tree_view_broken_files: gtk4::EventControllerKey = EventControllerKey::new();
+        // tree_view_broken_files.add_controller(&evk_tree_view_broken_files);
+
         let entry_similar_images_minimal_size: gtk::Entry = builder.object("entry_similar_images_minimal_size").unwrap();
         let entry_similar_images_maximal_size: gtk::Entry = builder.object("entry_similar_images_maximal_size").unwrap();
+        let entry_similar_videos_minimal_size: gtk::Entry = builder.object("entry_similar_videos_minimal_size").unwrap();
+        let entry_similar_videos_maximal_size: gtk::Entry = builder.object("entry_similar_videos_maximal_size").unwrap();
         let entry_duplicate_minimal_size: gtk::Entry = builder.object("entry_duplicate_minimal_size").unwrap();
         let entry_duplicate_maximal_size: gtk::Entry = builder.object("entry_duplicate_maximal_size").unwrap();
         let entry_same_music_minimal_size: gtk::Entry = builder.object("entry_same_music_minimal_size").unwrap();
@@ -117,19 +172,30 @@
         let check_button_music_album_title: gtk::CheckButton = builder.object("check_button_music_album_title").unwrap();
         let check_button_music_album_artist: gtk::CheckButton = builder.object("check_button_music_album_artist").unwrap();
         let check_button_music_year: gtk::CheckButton = builder.object("check_button_music_year").unwrap();
+        let check_button_music_approximate_comparison: gtk::CheckButton = builder.object("check_button_music_approximate_comparison").unwrap();
 
         //// Radio Buttons
         let radio_button_duplicates_name: gtk::RadioButton = builder.object("radio_button_duplicates_name").unwrap();
         let radio_button_duplicates_size: gtk::RadioButton = builder.object("radio_button_duplicates_size").unwrap();
-        let radio_button_duplicates_hashmb: gtk::RadioButton = builder.object("radio_button_duplicates_hashmb").unwrap();
         let radio_button_duplicates_hash: gtk::RadioButton = builder.object("radio_button_duplicates_hash").unwrap();
 
-        let scale_similarity: gtk::Scale = builder.object("scale_similarity").unwrap();
+        radio_button_duplicates_name.set_tooltip_text(Some("Finds files which have same name.\n\nThis mode not checking what file contain inside, so be carefully when using it."));
+        radio_button_duplicates_size.set_tooltip_text(Some("Finds files which have same size.\n\nThis mode not checking what file contain inside, so be carefully when using it."));
+        radio_button_duplicates_hash.set_tooltip_text(Some(
+            "Finds files which have the same content.\n\nThis mode hashes file and later compare this hashes to find duplicates.\n\nTool heavily uses cache, so second and further scans of same data should be a lot of faster that first.",
+        ));
+
+        let scale_similarity_similar_images: gtk::Scale = builder.object("scale_similarity_similar_images").unwrap();
+        let scale_similarity_similar_videos: gtk::Scale = builder.object("scale_similarity_similar_videos").unwrap();
 
         let radio_button_hash_type_blake3: gtk::RadioButton = builder.object("radio_button_hash_type_blake3").unwrap();
         let radio_button_hash_type_crc32: gtk::RadioButton = builder.object("radio_button_hash_type_crc32").unwrap();
         let radio_button_hash_type_xxh3: gtk::RadioButton = builder.object("radio_button_hash_type_xxh3").unwrap();
 
+        radio_button_hash_type_blake3.set_tooltip_text(Some("Blake3 is cryptographic hash function. It is used as default hash algorithm, because it is very fast."));
+        radio_button_hash_type_crc32.set_tooltip_text(Some("CRC32 is simple hash function. It should be faster than Blake3, but probably may have very rarely some collisions."));
+        radio_button_hash_type_xxh3.set_tooltip_text(Some("XXH3 is very similar in case of performance and hash quality to Blake3, so such modes can be easily used ."));
+
         let radio_button_resize_algorithm_lanczos3: gtk::RadioButton = builder.object("radio_button_resize_algorithm_lanczos3").unwrap();
         let radio_button_resize_algorithm_nearest: gtk::RadioButton = builder.object("radio_button_resize_algorithm_nearest").unwrap();
         let radio_button_resize_algorithm_triangle: gtk::RadioButton = builder.object("radio_button_resize_algorithm_triangle").unwrap();
@@ -142,9 +208,17 @@
         let radio_button_similar_hash_algorithm_vertgradient: gtk::RadioButton = builder.object("radio_button_similar_hash_algorithm_vertgradient").unwrap();
         let radio_button_similar_hash_algorithm_doublegradient: gtk::RadioButton = builder.object("radio_button_similar_hash_algorithm_doublegradient").unwrap();
 
-        let radio_button_similar_hash_size_4: gtk::RadioButton = builder.object("radio_button_similar_hash_size_4").unwrap();
         let radio_button_similar_hash_size_8: gtk::RadioButton = builder.object("radio_button_similar_hash_size_8").unwrap();
         let radio_button_similar_hash_size_16: gtk::RadioButton = builder.object("radio_button_similar_hash_size_16").unwrap();
+        let radio_button_similar_hash_size_32: gtk::RadioButton = builder.object("radio_button_similar_hash_size_32").unwrap();
+        let radio_button_similar_hash_size_64: gtk::RadioButton = builder.object("radio_button_similar_hash_size_64").unwrap();
+
+        radio_button_similar_hash_size_8.set_tooltip_text(Some("Default hash size, with very high similarity it produce quite good results and don't save too much data too cache."));
+        radio_button_similar_hash_size_16.set_tooltip_text(Some("More precise than 8, so can be used to find very similar pictures, but create bigger cache entries."));
+        radio_button_similar_hash_size_32.set_tooltip_text(Some("Hash of this size provide very big similarity which is more than enough for most usages."));
+        radio_button_similar_hash_size_64.set_tooltip_text(Some("Paranoid mode, such tool create really big cache files and will catch almost same images."));
+
+        let label_similar_images_minimal_similarity: gtk::Label = builder.object("label_similar_images_minimal_similarity").unwrap();
 
         let image_preview_similar_images: gtk::Image = builder.object("image_preview_similar_images").unwrap();
         let image_preview_duplicates: gtk::Image = builder.object("image_preview_duplicates").unwrap();
@@ -157,7 +231,7 @@
             scrolled_window_temporary_files_finder,
             scrolled_window_big_files_finder,
             scrolled_window_similar_images_finder,
-            scrolled_window_zeroed_files_finder,
+            scrolled_window_similar_videos_finder,
             scrolled_window_same_music_finder,
             scrolled_window_invalid_symlinks,
             scrolled_window_broken_files,
@@ -167,12 +241,24 @@
             tree_view_temporary_files_finder,
             tree_view_big_files_finder,
             tree_view_similar_images_finder,
-            tree_view_zeroed_files_finder,
+            tree_view_similar_videos_finder,
             tree_view_same_music_finder,
             tree_view_invalid_symlinks,
             tree_view_broken_files,
+            evk_tree_view_duplicate_finder,
+            evk_tree_view_empty_folder_finder,
+            evk_tree_view_empty_files_finder,
+            evk_tree_view_temporary_files_finder,
+            evk_tree_view_big_files_finder,
+            evk_tree_view_similar_images_finder,
+            evk_tree_view_similar_videos_finder,
+            evk_tree_view_same_music_finder,
+            evk_tree_view_invalid_symlinks,
+            evk_tree_view_broken_files,
             entry_similar_images_minimal_size,
             entry_similar_images_maximal_size,
+            entry_similar_videos_minimal_size,
+            entry_similar_videos_maximal_size,
             entry_duplicate_minimal_size,
             entry_big_files_number,
             entry_same_music_minimal_size,
@@ -181,11 +267,12 @@
             check_button_music_album_title,
             check_button_music_album_artist,
             check_button_music_year,
+            check_button_music_approximate_comparison,
             radio_button_duplicates_name,
             radio_button_duplicates_size,
-            radio_button_duplicates_hashmb,
             radio_button_duplicates_hash,
-            scale_similarity,
+            scale_similarity_similar_images,
+            scale_similarity_similar_videos,
             radio_button_hash_type_blake3,
             radio_button_hash_type_crc32,
             radio_button_hash_type_xxh3,
@@ -199,13 +286,30 @@
             radio_button_similar_hash_algorithm_mean,
             radio_button_similar_hash_algorithm_vertgradient,
             radio_button_similar_hash_algorithm_doublegradient,
-            radio_button_similar_hash_size_4,
             radio_button_similar_hash_size_8,
             radio_button_similar_hash_size_16,
+            radio_button_similar_hash_size_32,
+            radio_button_similar_hash_size_64,
+            label_similar_images_minimal_similarity,
             image_preview_similar_images,
             entry_duplicate_maximal_size,
             entry_same_music_maximal_size,
             image_preview_duplicates,
         }
     }
+
+    pub fn get_main_tree_views(&self) -> [TreeView; NUMBER_OF_NOTEBOOK_MAIN_TABS] {
+        [
+            self.tree_view_duplicate_finder.clone(),
+            self.tree_view_empty_folder_finder.clone(),
+            self.tree_view_big_files_finder.clone(),
+            self.tree_view_empty_files_finder.clone(),
+            self.tree_view_temporary_files_finder.clone(),
+            self.tree_view_similar_images_finder.clone(),
+            self.tree_view_similar_videos_finder.clone(),
+            self.tree_view_same_music_finder.clone(),
+            self.tree_view_invalid_symlinks.clone(),
+            self.tree_view_broken_files.clone(),
+        ]
+    }
 }
diff -Naur orig/czkawka_gui/src/gui_popovers.rs patched/czkawka_gui/src/gui_popovers.rs
--- orig/czkawka_gui/src/gui_popovers.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/gui_popovers.rs	2021-12-04 17:07:36.882961295 +0100
@@ -51,7 +51,7 @@
 
         let popover_select: gtk::Popover = builder.object("popover_select").unwrap();
 
-        // Popover right click
+        // Popover right click(not implemented for now)
         let glade_src = include_str!("../ui/popover_right_click.glade").to_string();
         let builder = Builder::from_string(glade_src.as_str());
 
diff -Naur orig/czkawka_gui/src/gui_progress_dialog.rs patched/czkawka_gui/src/gui_progress_dialog.rs
--- orig/czkawka_gui/src/gui_progress_dialog.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/gui_progress_dialog.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,9 +1,9 @@
 use gtk::prelude::*;
-use gtk::Builder;
+use gtk::{Builder, EventControllerKey, Window};
 
 #[derive(Clone)]
 pub struct GuiProgressDialog {
-    pub window_progress: gtk::Window,
+    pub window_progress: gtk::Dialog,
 
     pub progress_bar_current_stage: gtk::ProgressBar,
     pub progress_bar_all_stages: gtk::ProgressBar,
@@ -13,14 +13,16 @@
     pub grid_progress_stages: gtk::Grid,
 
     pub button_stop_in_dialog: gtk::Button,
+    pub evk_button_stop_in_dialog: gtk::EventControllerKey,
 }
 
 impl GuiProgressDialog {
-    pub fn create_from_builder() -> Self {
+    pub fn create_from_builder(window_main: &Window) -> Self {
         let glade_src = include_str!("../ui/progress.glade").to_string();
         let builder = Builder::from_string(glade_src.as_str());
 
-        let window_progress: gtk::Window = builder.object("window_progress").unwrap();
+        let window_progress: gtk::Dialog = builder.object("window_progress").unwrap();
+        window_progress.set_transient_for(Some(window_main));
 
         let progress_bar_current_stage: gtk::ProgressBar = builder.object("progress_bar_current_stage").unwrap();
         let progress_bar_all_stages: gtk::ProgressBar = builder.object("progress_bar_all_stages").unwrap();
@@ -30,6 +32,7 @@
         let grid_progress_stages: gtk::Grid = builder.object("grid_progress_stages").unwrap();
 
         let button_stop_in_dialog: gtk::Button = builder.object("button_stop_in_dialog").unwrap();
+        let evk_button_stop_in_dialog = EventControllerKey::new(&button_stop_in_dialog);
 
         Self {
             window_progress,
@@ -38,6 +41,7 @@
             label_stage,
             grid_progress_stages,
             button_stop_in_dialog,
+            evk_button_stop_in_dialog,
         }
     }
 }
diff -Naur orig/czkawka_gui/src/gui_settings.rs patched/czkawka_gui/src/gui_settings.rs
--- orig/czkawka_gui/src/gui_settings.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/gui_settings.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,5 +1,5 @@
 use gtk::prelude::*;
-use gtk::{Builder, WindowPosition};
+use gtk::{Builder, Window};
 
 #[derive(Clone)]
 pub struct GuiSettings {
@@ -17,24 +17,38 @@
     // Duplicates
     pub check_button_settings_hide_hard_links: gtk::CheckButton,
     pub entry_settings_cache_file_minimal_size: gtk::Entry,
+    pub entry_settings_prehash_cache_file_minimal_size: gtk::Entry,
+    pub check_button_duplicates_use_prehash_cache: gtk::CheckButton,
     pub check_button_settings_show_preview_duplicates: gtk::CheckButton,
+    pub check_button_settings_duplicates_delete_outdated_cache: gtk::CheckButton,
+    pub button_settings_duplicates_clear_cache: gtk::Button,
 
     // Similar Images
     pub check_button_settings_show_preview_similar_images: gtk::CheckButton,
+    pub check_button_settings_similar_images_delete_outdated_cache: gtk::CheckButton,
+    pub button_settings_similar_images_clear_cache: gtk::Button,
+
+    // Similar Videos
+    pub check_button_settings_similar_videos_delete_outdated_cache: gtk::CheckButton,
+    pub button_settings_similar_videos_clear_cache: gtk::Button,
 
     // Buttons
     pub button_settings_save_configuration: gtk::Button,
     pub button_settings_load_configuration: gtk::Button,
     pub button_settings_reset_configuration: gtk::Button,
+
+    pub button_settings_open_cache_folder: gtk::Button,
+    pub button_settings_open_settings_folder: gtk::Button,
 }
 
 impl GuiSettings {
-    pub fn create_from_builder() -> Self {
+    pub fn create_from_builder(window_main: &Window) -> Self {
         let glade_src = include_str!("../ui/settings.glade").to_string();
         let builder = Builder::from_string(glade_src.as_str());
 
         let window_settings: gtk::Window = builder.object("window_settings").unwrap();
-        window_settings.set_position(WindowPosition::Center);
+        window_settings.set_modal(true);
+        window_settings.set_transient_for(Some(window_main));
 
         // General
         let check_button_settings_save_at_exit: gtk::CheckButton = builder.object("check_button_settings_save_at_exit").unwrap();
@@ -45,19 +59,69 @@
         let check_button_settings_use_cache: gtk::CheckButton = builder.object("check_button_settings_use_cache").unwrap();
         let check_button_settings_use_trash: gtk::CheckButton = builder.object("check_button_settings_use_trash").unwrap();
 
+        check_button_settings_save_at_exit.set_tooltip_text(Some("Saves configuration to file when closing app."));
+        check_button_settings_load_at_start.set_tooltip_text(Some("Loading at start configuration from file.\n\nNot selecting this option will load default settings."));
+        check_button_settings_confirm_deletion.set_tooltip_text(Some("Shows confirmation dialog when clicking at delete button."));
+        check_button_settings_confirm_group_deletion.set_tooltip_text(Some("Shows dialog when trying to remove all records from group."));
+        check_button_settings_show_text_view.set_tooltip_text(Some("Shows error panel at bottom."));
+        check_button_settings_use_cache.set_tooltip_text(Some("Option to which allows to not use cache feature."));
+        check_button_settings_use_trash.set_tooltip_text(Some("When enabled it moves files to trash instead deleting them permanently."));
+
         // Duplicates
         let check_button_settings_hide_hard_links: gtk::CheckButton = builder.object("check_button_settings_hide_hard_links").unwrap();
         let entry_settings_cache_file_minimal_size: gtk::Entry = builder.object("entry_settings_cache_file_minimal_size").unwrap();
         let check_button_settings_show_preview_duplicates: gtk::CheckButton = builder.object("check_button_settings_show_preview_duplicates").unwrap();
+        let check_button_settings_duplicates_delete_outdated_cache: gtk::CheckButton = builder.object("check_button_settings_duplicates_delete_outdated_cache").unwrap();
+        let button_settings_duplicates_clear_cache: gtk::Button = builder.object("button_settings_duplicates_clear_cache").unwrap();
+        let check_button_duplicates_use_prehash_cache: gtk::CheckButton = builder.object("check_button_duplicates_use_prehash_cache").unwrap();
+        let entry_settings_prehash_cache_file_minimal_size: gtk::Entry = builder.object("entry_settings_prehash_cache_file_minimal_size").unwrap();
+
+        check_button_settings_hide_hard_links.set_tooltip_text(Some(
+            "Hides all files except one, if are points to same data(are hardlinked).\n\nE.g. in case where on disk there is 7 files which are hardlinked to specific data and one different file with same data but different inode, then in duplicate finder will be visible only one unique file and one file from hardlinked ones.",
+        ));
+        entry_settings_cache_file_minimal_size.set_tooltip_text(Some(
+            "Allows to set minimal size of file, which will be cached.\n\nChoosing smaller value, will generate more records which will speedup search, but slowdown cache loading/saving.",
+        ));
+        check_button_settings_show_preview_duplicates.set_tooltip_text(Some("Shows preview at right side, when selecting image file."));
+        check_button_settings_duplicates_delete_outdated_cache.set_tooltip_text(Some("Allows to delete outdated cache results which points to non-existent files.\n\nWhen enabled, app make sure when loading records, that all points to valid files and ignore broken ones.\n\nDisabling this option, will help to scan files on external drives, so cache entries about them will not be purged in next scan.\n\nIn case of having hundred of thousands records in cache, it is suggested to enable this option, to speedup cache loading and saving at start and end of scan."));
+        button_settings_duplicates_clear_cache.set_tooltip_text(Some("Manually clear cache from outdated entries.\n\nShould be used only if automatic clearing was disabled."));
+        check_button_duplicates_use_prehash_cache.set_tooltip_text(Some(
+            "Enables caching of prehash(hash computed from small part of file) which allows to earlier throw out non duplicated results.\n\nIt is disabled by default because can cause in some situations slowdowns.\n\nIt is heavily recommended to use it when scanning hundred of thousands or million files, because it can speedup search multiple times.",
+        ));
 
         // Similar Images
         let check_button_settings_show_preview_similar_images: gtk::CheckButton = builder.object("check_button_settings_show_preview_similar_images").unwrap();
+        let check_button_settings_similar_images_delete_outdated_cache: gtk::CheckButton = builder.object("check_button_settings_similar_images_delete_outdated_cache").unwrap();
+        let button_settings_similar_images_clear_cache: gtk::Button = builder.object("button_settings_similar_images_clear_cache").unwrap();
+
+        check_button_settings_show_preview_similar_images.set_tooltip_text(Some("Shows preview at right side, when selecting image file."));
+        check_button_settings_similar_images_delete_outdated_cache.set_tooltip_text(Some("Allows to delete outdated cache results which points to non-existent files.\n\nWhen enabled, app make sure when loading records, that all points to valid files and ignore broken ones.\n\nDisabling this option, will help to scan files on external drives, so cache entries about them will not be purged in next scan.\n\nIn case of having hundred of thousands records in cache, it is suggested to enable this option, to speedup cache loading and saving at start and end of scan."));
+        button_settings_similar_images_clear_cache.set_tooltip_text(Some("Manually clear cache from outdated entries.\nShould be used only if automatic clearing was disabled."));
+
+        // Similar Videos
+        let check_button_settings_similar_videos_delete_outdated_cache: gtk::CheckButton = builder.object("check_button_settings_similar_videos_delete_outdated_cache").unwrap();
+        let button_settings_similar_videos_clear_cache: gtk::Button = builder.object("button_settings_similar_videos_clear_cache").unwrap();
+
+        check_button_settings_similar_videos_delete_outdated_cache.set_tooltip_text(Some("Allows to delete outdated cache results which points to non-existent files.\n\nWhen enabled, app make sure when loading records, that all points to valid files and ignore broken ones.\n\nDisabling this option, will help to scan files on external drives, so cache entries about them will not be purged in next scan.\n\nIn case of having hundred of thousands records in cache, it is suggested to enable this option, to speedup cache loading and saving at start and end of scan."));
+        button_settings_similar_videos_clear_cache.set_tooltip_text(Some("Manually clear cache from outdated entries.\nShould be used only if automatic clearing was disabled."));
 
         // Saving/Loading/Resetting configuration
         let button_settings_save_configuration: gtk::Button = builder.object("button_settings_save_configuration").unwrap();
         let button_settings_load_configuration: gtk::Button = builder.object("button_settings_load_configuration").unwrap();
         let button_settings_reset_configuration: gtk::Button = builder.object("button_settings_reset_configuration").unwrap();
 
+        button_settings_save_configuration.set_tooltip_text(Some("Save current settings configuration to file."));
+        button_settings_load_configuration.set_tooltip_text(Some("Load settings from file and replace current configuration with them."));
+        button_settings_reset_configuration.set_tooltip_text(Some("Reset current configuration to default one."));
+
+        let button_settings_open_cache_folder: gtk::Button = builder.object("button_settings_open_cache_folder").unwrap();
+        let button_settings_open_settings_folder: gtk::Button = builder.object("button_settings_open_settings_folder").unwrap();
+
+        button_settings_open_cache_folder.set_tooltip_text(Some(
+            "Opens folder where are stored txt files with cache.\n\nModifying them may cause to show invalid results but also modifying e.g. path may save time when moving big amount of files to different place.\n\nYou can copy this files between computers to save time on scanning again for files(of course if they have similar directory structure).\n\nIn case of problems with cache, this files can be removed, so app will automatically regenerate them.",
+        ));
+        button_settings_open_settings_folder.set_tooltip_text(Some("Opens folder where Czkawka config are stored.\n\nModifying them, may cause to show."));
+
         Self {
             window_settings,
             check_button_settings_save_at_exit,
@@ -69,11 +133,21 @@
             check_button_settings_use_trash,
             check_button_settings_hide_hard_links,
             entry_settings_cache_file_minimal_size,
+            entry_settings_prehash_cache_file_minimal_size,
+            check_button_duplicates_use_prehash_cache,
             check_button_settings_show_preview_duplicates,
+            check_button_settings_duplicates_delete_outdated_cache,
+            button_settings_duplicates_clear_cache,
             check_button_settings_show_preview_similar_images,
+            check_button_settings_similar_images_delete_outdated_cache,
+            button_settings_similar_images_clear_cache,
+            check_button_settings_similar_videos_delete_outdated_cache,
+            button_settings_similar_videos_clear_cache,
             button_settings_save_configuration,
             button_settings_load_configuration,
             button_settings_reset_configuration,
+            button_settings_open_cache_folder,
+            button_settings_open_settings_folder,
         }
     }
 }
diff -Naur orig/czkawka_gui/src/gui_upper_notepad.rs patched/czkawka_gui/src/gui_upper_notepad.rs
--- orig/czkawka_gui/src/gui_upper_notepad.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/gui_upper_notepad.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,5 +1,5 @@
 use gtk::prelude::*;
-use gtk::TreeView;
+use gtk::{EventControllerKey, TreeView};
 
 #[derive(Clone)]
 pub struct GuiUpperNotebook {
@@ -11,6 +11,9 @@
     pub tree_view_included_directories: gtk::TreeView,
     pub tree_view_excluded_directories: gtk::TreeView,
 
+    pub evk_tree_view_included_directories: gtk::EventControllerKey,
+    pub evk_tree_view_excluded_directories: gtk::EventControllerKey,
+
     pub entry_excluded_items: gtk::Entry,
     pub entry_allowed_extensions: gtk::Entry,
 
@@ -34,10 +37,14 @@
         let tree_view_included_directories: gtk::TreeView = TreeView::new();
         let tree_view_excluded_directories: gtk::TreeView = TreeView::new();
 
+        let evk_tree_view_included_directories: gtk::EventControllerKey = EventControllerKey::new(&tree_view_included_directories);
+        let evk_tree_view_excluded_directories: gtk::EventControllerKey = EventControllerKey::new(&tree_view_excluded_directories);
+
         let entry_allowed_extensions: gtk::Entry = builder.object("entry_allowed_extensions").unwrap();
         let entry_excluded_items: gtk::Entry = builder.object("entry_excluded_items").unwrap();
 
         let check_button_recursive: gtk::CheckButton = builder.object("check_button_recursive").unwrap();
+        check_button_recursive.set_tooltip_text(Some("If selected, search also for files which are not placed directly under chosen folders"));
 
         let buttons_manual_add_directory: gtk::Button = builder.object("buttons_manual_add_directory").unwrap();
         let buttons_add_included_directory: gtk::Button = builder.object("buttons_add_included_directory").unwrap();
@@ -46,12 +53,21 @@
         let buttons_add_excluded_directory: gtk::Button = builder.object("buttons_add_excluded_directory").unwrap();
         let buttons_remove_excluded_directory: gtk::Button = builder.object("buttons_remove_excluded_directory").unwrap();
 
+        buttons_manual_add_directory.set_tooltip_text(Some("Allows to add directory name by hand"));
+        buttons_add_included_directory.set_tooltip_text(Some("Add new directory to search"));
+        buttons_remove_included_directory.set_tooltip_text(Some("Delete directory from search"));
+        buttons_manual_add_excluded_directory.set_tooltip_text(Some("Allows to add directory name by hand"));
+        buttons_add_excluded_directory.set_tooltip_text(Some("Add directory to be excluded in search"));
+        buttons_remove_excluded_directory.set_tooltip_text(Some("Delete directory from excluded list"));
+
         Self {
             notebook_upper,
             scrolled_window_included_directories,
             scrolled_window_excluded_directories,
             tree_view_included_directories,
             tree_view_excluded_directories,
+            evk_tree_view_included_directories,
+            evk_tree_view_excluded_directories,
             entry_excluded_items,
             entry_allowed_extensions,
             check_button_recursive,
diff -Naur orig/czkawka_gui/src/help_functions.rs patched/czkawka_gui/src/help_functions.rs
--- orig/czkawka_gui/src/help_functions.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/help_functions.rs	2021-12-04 17:07:36.882961295 +0100
@@ -1,3 +1,9 @@
+use std::collections::HashMap;
+use std::path::{Path, PathBuf};
+
+use gtk::prelude::*;
+use gtk::{ListStore, TextView, Widget};
+
 use czkawka_core::big_file::BigFile;
 use czkawka_core::broken_files::BrokenFiles;
 use czkawka_core::common_messages::Messages;
@@ -8,12 +14,178 @@
 use czkawka_core::invalid_symlinks::InvalidSymlinks;
 use czkawka_core::same_music::SameMusic;
 use czkawka_core::similar_images::SimilarImages;
+use czkawka_core::similar_videos::SimilarVideos;
 use czkawka_core::temporary::Temporary;
-use czkawka_core::zeroed::ZeroedFiles;
-use gtk::prelude::*;
-use gtk::{ListStore, TextView};
-use std::collections::HashMap;
-use std::path::{Path, PathBuf};
+
+use crate::notebook_enums::{NotebookMainEnum, NUMBER_OF_NOTEBOOK_MAIN_TABS};
+
+pub const KEY_DELETE: u32 = 119;
+pub const KEY_ENTER: u32 = 36;
+pub const KEY_SPACE: u32 = 65;
+
+// pub const KEY_DOWN: u32 = 116;
+// pub const KEY_UP: u32 = 111;
+// pub const KEY_PG_DOWN: u32 = 117;
+// pub const KEY_PG_UP: u32 = 112;
+// pub const KEY_HOME: u32 = 115;
+// pub const KEY_END: u32 = 110;
+
+#[derive(Eq, PartialEq)]
+pub enum PopoverTypes {
+    All,
+    Size,
+    Reverse,
+    Custom,
+    Date,
+    None,
+}
+
+pub struct NotebookObject {
+    pub notebook_type: NotebookMainEnum,
+    pub available_modes: [PopoverTypes; 4],
+    pub column_activatable_button: Option<i32>,
+    pub column_path: i32,
+    pub column_name: i32,
+    pub column_selection: i32,
+    pub column_color: Option<i32>,
+    pub column_dimensions: Option<i32>,
+    pub column_size: Option<i32>,
+    pub column_size_as_bytes: Option<i32>,
+    pub column_modification_as_secs: Option<i32>,
+}
+
+pub static NOTEBOOKS_INFOS: [NotebookObject; NUMBER_OF_NOTEBOOK_MAIN_TABS] = [
+    NotebookObject {
+        notebook_type: NotebookMainEnum::Duplicate,
+        available_modes: [PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom, PopoverTypes::Date],
+        column_activatable_button: Some(ColumnsDuplicates::ActivatableSelectButton as i32),
+        column_path: ColumnsDuplicates::Path as i32,
+        column_name: ColumnsDuplicates::Name as i32,
+        column_selection: ColumnsDuplicates::SelectionButton as i32,
+        column_color: Some(ColumnsDuplicates::Color as i32),
+        column_dimensions: None,
+        column_size: None,
+        column_size_as_bytes: None,
+        column_modification_as_secs: Some(ColumnsDuplicates::ModificationAsSecs as i32),
+    },
+    NotebookObject {
+        notebook_type: NotebookMainEnum::EmptyDirectories,
+        available_modes: [PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom, PopoverTypes::None],
+        column_activatable_button: None,
+        column_path: ColumnsEmptyFolders::Path as i32,
+        column_name: ColumnsEmptyFolders::Name as i32,
+        column_selection: ColumnsEmptyFolders::SelectionButton as i32,
+        column_color: None,
+        column_dimensions: None,
+        column_size: None,
+        column_size_as_bytes: None,
+        column_modification_as_secs: None,
+    },
+    NotebookObject {
+        notebook_type: NotebookMainEnum::BigFiles,
+        available_modes: [PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom, PopoverTypes::None],
+        column_activatable_button: None,
+        column_path: ColumnsBigFiles::Path as i32,
+        column_name: ColumnsBigFiles::Name as i32,
+        column_selection: ColumnsBigFiles::SelectionButton as i32,
+        column_color: None,
+        column_dimensions: None,
+        column_size: None,
+        column_size_as_bytes: None,
+        column_modification_as_secs: None,
+    },
+    NotebookObject {
+        notebook_type: NotebookMainEnum::EmptyFiles,
+        available_modes: [PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom, PopoverTypes::None],
+        column_activatable_button: None,
+        column_path: ColumnsEmptyFiles::Path as i32,
+        column_name: ColumnsEmptyFiles::Name as i32,
+        column_selection: ColumnsEmptyFiles::SelectionButton as i32,
+        column_color: None,
+        column_dimensions: None,
+        column_size: None,
+        column_size_as_bytes: None,
+        column_modification_as_secs: None,
+    },
+    NotebookObject {
+        notebook_type: NotebookMainEnum::Temporary,
+        available_modes: [PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom, PopoverTypes::None],
+        column_activatable_button: None,
+        column_path: ColumnsTemporaryFiles::Path as i32,
+        column_name: ColumnsTemporaryFiles::Name as i32,
+        column_selection: ColumnsTemporaryFiles::SelectionButton as i32,
+        column_color: None,
+        column_dimensions: None,
+        column_size: None,
+        column_size_as_bytes: None,
+        column_modification_as_secs: None,
+    },
+    NotebookObject {
+        notebook_type: NotebookMainEnum::SimilarImages,
+        available_modes: [PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom, PopoverTypes::Date],
+        column_activatable_button: Some(ColumnsSimilarImages::ActivatableSelectButton as i32),
+        column_path: ColumnsSimilarImages::Path as i32,
+        column_name: ColumnsSimilarImages::Name as i32,
+        column_selection: ColumnsSimilarImages::SelectionButton as i32,
+        column_color: Some(ColumnsSimilarImages::Color as i32),
+        column_dimensions: Some(ColumnsSimilarImages::Dimensions as i32),
+        column_size: Some(ColumnsSimilarImages::Size as i32),
+        column_size_as_bytes: Some(ColumnsSimilarImages::SizeAsBytes as i32),
+        column_modification_as_secs: Some(ColumnsSimilarImages::ModificationAsSecs as i32),
+    },
+    NotebookObject {
+        notebook_type: NotebookMainEnum::SimilarVideos,
+        available_modes: [PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom, PopoverTypes::Date],
+        column_activatable_button: Some(ColumnsSimilarVideos::ActivatableSelectButton as i32),
+        column_path: ColumnsSimilarVideos::Path as i32,
+        column_name: ColumnsSimilarVideos::Name as i32,
+        column_selection: ColumnsSimilarVideos::SelectionButton as i32,
+        column_color: Some(ColumnsSimilarVideos::Color as i32),
+        column_dimensions: None,
+        column_size: Some(ColumnsSimilarVideos::Size as i32),
+        column_size_as_bytes: Some(ColumnsSimilarVideos::SizeAsBytes as i32),
+        column_modification_as_secs: Some(ColumnsSimilarVideos::ModificationAsSecs as i32),
+    },
+    NotebookObject {
+        notebook_type: NotebookMainEnum::SameMusic,
+        available_modes: [PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom, PopoverTypes::Date],
+        column_activatable_button: Some(ColumnsSameMusic::ActivatableSelectButton as i32),
+        column_path: ColumnsSameMusic::Path as i32,
+        column_name: ColumnsSameMusic::Name as i32,
+        column_selection: ColumnsSameMusic::SelectionButton as i32,
+        column_color: Some(ColumnsSameMusic::Color as i32),
+        column_dimensions: None,
+        column_size: None,
+        column_size_as_bytes: Some(ColumnsSameMusic::SizeAsBytes as i32),
+        column_modification_as_secs: Some(ColumnsSameMusic::ModificationAsSecs as i32),
+    },
+    NotebookObject {
+        notebook_type: NotebookMainEnum::Symlinks,
+        available_modes: [PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom, PopoverTypes::None],
+        column_activatable_button: None,
+        column_path: ColumnsInvalidSymlinks::Path as i32,
+        column_name: ColumnsInvalidSymlinks::Name as i32,
+        column_selection: ColumnsInvalidSymlinks::SelectionButton as i32,
+        column_color: None,
+        column_dimensions: None,
+        column_size: None,
+        column_size_as_bytes: None,
+        column_modification_as_secs: None,
+    },
+    NotebookObject {
+        notebook_type: NotebookMainEnum::BrokenFiles,
+        available_modes: [PopoverTypes::All, PopoverTypes::Reverse, PopoverTypes::Custom, PopoverTypes::None],
+        column_activatable_button: None,
+        column_path: ColumnsBrokenFiles::Path as i32,
+        column_name: ColumnsBrokenFiles::Name as i32,
+        column_selection: ColumnsBrokenFiles::SelectionButton as i32,
+        column_color: None,
+        column_dimensions: None,
+        column_size: None,
+        column_size_as_bytes: None,
+        column_modification_as_secs: None,
+    },
+];
 
 pub enum Message {
     Duplicates(DuplicateFinder),
@@ -22,17 +194,16 @@
     BigFiles(BigFile),
     Temporary(Temporary),
     SimilarImages(SimilarImages),
-    ZeroedFiles(ZeroedFiles),
+    SimilarVideos(SimilarVideos),
     SameMusic(SameMusic),
     InvalidSymlinks(InvalidSymlinks),
     BrokenFiles(BrokenFiles),
 }
 
-#[derive(Debug)]
 pub enum ColumnsDuplicates {
     // Columns for duplicate treeview
     ActivatableSelectButton = 0,
-    ActiveSelectButton,
+    SelectionButton,
     Name,
     Path,
     Modification,
@@ -43,37 +214,42 @@
 
 pub enum ColumnsEmptyFolders {
     // Columns for empty folder treeview
-    ActiveSelectButton = 0,
+    SelectionButton = 0,
     Name,
     Path,
     Modification,
 }
+
 pub enum ColumnsDirectory {
     // Columns for Included and Excluded Directories in upper Notebook
     Path = 0,
 }
+
 pub enum ColumnsBigFiles {
-    ActiveSelectButton = 0,
+    SelectionButton = 0,
     Size,
     Name,
     Path,
     Modification,
 }
+
 pub enum ColumnsEmptyFiles {
-    ActiveSelectButton = 0,
+    SelectionButton = 0,
     Name,
     Path,
     Modification,
 }
+
 pub enum ColumnsTemporaryFiles {
-    ActiveSelectButton = 0,
+    SelectionButton = 0,
     Name,
     Path,
     Modification,
 }
+
 pub enum ColumnsSimilarImages {
     ActivatableSelectButton = 0,
-    ActiveSelectButton,
+    SelectionButton,
     Similarity,
     Size,
     SizeAsBytes,
@@ -85,17 +261,23 @@
     Color,
     TextColor,
 }
-pub enum ColumnsZeroedFiles {
-    ActiveSelectButton = 0,
+
+pub enum ColumnsSimilarVideos {
+    ActivatableSelectButton = 0,
+    SelectionButton,
     Size,
     SizeAsBytes,
     Name,
     Path,
     Modification,
+    ModificationAsSecs,
+    Color,
+    TextColor,
 }
+
 pub enum ColumnsSameMusic {
     ActivatableSelectButton = 0,
-    ActiveSelectButton,
+    SelectionButton,
     Size,
     SizeAsBytes,
     Name,
@@ -110,8 +292,9 @@
     Color,
     TextColor,
 }
+
 pub enum ColumnsInvalidSymlinks {
-    ActiveSelectButton = 0,
+    SelectionButton = 0,
     Name,
     Path,
     DestinationPath,
@@ -120,7 +303,7 @@
 }
 
 pub enum ColumnsBrokenFiles {
-    ActiveSelectButton = 0,
+    SelectionButton = 0,
     Name,
     Path,
     ErrorType,
@@ -151,6 +334,7 @@
         }
     }
 }
+
 pub fn get_path_buf_from_vector_of_strings(vec_string: Vec<String>) -> Vec<PathBuf> {
     vec_string.iter().map(PathBuf::from).collect()
 }
@@ -212,38 +396,7 @@
     buffer.set_text(format!("{}\n{}", current_text, string_to_append).as_str());
 }
 
-pub fn select_function_duplicates(_tree_selection: &gtk::TreeSelection, tree_model: &gtk::TreeModel, tree_path: &gtk::TreePath, _is_path_currently_selected: bool) -> bool {
-    // let name = tree_model.value(&tree_model.iter(tree_path).unwrap(),ColumnsDuplicates::Name as i32).get::<String>().unwrap();
-    // let path = tree_model.value(&tree_model.iter(tree_path).unwrap(), ColumnsDuplicates::Path as i32).get::<String>().unwrap();
-    // let modification = tree_model.value(&tree_model.iter(tree_path).unwrap(),ColumnsDuplicates::Modification as i32).get::<String>().unwrap();
-    let color = tree_model.value(&tree_model.iter(tree_path).unwrap(), ColumnsDuplicates::Color as i32).get::<String>().unwrap();
-
-    if color == HEADER_ROW_COLOR {
-        return false;
-    }
-
-    true
-}
-pub fn select_function_same_music(_tree_selection: &gtk::TreeSelection, tree_model: &gtk::TreeModel, tree_path: &gtk::TreePath, _is_path_currently_selected: bool) -> bool {
-    let color = tree_model.value(&tree_model.iter(tree_path).unwrap(), ColumnsSameMusic::Color as i32).get::<String>().unwrap();
-
-    if color == HEADER_ROW_COLOR {
-        return false;
-    }
-
-    true
-}
-pub fn select_function_similar_images(_tree_selection: &gtk::TreeSelection, tree_model: &gtk::TreeModel, tree_path: &gtk::TreePath, _is_path_currently_selected: bool) -> bool {
-    let color = tree_model.value(&tree_model.iter(tree_path).unwrap(), ColumnsSimilarImages::Color as i32).get::<String>().unwrap();
-
-    if color == HEADER_ROW_COLOR {
-        return false;
-    }
-
-    true
-}
-
-pub fn set_buttons(hashmap: &mut HashMap<String, bool>, buttons_array: &[gtk::Button], button_names: &[String]) {
+pub fn set_buttons(hashmap: &mut HashMap<String, bool>, buttons_array: &[gtk::Widget], button_names: &[String]) {
     for (index, button) in buttons_array.iter().enumerate() {
         if *hashmap.get_mut(button_names[index].as_str()).unwrap() {
             button.show();
@@ -252,7 +405,8 @@
         }
     }
 }
-pub fn hide_all_buttons(buttons_array: &[gtk::Button]) {
+
+pub fn hide_all_buttons(buttons_array: &[Widget]) {
     for button in buttons_array {
         button.hide();
     }
@@ -268,8 +422,9 @@
 pub fn get_list_store(tree_view: &gtk::TreeView) -> ListStore {
     tree_view.model().unwrap().downcast::<gtk::ListStore>().unwrap()
 }
+
 pub fn get_dialog_box_child(dialog: &gtk::Dialog) -> gtk::Box {
-    dialog.children()[0].clone().downcast::<gtk::Box>().unwrap()
+    dialog.child().unwrap().downcast::<gtk::Box>().unwrap()
 }
 
 pub fn change_dimension_to_krotka(dimensions: String) -> (u64, u64) {
@@ -280,3 +435,98 @@
     let number2 = vec[1].parse::<u64>().expect("Invalid data in image dimension in position 1");
     (number1, number2)
 }
+
+pub fn get_notebook_enum_from_tree_view(tree_view: &gtk::TreeView) -> NotebookMainEnum {
+    match (*tree_view).widget_name().to_string().as_str() {
+        "tree_view_duplicate_finder" => NotebookMainEnum::Duplicate,
+        "tree_view_empty_folder_finder" => NotebookMainEnum::EmptyDirectories,
+        "tree_view_empty_files_finder" => NotebookMainEnum::EmptyFiles,
+        "tree_view_temporary_files_finder" => NotebookMainEnum::Temporary,
+        "tree_view_big_files_finder" => NotebookMainEnum::BigFiles,
+        "tree_view_similar_images_finder" => NotebookMainEnum::SimilarImages,
+        "tree_view_similar_videos_finder" => NotebookMainEnum::SimilarVideos,
+        "tree_view_same_music_finder" => NotebookMainEnum::SameMusic,
+        "tree_view_invalid_symlinks" => NotebookMainEnum::Symlinks,
+        "tree_view_broken_files" => NotebookMainEnum::BrokenFiles,
+        e => {
+            panic!("{}", e)
+        }
+    }
+}
+
+pub fn get_notebook_object_from_tree_view(tree_view: &gtk::TreeView) -> &NotebookObject {
+    let nb_enum = get_notebook_enum_from_tree_view(tree_view);
+    &NOTEBOOKS_INFOS[nb_enum as usize]
+}
+
+// After e.g. deleting files, header may become orphan or have one child, so should be deleted in this case
+pub fn clean_invalid_headers(model: &gtk::ListStore, column_color: i32) {
+    // Remove only child from header
+    if let Some(first_iter) = model.iter_first() {
+        let mut vec_tree_path_to_delete: Vec<gtk::TreePath> = Vec::new();
+        let mut current_iter = first_iter;
+        if model.value(&current_iter, column_color).get::<String>().unwrap() != HEADER_ROW_COLOR {
+            panic!("First deleted element, should be a header"); // First element should be header
+        };
+
+        let mut next_iter;
+        let mut next_next_iter;
+        'main: loop {
+            if model.value(&current_iter, column_color).get::<String>().unwrap() != HEADER_ROW_COLOR {
+                panic!("First deleted element, should be a header"); // First element should be header
+            };
+
+            next_iter = current_iter.clone();
+            if !model.iter_next(&next_iter) {
+                // There is only single header left (H1 -> END) -> (NOTHING)
+                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
+                break 'main;
+            }
+
+            if model.value(&next_iter, column_color).get::<String>().unwrap() == HEADER_ROW_COLOR {
+                // There are two headers each others(we remove just first) -> (H1 -> H2) -> (H2)
+                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
+                current_iter = next_iter.clone();
+                continue 'main;
+            }
+
+            next_next_iter = next_iter.clone();
+            if !model.iter_next(&next_next_iter) {
+                // There is only one child of header left, so we remove it with header (H1 -> C1 -> END) -> (NOTHING)
+                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
+                vec_tree_path_to_delete.push(model.path(&next_iter).unwrap());
+                break 'main;
+            }
+
+            if model.value(&next_next_iter, column_color).get::<String>().unwrap() == HEADER_ROW_COLOR {
+                // One child between two headers, we can remove them  (H1 -> C1 -> H2) -> (H2)
+                vec_tree_path_to_delete.push(model.path(&current_iter).unwrap());
+                vec_tree_path_to_delete.push(model.path(&next_iter).unwrap());
+                current_iter = next_next_iter.clone();
+                continue 'main;
+            }
+
+            loop {
+                // (H1 -> C1 -> C2 -> Cn -> END) -> (NO CHANGE, BECAUSE IS GOOD)
+                if !model.iter_next(&next_next_iter) {
+                    break 'main;
+                }
+                // Move to next header
+                if model.value(&next_next_iter, column_color).get::<String>().unwrap() == HEADER_ROW_COLOR {
+                    current_iter = next_next_iter.clone();
+                    continue 'main;
+                }
+            }
+        }
+        for tree_path in vec_tree_path_to_delete.iter().rev() {
+            model.remove(&model.iter(tree_path).unwrap());
+        }
+    }
+
+    // Last step, remove orphan header if exists
+    if let Some(iter) = model.iter_first() {
+        if !model.iter_next(&iter) {
+            model.clear();
+        }
+    }
+}
diff -Naur orig/czkawka_gui/src/initialize_gui.rs patched/czkawka_gui/src/initialize_gui.rs
--- orig/czkawka_gui/src/initialize_gui.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/initialize_gui.rs	2021-12-04 17:07:36.886961301 +0100
@@ -1,17 +1,25 @@
-use crate::connect_button_delete::{basic_remove, check_if_can_delete_files, check_if_deleting_all_files_in_group, empty_folder_remover, tree_remove};
-use crate::create_tree_view::*;
-use crate::double_click_opening::*;
-use crate::gui_data::*;
-use crate::help_functions::*;
-use czkawka_core::similar_images::SIMILAR_VALUES;
+use std::cell::RefCell;
+use std::cmp::Ordering;
+use std::fs;
+use std::ops::Deref;
+use std::path::Path;
+use std::rc::Rc;
+
 use directories_next::ProjectDirs;
 use gtk::prelude::*;
-use gtk::{CheckButton, Image, SelectionMode, TextView, TreeView};
+use gtk::{CheckButton, EventControllerKey, Image, SelectionMode, TextView, TreeView};
 use image::imageops::FilterType;
 use image::GenericImageView;
-use std::cmp::Ordering;
-use std::fs;
-use std::path::Path;
+
+use czkawka_core::similar_images::SIMILAR_VALUES;
+use czkawka_core::similar_videos::MAX_TOLERANCE;
+
+use crate::create_tree_view::*;
+use crate::delete_things;
+use crate::gui_data::*;
+use crate::help_functions::*;
+use crate::notebook_enums::NotebookMainEnum;
+use crate::opening_selecting_records::*;
 
 pub fn initialize_gui(gui_data: &mut GuiData) {
     //// Initialize button
@@ -42,34 +50,36 @@
         let scrolled_window_temporary_files_finder = gui_data.main_notebook.scrolled_window_temporary_files_finder.clone();
         let scrolled_window_big_files_finder = gui_data.main_notebook.scrolled_window_big_files_finder.clone();
         let scrolled_window_similar_images_finder = gui_data.main_notebook.scrolled_window_similar_images_finder.clone();
+        let scrolled_window_similar_videos_finder = gui_data.main_notebook.scrolled_window_similar_videos_finder.clone();
         let scrolled_window_same_music_finder = gui_data.main_notebook.scrolled_window_same_music_finder.clone();
         let scrolled_window_invalid_symlinks = gui_data.main_notebook.scrolled_window_invalid_symlinks.clone();
-        let scrolled_window_zeroed_files_finder = gui_data.main_notebook.scrolled_window_zeroed_files_finder.clone();
         let scrolled_window_broken_files = gui_data.main_notebook.scrolled_window_broken_files.clone();
 
-        let image_preview_similar_images = gui_data.main_notebook.image_preview_similar_images.clone();
-        let image_preview_duplicates = gui_data.main_notebook.image_preview_duplicates.clone();
-        let check_button_settings_show_preview_similar_images = gui_data.settings.check_button_settings_show_preview_similar_images.clone();
-        let check_button_settings_show_preview_duplicates = gui_data.settings.check_button_settings_show_preview_duplicates.clone();
         let text_view_errors = gui_data.text_view_errors.clone();
 
-        let scale_similarity = gui_data.main_notebook.scale_similarity.clone();
+        let scale_similarity_similar_images = gui_data.main_notebook.scale_similarity_similar_images.clone();
+        let scale_similarity_similar_videos = gui_data.main_notebook.scale_similarity_similar_videos.clone();
 
         // Set step increment
         {
-            scale_similarity.set_range(0_f64, SIMILAR_VALUES[1][5] as f64); // This defaults to value of minimal size of hash 8
-            scale_similarity.set_fill_level(SIMILAR_VALUES[1][5] as f64);
-            scale_similarity.adjustment().set_step_increment(1_f64);
+            scale_similarity_similar_images.set_range(0_f64, SIMILAR_VALUES[1][5] as f64); // This defaults to value of minimal size of hash 8
+            scale_similarity_similar_images.set_fill_level(SIMILAR_VALUES[1][5] as f64);
+            scale_similarity_similar_images.adjustment().set_step_increment(1_f64);
+        }
+        // Set step increment
+        {
+            scale_similarity_similar_videos.set_range(0_f64, MAX_TOLERANCE as f64); // This defaults to value of minimal size of hash 8
+            scale_similarity_similar_videos.set_value(15_f64);
+            scale_similarity_similar_videos.set_fill_level(MAX_TOLERANCE as f64);
+            scale_similarity_similar_videos.adjustment().set_step_increment(1_f64);
         }
 
         // Set Main Scrolled Window Treeviews
         {
             // Duplicate Files
             {
-                let image_preview_duplicates_cloned = image_preview_duplicates.clone();
+                let image_preview_duplicates = gui_data.main_notebook.image_preview_duplicates.clone();
                 image_preview_duplicates.hide();
-                let text_view_errors_cloned = text_view_errors.clone();
-                let check_button_settings_show_preview_duplicates_cloned = check_button_settings_show_preview_duplicates.clone();
 
                 let col_types: [glib::types::Type; 8] = [
                     glib::types::Type::BOOL,
@@ -90,69 +100,40 @@
 
                 create_tree_view_duplicates(&mut tree_view);
 
-                tree_view.connect_button_press_event(opening_double_click_function_duplicates);
-                tree_view.connect_key_press_event(opening_enter_function_duplicates);
-                tree_view.connect_button_release_event(move |tree_view, _event| {
-                    show_preview(
-                        tree_view,
-                        &text_view_errors_cloned,
-                        &check_button_settings_show_preview_duplicates_cloned,
-                        &image_preview_duplicates_cloned,
-                        ColumnsDuplicates::Path as i32,
-                        ColumnsDuplicates::Name as i32,
-                    );
-                    gtk::Inhibit(false)
-                });
+                {
+                    // EVK
+                    let evk = EventControllerKey::new(&tree_view);
+                    evk.connect_key_pressed(opening_enter_function_ported);
+                    gui_data.main_notebook.evk_tree_view_duplicate_finder = evk;
+                }
+                {
+                    // Other connects
+
+                    let check_button_settings_show_preview_duplicates = gui_data.settings.check_button_settings_show_preview_duplicates.clone();
+                    let image_preview_duplicates = gui_data.main_notebook.image_preview_duplicates.clone();
+                    let preview_path = gui_data.preview_path.clone();
+
+                    tree_view.connect_button_press_event(opening_double_click_function);
+                    tree_view.connect_button_release_event(move |tree_view, _event| {
+                        let nb_object = &NOTEBOOKS_INFOS[NotebookMainEnum::Duplicate as usize];
+                        let preview_path = preview_path.clone();
+                        show_preview(
+                            tree_view,
+                            &text_view_errors,
+                            &check_button_settings_show_preview_duplicates,
+                            &image_preview_duplicates,
+                            preview_path,
+                            nb_object.column_path,
+                            nb_object.column_name,
+                        );
 
+                        gtk::Inhibit(false)
+                    });
+                }
+                tree_view.set_widget_name("tree_view_duplicate_finder");
                 gui_data.main_notebook.tree_view_duplicate_finder = tree_view.clone();
                 scrolled_window_duplicate_finder.add(&tree_view);
                 scrolled_window_duplicate_finder.show_all();
-
-                let text_view_errors_cloned = text_view_errors.clone();
-
-                let gui_data = gui_data.clone();
-                tree_view.connect_key_release_event(move |tree_view, e| {
-                    if let Some(button_number) = e.keycode() {
-                        // Handle delete button
-                        if button_number == 119 {
-                            if tree_view.selection().selected_rows().0.is_empty() {
-                                return gtk::Inhibit(false);
-                            }
-                            if !check_if_can_delete_files(&gui_data.settings.check_button_settings_confirm_deletion, &gui_data.window_main) {
-                                return gtk::Inhibit(false);
-                            }
-                            if gui_data.settings.check_button_settings_confirm_group_deletion.is_active()
-                                && check_if_deleting_all_files_in_group(
-                                    &tree_view.clone(),
-                                    ColumnsDuplicates::Color as i32,
-                                    ColumnsDuplicates::ActiveSelectButton as i32,
-                                    &gui_data.window_main,
-                                    &gui_data.settings.check_button_settings_confirm_group_deletion,
-                                )
-                            {
-                                return gtk::Inhibit(false);
-                            }
-                            tree_remove(
-                                tree_view,
-                                ColumnsDuplicates::Name as i32,
-                                ColumnsDuplicates::Path as i32,
-                                ColumnsDuplicates::Color as i32,
-                                ColumnsDuplicates::ActiveSelectButton as i32,
-                                &gui_data,
-                            );
-                            image_preview_duplicates.hide();
-                        }
-                    }
-                    show_preview(
-                        tree_view,
-                        &text_view_errors_cloned,
-                        &check_button_settings_show_preview_duplicates,
-                        &image_preview_duplicates,
-                        ColumnsDuplicates::Path as i32,
-                        ColumnsDuplicates::Name as i32,
-                    );
-                    gtk::Inhibit(false)
-                });
             }
             // Empty Folders
             {
@@ -165,23 +146,17 @@
 
                 create_tree_view_empty_folders(&mut tree_view);
 
-                tree_view.connect_button_press_event(opening_double_click_function_empty_folders);
-                tree_view.connect_key_press_event(opening_enter_function_empty_folders);
+                let evk = EventControllerKey::new(&tree_view);
+                evk.connect_key_pressed(opening_enter_function_ported);
 
+                gui_data.main_notebook.evk_tree_view_empty_folder_finder = evk;
+
+                tree_view.connect_button_press_event(opening_double_click_function);
+
+                tree_view.set_widget_name("tree_view_empty_folder_finder");
                 gui_data.main_notebook.tree_view_empty_folder_finder = tree_view.clone();
                 scrolled_window_empty_folder_finder.add(&tree_view);
                 scrolled_window_empty_folder_finder.show_all();
-
-                let gui_data = gui_data.clone();
-                tree_view.connect_key_release_event(move |tree_view, e| {
-                    if let Some(button_number) = e.keycode() {
-                        // Handle delete button
-                        if button_number == 119 {
-                            empty_folder_remover(tree_view, ColumnsEmptyFolders::Name as i32, ColumnsEmptyFolders::Path as i32, ColumnsEmptyFolders::ActiveSelectButton as i32, &gui_data);
-                        }
-                    }
-                    gtk::Inhibit(false)
-                });
             }
             // Empty Files
             {
@@ -194,23 +169,16 @@
 
                 create_tree_view_empty_files(&mut tree_view);
 
-                tree_view.connect_button_press_event(opening_double_click_function_empty_files);
-                tree_view.connect_key_press_event(opening_enter_function_empty_files);
+                let evk = EventControllerKey::new(&tree_view);
+                evk.connect_key_pressed(opening_enter_function_ported);
+                gui_data.main_notebook.evk_tree_view_empty_files_finder = evk;
+
+                tree_view.connect_button_press_event(opening_double_click_function);
 
+                tree_view.set_widget_name("tree_view_empty_files_finder");
                 gui_data.main_notebook.tree_view_empty_files_finder = tree_view.clone();
                 scrolled_window_empty_files_finder.add(&tree_view);
                 scrolled_window_empty_files_finder.show_all();
-
-                let gui_data = gui_data.clone();
-                tree_view.connect_key_release_event(move |tree_view, e| {
-                    if let Some(button_number) = e.keycode() {
-                        // Handle delete button
-                        if button_number == 119 {
-                            basic_remove(tree_view, ColumnsEmptyFiles::Name as i32, ColumnsEmptyFiles::Path as i32, ColumnsEmptyFiles::ActiveSelectButton as i32, &gui_data);
-                        }
-                    }
-                    gtk::Inhibit(false)
-                });
             }
             // Temporary Files
             {
@@ -223,23 +191,16 @@
 
                 create_tree_view_temporary_files(&mut tree_view);
 
-                tree_view.connect_button_press_event(opening_double_click_function_temporary_files);
-                tree_view.connect_key_press_event(opening_enter_function_temporary_files);
+                let evk = EventControllerKey::new(&tree_view);
+                evk.connect_key_pressed(opening_enter_function_ported);
+                gui_data.main_notebook.evk_tree_view_temporary_files_finder = evk;
 
+                tree_view.connect_button_press_event(opening_double_click_function);
+
+                tree_view.set_widget_name("tree_view_temporary_files_finder");
                 gui_data.main_notebook.tree_view_temporary_files_finder = tree_view.clone();
                 scrolled_window_temporary_files_finder.add(&tree_view);
                 scrolled_window_temporary_files_finder.show_all();
-
-                let gui_data = gui_data.clone();
-                tree_view.connect_key_release_event(move |tree_view, e| {
-                    if let Some(button_number) = e.keycode() {
-                        // Handle delete button
-                        if button_number == 119 {
-                            basic_remove(tree_view, ColumnsTemporaryFiles::Name as i32, ColumnsTemporaryFiles::Path as i32, ColumnsTemporaryFiles::ActiveSelectButton as i32, &gui_data);
-                        }
-                    }
-                    gtk::Inhibit(false)
-                });
             }
             // Big Files
             {
@@ -252,27 +213,20 @@
 
                 create_tree_view_big_files(&mut tree_view);
 
-                tree_view.connect_button_press_event(opening_double_click_function_big_files);
-                tree_view.connect_key_press_event(opening_enter_function_big_files);
+                let evk = EventControllerKey::new(&tree_view);
+                evk.connect_key_pressed(opening_enter_function_ported);
+                gui_data.main_notebook.evk_tree_view_big_files_finder = evk;
 
+                tree_view.connect_button_press_event(opening_double_click_function);
+
+                tree_view.set_widget_name("tree_view_big_files_finder");
                 gui_data.main_notebook.tree_view_big_files_finder = tree_view.clone();
                 scrolled_window_big_files_finder.add(&tree_view);
                 scrolled_window_big_files_finder.show_all();
-
-                let gui_data = gui_data.clone();
-                tree_view.connect_key_release_event(move |tree_view, e| {
-                    if let Some(button_number) = e.keycode() {
-                        // Handle delete button
-                        if button_number == 119 {
-                            basic_remove(tree_view, ColumnsBigFiles::Name as i32, ColumnsBigFiles::Path as i32, ColumnsBigFiles::ActiveSelectButton as i32, &gui_data);
-                        }
-                    }
-                    gtk::Inhibit(false)
-                });
             }
             // Similar Images
             {
-                let image_preview_similar_images_clone = image_preview_similar_images.clone();
+                let image_preview_similar_images = gui_data.main_notebook.image_preview_similar_images.clone();
                 image_preview_similar_images.hide();
 
                 let col_types: [glib::types::Type; 12] = [
@@ -298,106 +252,73 @@
 
                 create_tree_view_similar_images(&mut tree_view);
 
-                tree_view.connect_button_press_event(opening_double_click_function_similar_images);
-                tree_view.connect_key_press_event(opening_enter_function_similar_images);
-                tree_view.connect_button_release_event(move |tree_view, _event| {
-                    show_preview(
-                        tree_view,
-                        &text_view_errors,
-                        &check_button_settings_show_preview_similar_images,
-                        &image_preview_similar_images,
-                        ColumnsSimilarImages::Path as i32,
-                        ColumnsSimilarImages::Name as i32,
-                    );
-                    gtk::Inhibit(false)
-                });
+                {
+                    // EVK
+                    let evk = EventControllerKey::new(&tree_view);
+                    evk.connect_key_pressed(opening_enter_function_ported);
+                    gui_data.main_notebook.evk_tree_view_similar_images_finder = evk;
+                }
+                {
+                    // Other connects
+                    let check_button_settings_show_preview_similar_images = gui_data.settings.check_button_settings_show_preview_similar_images.clone();
+                    let preview_path = gui_data.preview_path.clone();
+
+                    tree_view.connect_button_press_event(opening_double_click_function);
+                    let text_view_errors = gui_data.text_view_errors.clone();
+                    tree_view.connect_button_release_event(move |tree_view, _event| {
+                        let nb_object = &NOTEBOOKS_INFOS[NotebookMainEnum::SimilarImages as usize];
+                        let preview_path = preview_path.clone();
+                        show_preview(
+                            tree_view,
+                            &text_view_errors,
+                            &check_button_settings_show_preview_similar_images,
+                            &image_preview_similar_images,
+                            preview_path,
+                            nb_object.column_path,
+                            nb_object.column_name,
+                        );
+                        gtk::Inhibit(false)
+                    });
+                }
 
+                tree_view.set_widget_name("tree_view_similar_images_finder");
                 gui_data.main_notebook.tree_view_similar_images_finder = tree_view.clone();
                 scrolled_window_similar_images_finder.add(&tree_view);
                 scrolled_window_similar_images_finder.show_all();
-
-                let image_preview_similar_images = image_preview_similar_images_clone.clone();
-                let text_view_errors = gui_data.text_view_errors.clone();
-                let check_button_settings_show_preview_similar_images = gui_data.settings.check_button_settings_show_preview_similar_images.clone();
-                let gui_data = gui_data.clone();
-                tree_view.connect_key_release_event(move |tree_view, e| {
-                    if let Some(button_number) = e.keycode() {
-                        // Handle delete button
-                        if button_number == 119 {
-                            if tree_view.selection().selected_rows().0.is_empty() {
-                                return gtk::Inhibit(false);
-                            }
-                            if !check_if_can_delete_files(&gui_data.settings.check_button_settings_confirm_deletion, &gui_data.window_main) {
-                                return gtk::Inhibit(false);
-                            }
-                            if gui_data.settings.check_button_settings_confirm_group_deletion.is_active()
-                                && check_if_deleting_all_files_in_group(
-                                    &tree_view.clone(),
-                                    ColumnsSimilarImages::Color as i32,
-                                    ColumnsSimilarImages::ActiveSelectButton as i32,
-                                    &gui_data.window_main,
-                                    &gui_data.settings.check_button_settings_confirm_group_deletion,
-                                )
-                            {
-                                return gtk::Inhibit(false);
-                            }
-                            tree_remove(
-                                tree_view,
-                                ColumnsSimilarImages::Name as i32,
-                                ColumnsSimilarImages::Path as i32,
-                                ColumnsSimilarImages::Color as i32,
-                                ColumnsSimilarImages::ActiveSelectButton as i32,
-                                &gui_data,
-                            );
-                            image_preview_similar_images_clone.hide();
-                        }
-                    }
-                    show_preview(
-                        tree_view,
-                        &text_view_errors,
-                        &check_button_settings_show_preview_similar_images,
-                        &image_preview_similar_images,
-                        ColumnsSimilarImages::Path as i32,
-                        ColumnsSimilarImages::Name as i32,
-                    );
-                    gtk::Inhibit(false)
-                });
             }
-            // Zeroed Files
+            // Similar Videos
             {
-                let col_types: [glib::types::Type; 6] = [
-                    glib::types::Type::BOOL,
-                    glib::types::Type::STRING,
-                    glib::types::Type::U64,
-                    glib::types::Type::STRING,
-                    glib::types::Type::STRING,
-                    glib::types::Type::STRING,
+                let col_types: [glib::types::Type; 10] = [
+                    glib::types::Type::BOOL,   // ActivatableSelectButton
+                    glib::types::Type::BOOL,   // SelectionButton
+                    glib::types::Type::STRING, // Size
+                    glib::types::Type::U64,    // SizeAsBytes
+                    glib::types::Type::STRING, // Name
+                    glib::types::Type::STRING, // Path
+                    glib::types::Type::STRING, // Modification
+                    glib::types::Type::U64,    // ModificationAsSecs
+                    glib::types::Type::STRING, // Color
+                    glib::types::Type::STRING, // TextColor
                 ];
                 let list_store: gtk::ListStore = gtk::ListStore::new(&col_types);
 
                 let mut tree_view: gtk::TreeView = TreeView::with_model(&list_store);
 
                 tree_view.selection().set_mode(SelectionMode::Multiple);
+                tree_view.selection().set_select_function(Some(Box::new(select_function_similar_videos)));
 
-                create_tree_view_zeroed_files(&mut tree_view);
+                create_tree_view_similar_videos(&mut tree_view);
 
-                tree_view.connect_button_press_event(opening_double_click_function_zeroed_files);
-                tree_view.connect_key_press_event(opening_enter_function_zeroed_files);
+                let evk = EventControllerKey::new(&tree_view);
+                evk.connect_key_pressed(opening_enter_function_ported);
+                gui_data.main_notebook.evk_tree_view_similar_videos_finder = evk;
 
-                gui_data.main_notebook.tree_view_zeroed_files_finder = tree_view.clone();
-                scrolled_window_zeroed_files_finder.add(&tree_view);
-                scrolled_window_zeroed_files_finder.show_all();
-
-                let gui_data = gui_data.clone();
-                tree_view.connect_key_release_event(move |tree_view, e| {
-                    if let Some(button_number) = e.keycode() {
-                        // Handle delete button
-                        if button_number == 119 {
-                            basic_remove(tree_view, ColumnsZeroedFiles::Name as i32, ColumnsZeroedFiles::Path as i32, ColumnsZeroedFiles::ActiveSelectButton as i32, &gui_data);
-                        }
-                    }
-                    gtk::Inhibit(false)
-                });
+                tree_view.connect_button_press_event(opening_double_click_function);
+
+                tree_view.set_widget_name("tree_view_similar_videos_finder");
+                gui_data.main_notebook.tree_view_similar_videos_finder = tree_view.clone();
+                scrolled_window_similar_videos_finder.add(&tree_view);
+                scrolled_window_similar_videos_finder.show_all();
             }
             // Same Music
             {
@@ -423,51 +344,20 @@
                 let mut tree_view: gtk::TreeView = TreeView::with_model(&list_store);
 
                 tree_view.selection().set_mode(SelectionMode::Multiple);
+                tree_view.selection().set_select_function(Some(Box::new(select_function_same_music)));
 
                 create_tree_view_same_music(&mut tree_view);
-                tree_view.selection().set_select_function(Some(Box::new(select_function_same_music)));
 
-                tree_view.connect_button_press_event(opening_double_click_function_same_music);
-                tree_view.connect_key_press_event(opening_enter_function_same_music);
+                let evk = EventControllerKey::new(&tree_view);
+                evk.connect_key_pressed(opening_enter_function_ported);
+                gui_data.main_notebook.evk_tree_view_same_music_finder = evk;
+
+                tree_view.connect_button_press_event(opening_double_click_function);
 
+                tree_view.set_widget_name("tree_view_same_music_finder");
                 gui_data.main_notebook.tree_view_same_music_finder = tree_view.clone();
                 scrolled_window_same_music_finder.add(&tree_view);
                 scrolled_window_same_music_finder.show_all();
-
-                let gui_data = gui_data.clone();
-                tree_view.connect_key_release_event(move |tree_view, e| {
-                    if let Some(button_number) = e.keycode() {
-                        // Handle delete button
-                        if button_number == 119 {
-                            if tree_view.selection().selected_rows().0.is_empty() {
-                                return gtk::Inhibit(false);
-                            }
-                            if !check_if_can_delete_files(&gui_data.settings.check_button_settings_confirm_deletion, &gui_data.window_main) {
-                                return gtk::Inhibit(false);
-                            }
-                            if gui_data.settings.check_button_settings_confirm_group_deletion.is_active()
-                                && check_if_deleting_all_files_in_group(
-                                    &tree_view.clone(),
-                                    ColumnsSameMusic::Color as i32,
-                                    ColumnsSameMusic::ActiveSelectButton as i32,
-                                    &gui_data.window_main,
-                                    &gui_data.settings.check_button_settings_confirm_group_deletion,
-                                )
-                            {
-                                return gtk::Inhibit(false);
-                            }
-                            tree_remove(
-                                tree_view,
-                                ColumnsSameMusic::Name as i32,
-                                ColumnsSameMusic::Path as i32,
-                                ColumnsSameMusic::Color as i32,
-                                ColumnsSameMusic::ActiveSelectButton as i32,
-                                &gui_data,
-                            );
-                        }
-                    }
-                    gtk::Inhibit(false)
-                });
             }
             // Invalid Symlinks
             {
@@ -487,23 +377,16 @@
 
                 create_tree_view_invalid_symlinks(&mut tree_view);
 
-                tree_view.connect_button_press_event(opening_double_click_function_invalid_symlinks);
-                tree_view.connect_key_press_event(opening_enter_function_invalid_symlinks);
+                let evk = EventControllerKey::new(&tree_view);
+                evk.connect_key_pressed(opening_enter_function_ported);
+                gui_data.main_notebook.evk_tree_view_invalid_symlinks = evk;
+
+                tree_view.connect_button_press_event(opening_double_click_function);
 
+                tree_view.set_widget_name("tree_view_invalid_symlinks");
                 gui_data.main_notebook.tree_view_invalid_symlinks = tree_view.clone();
                 scrolled_window_invalid_symlinks.add(&tree_view);
                 scrolled_window_invalid_symlinks.show_all();
-
-                let gui_data = gui_data.clone();
-                tree_view.connect_key_release_event(move |tree_view, e| {
-                    if let Some(button_number) = e.keycode() {
-                        // Handle delete button
-                        if button_number == 119 {
-                            basic_remove(tree_view, ColumnsInvalidSymlinks::Name as i32, ColumnsInvalidSymlinks::Path as i32, ColumnsInvalidSymlinks::ActiveSelectButton as i32, &gui_data);
-                        }
-                    }
-                    gtk::Inhibit(false)
-                });
             }
             // Broken Files
             {
@@ -516,23 +399,16 @@
 
                 create_tree_view_broken_files(&mut tree_view);
 
-                tree_view.connect_button_press_event(opening_double_click_function_broken_files);
-                tree_view.connect_key_press_event(opening_enter_function_broken_files);
+                let evk = EventControllerKey::new(&tree_view);
+                evk.connect_key_pressed(opening_enter_function_ported);
+                gui_data.main_notebook.evk_tree_view_broken_files = evk;
 
+                tree_view.connect_button_press_event(opening_double_click_function);
+
+                tree_view.set_widget_name("tree_view_broken_files");
                 gui_data.main_notebook.tree_view_broken_files = tree_view.clone();
                 scrolled_window_broken_files.add(&tree_view);
                 scrolled_window_broken_files.show_all();
-
-                let gui_data = gui_data.clone();
-                tree_view.connect_key_release_event(move |tree_view, e| {
-                    if let Some(button_number) = e.keycode() {
-                        // Handle delete button
-                        if button_number == 119 {
-                            basic_remove(tree_view, ColumnsBrokenFiles::Name as i32, ColumnsBrokenFiles::Path as i32, ColumnsBrokenFiles::ActiveSelectButton as i32, &gui_data);
-                        }
-                    }
-                    gtk::Inhibit(false)
-                });
             }
         }
     }
@@ -557,21 +433,19 @@
             scrolled_window_included_directories.add(&tree_view);
             scrolled_window_included_directories.show_all();
 
-            tree_view.connect_key_release_event(move |tree_view, e| {
-                if let Some(button_number) = e.keycode() {
-                    // Handle delete button
-                    if button_number == 119 {
-                        let list_store = get_list_store(tree_view);
-                        let selection = tree_view.selection();
+            let evk = EventControllerKey::new(&tree_view);
+            gui_data.upper_notebook.evk_tree_view_included_directories = evk;
+            gui_data.upper_notebook.evk_tree_view_included_directories.connect_key_released(move |_event_controller_key, _key_value, key_code, _modifier_type| {
+                if key_code == KEY_DELETE {
+                    let list_store = get_list_store(&tree_view);
+                    let selection = tree_view.selection();
 
-                        let (vec_tree_path, _tree_model) = selection.selected_rows();
+                    let (vec_tree_path, _tree_model) = selection.selected_rows();
 
-                        for tree_path in vec_tree_path.iter().rev() {
-                            list_store.remove(&list_store.iter(tree_path).unwrap());
-                        }
+                    for tree_path in vec_tree_path.iter().rev() {
+                        list_store.remove(&list_store.iter(tree_path).unwrap());
                     }
                 }
-                gtk::Inhibit(false)
             });
         }
         // Set Excluded Directory
@@ -589,21 +463,19 @@
             scrolled_window_excluded_directories.add(&tree_view);
             scrolled_window_excluded_directories.show_all();
 
-            tree_view.connect_key_release_event(move |tree_view, e| {
-                if let Some(button_number) = e.keycode() {
-                    // Handle delete button
-                    if button_number == 119 {
-                        let list_store = get_list_store(tree_view);
-                        let selection = tree_view.selection();
+            let evk = EventControllerKey::new(&tree_view);
+            gui_data.upper_notebook.evk_tree_view_excluded_directories = evk;
+            gui_data.upper_notebook.evk_tree_view_excluded_directories.connect_key_released(move |_event_controller_key, _key_value, key_code, _modifier_type| {
+                if key_code == KEY_DELETE {
+                    let list_store = get_list_store(&tree_view);
+                    let selection = tree_view.selection();
 
-                        let (vec_tree_path, _tree_model) = selection.selected_rows();
+                    let (vec_tree_path, _tree_model) = selection.selected_rows();
 
-                        for tree_path in vec_tree_path.iter().rev() {
-                            list_store.remove(&list_store.iter(tree_path).unwrap());
-                        }
+                    for tree_path in vec_tree_path.iter().rev() {
+                        list_store.remove(&list_store.iter(tree_path).unwrap());
                     }
                 }
-                gtk::Inhibit(false)
             });
         }
     }
@@ -613,15 +485,143 @@
         let window_progress = gui_data.progress_window.window_progress.clone();
         let stop_sender = gui_data.stop_sender.clone();
 
-        window_progress.hide_on_delete();
-
-        window_progress.connect_delete_event(move |_e, _y| {
+        window_progress.connect_delete_event(move |_, _| {
             stop_sender.send(()).unwrap();
             gtk::Inhibit(true)
         });
     }
+
+    // Needs to be called after setting tree_view name, probably in GTK 4 this will be easier
+    connect_event_buttons(gui_data);
 }
-fn show_preview(tree_view: &TreeView, text_view_errors: &TextView, check_button_settings_show_preview: &CheckButton, image_preview_similar_images: &Image, column_path: i32, column_name: i32) {
+
+fn connect_event_buttons(gui_data: &GuiData) {
+    // Duplicate
+    {
+        let gui_data_clone = gui_data.clone();
+        let text_view_errors = gui_data.text_view_errors.clone();
+        let check_button_settings_show_preview_duplicates = gui_data.settings.check_button_settings_show_preview_duplicates.clone();
+        let image_preview_duplicates = gui_data.main_notebook.image_preview_duplicates.clone();
+        let preview_path = gui_data.preview_path.clone();
+
+        gui_data.main_notebook.evk_tree_view_duplicate_finder.connect_key_released(move |event_controller_key, _key_value, key_code, _modifier_type| {
+            if key_code == KEY_DELETE {
+                glib::MainContext::default().spawn_local(delete_things(gui_data_clone.clone()));
+            }
+            let preview_path = preview_path.clone();
+            let nb_object = &NOTEBOOKS_INFOS[NotebookMainEnum::Duplicate as usize];
+            show_preview(
+                &event_controller_key.widget().unwrap().downcast::<gtk::TreeView>().unwrap(),
+                &text_view_errors,
+                &check_button_settings_show_preview_duplicates,
+                &image_preview_duplicates,
+                preview_path,
+                nb_object.column_path,
+                nb_object.column_name,
+            );
+        });
+    }
+    // Empty Folder
+    {
+        let gui_data_clone = gui_data.clone();
+        gui_data.main_notebook.evk_tree_view_empty_folder_finder.connect_key_released(move |_event_controller_key, _key_value, key_code, _modifier_type| {
+            if key_code == KEY_DELETE {
+                glib::MainContext::default().spawn_local(delete_things(gui_data_clone.clone()));
+            }
+        });
+    }
+    // Empty Files
+    {
+        let gui_data_clone = gui_data.clone();
+        gui_data.main_notebook.evk_tree_view_empty_files_finder.connect_key_released(move |_event_controller_key, _key_value, key_code, _modifier_type| {
+            if key_code == KEY_DELETE {
+                glib::MainContext::default().spawn_local(delete_things(gui_data_clone.clone()));
+            }
+        });
+    }
+    // Temporary
+    {
+        let gui_data_clone = gui_data.clone();
+        gui_data.main_notebook.evk_tree_view_temporary_files_finder.connect_key_released(move |_event_controller_key, _key_value, key_code, _modifier_type| {
+            if key_code == KEY_DELETE {
+                glib::MainContext::default().spawn_local(delete_things(gui_data_clone.clone()));
+            }
+        });
+    }
+    // Big Files
+    {
+        let gui_data_clone = gui_data.clone();
+        gui_data.main_notebook.evk_tree_view_big_files_finder.connect_key_released(move |_event_controller_key, _key_value, key_code, _modifier_type| {
+            if key_code == KEY_DELETE {
+                glib::MainContext::default().spawn_local(delete_things(gui_data_clone.clone()));
+            }
+        });
+    }
+    // Similar Images
+    {
+        let check_button_settings_show_preview_similar_images = gui_data.settings.check_button_settings_show_preview_similar_images.clone();
+        let text_view_errors = gui_data.text_view_errors.clone();
+        let image_preview_similar_images = gui_data.main_notebook.image_preview_similar_images.clone();
+        let gui_data_clone = gui_data.clone();
+        let preview_path = gui_data.preview_path.clone();
+
+        gui_data.main_notebook.evk_tree_view_similar_images_finder.connect_key_released(move |event_controller_key, _key_value, key_code, _modifier_type| {
+            if key_code == KEY_DELETE {
+                glib::MainContext::default().spawn_local(delete_things(gui_data_clone.clone()));
+            }
+            let preview_path = preview_path.clone();
+            let nb_object = &NOTEBOOKS_INFOS[NotebookMainEnum::SimilarImages as usize];
+            show_preview(
+                &event_controller_key.widget().unwrap().downcast::<gtk::TreeView>().unwrap(),
+                &text_view_errors,
+                &check_button_settings_show_preview_similar_images,
+                &image_preview_similar_images,
+                preview_path,
+                nb_object.column_path,
+                nb_object.column_name,
+            );
+        });
+    }
+    // Empty Folder
+    {
+        let gui_data_clone = gui_data.clone();
+
+        gui_data.main_notebook.evk_tree_view_similar_videos_finder.connect_key_released(move |_event_controller_key, _key_value, key_code, _modifier_type| {
+            if key_code == KEY_DELETE {
+                glib::MainContext::default().spawn_local(delete_things(gui_data_clone.clone()));
+            }
+        });
+    }
+    // Same music
+    {
+        let gui_data_clone = gui_data.clone();
+        gui_data.main_notebook.evk_tree_view_same_music_finder.connect_key_released(move |_event_controller_key, _key_value, key_code, _modifier_type| {
+            if key_code == KEY_DELETE {
+                glib::MainContext::default().spawn_local(delete_things(gui_data_clone.clone()));
+            }
+        });
+    }
+    // Invalid Symlinks
+    {
+        let gui_data_clone = gui_data.clone();
+        gui_data.main_notebook.evk_tree_view_invalid_symlinks.connect_key_released(move |_event_controller_key, _key_value, key_code, _modifier_type| {
+            if key_code == KEY_DELETE {
+                glib::MainContext::default().spawn_local(delete_things(gui_data_clone.clone()));
+            }
+        });
+    }
+    // Broken Files
+    {
+        let gui_data_clone = gui_data.clone();
+        gui_data.main_notebook.evk_tree_view_big_files_finder.connect_key_released(move |_event_controller_key, _key_value, key_code, _modifier_type| {
+            if key_code == KEY_DELETE {
+                glib::MainContext::default().spawn_local(delete_things(gui_data_clone.clone()));
+            }
+        });
+    }
+}
+
+fn show_preview(tree_view: &TreeView, text_view_errors: &TextView, check_button_settings_show_preview: &CheckButton, image_preview_similar_images: &Image, preview_path: Rc<RefCell<String>>, column_path: i32, column_name: i32) {
     let (selected_rows, tree_model) = tree_view.selection().selected_rows();
 
     let mut created_image = false;
@@ -654,6 +654,14 @@
                         break 'dir;
                     }
 
+                    {
+                        let preview_path = preview_path.borrow();
+                        let preview_path = preview_path.deref();
+                        if file_name == preview_path {
+                            return; // Preview is already created, no need to recreate it
+                        }
+                    }
+
                     let img = match image::open(&file_name) {
                         Ok(t) => t,
                         Err(e) => {
@@ -691,6 +699,12 @@
                     }
                     let string_dir = file_dir.to_string_lossy().to_string();
                     image_preview_similar_images.set_from_file(string_dir);
+
+                    {
+                        let mut preview_path = preview_path.borrow_mut();
+                        *preview_path = file_name.to_string();
+                    }
+
                     if let Err(e) = fs::remove_file(&file_dir) {
                         add_text_to_text_view(text_view_errors, format!("Failed to delete temporary image file to {}, reason {}", file_dir.display(), e).as_str());
                         break 'dir;
diff -Naur orig/czkawka_gui/src/main.rs patched/czkawka_gui/src/main.rs
--- orig/czkawka_gui/src/main.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/main.rs	2021-12-04 17:07:36.886961301 +0100
@@ -1,7 +1,36 @@
 // Remove console window in Windows OS
 #![windows_subsystem = "windows"]
 #![allow(clippy::collapsible_else_if)]
+#![allow(clippy::too_many_arguments)]
 
+use gtk::prelude::*;
+
+use czkawka_core::*;
+
+use crate::compute_results::*;
+use crate::connect_about_buttons::*;
+use crate::connect_button_delete::*;
+use crate::connect_button_hardlink::*;
+use crate::connect_button_move::*;
+use crate::connect_button_save::*;
+use crate::connect_button_search::*;
+use crate::connect_button_select::*;
+use crate::connect_button_stop::*;
+use crate::connect_duplicate_buttons::*;
+use crate::connect_header_buttons::*;
+use crate::connect_hide_text_view_errors::*;
+use crate::connect_notebook_tabs::*;
+use crate::connect_popovers::*;
+use crate::connect_progress_window::*;
+use crate::connect_selection_of_directories::*;
+use crate::connect_settings::*;
+use crate::connect_similar_image_size_change::*;
+use crate::gui_data::*;
+use crate::initialize_gui::*;
+use crate::saving_loading::*;
+use crate::tests::validate_notebook_data;
+
+mod compute_results;
 mod connect_about_buttons;
 mod connect_button_delete;
 mod connect_button_hardlink;
@@ -10,8 +39,7 @@
 mod connect_button_search;
 mod connect_button_select;
 mod connect_button_stop;
-mod connect_button_symlink;
-mod connect_compute_results;
+mod connect_duplicate_buttons;
 mod connect_header_buttons;
 mod connect_hide_text_view_errors;
 mod connect_notebook_tabs;
@@ -21,7 +49,6 @@
 mod connect_settings;
 mod connect_similar_image_size_change;
 mod create_tree_view;
-mod double_click_opening;
 mod gui_about;
 mod gui_bottom_buttons;
 mod gui_data;
@@ -34,142 +61,98 @@
 mod help_functions;
 mod initialize_gui;
 mod notebook_enums;
+mod opening_selecting_records;
 mod saving_loading;
 mod taskbar_progress;
 #[cfg(not(target_os = "windows"))]
 mod taskbar_progress_dummy;
 #[cfg(target_os = "windows")]
 mod taskbar_progress_win;
-
-use czkawka_core::*;
-
-use crate::connect_about_buttons::*;
-use crate::connect_button_delete::*;
-use crate::connect_button_hardlink::*;
-use crate::connect_button_move::*;
-use crate::connect_button_save::*;
-use crate::connect_button_search::*;
-use crate::connect_button_select::*;
-use crate::connect_button_stop::*;
-use crate::connect_button_symlink::*;
-use crate::connect_compute_results::*;
-use crate::connect_header_buttons::*;
-use crate::connect_hide_text_view_errors::*;
-use crate::connect_notebook_tabs::*;
-use crate::connect_popovers::*;
-use crate::connect_progress_window::*;
-use crate::connect_selection_of_directories::*;
-use crate::connect_settings::*;
-use crate::connect_similar_image_size_change::*;
-use crate::gui_data::*;
-use crate::initialize_gui::*;
-use crate::saving_loading::*;
-use gtk::prelude::*;
-use std::{env, process};
+mod tests;
 
 fn main() {
-    let mut exit_program_after_initialization: bool = false;
-    // Printing version
-    {
-        let all_arguments: Vec<String> = env::args().skip(1).collect(); // Not need to check program name
-
-        for i in all_arguments {
-            if i == "-v" || i == "--version" {
-                println!("Czkawka GUI {}", CZKAWKA_VERSION);
-                process::exit(0);
-            }
-            if i == "-q" || i == "--quit" {
-                exit_program_after_initialization = true;
-            }
-        }
-    }
-
-    gtk::init().expect("Failed to initialize GTK.");
-
-    let mut gui_data: GuiData = GuiData::new();
-
-    // Used for getting data from thread
-    let (glib_stop_sender, glib_stop_receiver) = glib::MainContext::channel(glib::PRIORITY_DEFAULT);
-
-    // Futures progress report
-    let (futures_sender_duplicate_files, futures_receiver_duplicate_files): (futures::channel::mpsc::UnboundedSender<duplicate::ProgressData>, futures::channel::mpsc::UnboundedReceiver<duplicate::ProgressData>) = futures::channel::mpsc::unbounded();
-    let (futures_sender_empty_files, futures_receiver_empty_files): (futures::channel::mpsc::UnboundedSender<empty_files::ProgressData>, futures::channel::mpsc::UnboundedReceiver<empty_files::ProgressData>) = futures::channel::mpsc::unbounded();
-    let (futures_sender_empty_folder, futures_receiver_empty_folder): (futures::channel::mpsc::UnboundedSender<empty_folder::ProgressData>, futures::channel::mpsc::UnboundedReceiver<empty_folder::ProgressData>) = futures::channel::mpsc::unbounded();
-    let (futures_sender_big_file, futures_receiver_big_file): (futures::channel::mpsc::UnboundedSender<big_file::ProgressData>, futures::channel::mpsc::UnboundedReceiver<big_file::ProgressData>) = futures::channel::mpsc::unbounded();
-    let (futures_sender_same_music, futures_receiver_same_music): (futures::channel::mpsc::UnboundedSender<same_music::ProgressData>, futures::channel::mpsc::UnboundedReceiver<same_music::ProgressData>) = futures::channel::mpsc::unbounded();
-    let (futures_sender_similar_images, futures_receiver_similar_images): (futures::channel::mpsc::UnboundedSender<similar_images::ProgressData>, futures::channel::mpsc::UnboundedReceiver<similar_images::ProgressData>) =
-        futures::channel::mpsc::unbounded();
-    let (futures_sender_temporary, futures_receiver_temporary): (futures::channel::mpsc::UnboundedSender<temporary::ProgressData>, futures::channel::mpsc::UnboundedReceiver<temporary::ProgressData>) = futures::channel::mpsc::unbounded();
-    let (futures_sender_zeroed, futures_receiver_zeroed): (futures::channel::mpsc::UnboundedSender<zeroed::ProgressData>, futures::channel::mpsc::UnboundedReceiver<zeroed::ProgressData>) = futures::channel::mpsc::unbounded();
-    let (futures_sender_invalid_symlinks, futures_receiver_invalid_symlinks): (futures::channel::mpsc::UnboundedSender<invalid_symlinks::ProgressData>, futures::channel::mpsc::UnboundedReceiver<invalid_symlinks::ProgressData>) =
-        futures::channel::mpsc::unbounded();
-    let (futures_sender_broken_files, futures_receiver_broken_files): (futures::channel::mpsc::UnboundedSender<broken_files::ProgressData>, futures::channel::mpsc::UnboundedReceiver<broken_files::ProgressData>) = futures::channel::mpsc::unbounded();
-
-    initialize_gui(&mut gui_data);
-    reset_configuration(&gui_data, false); // Fallback for invalid loading setting project
-    load_configuration(&gui_data, false);
-
-    connect_button_delete(&gui_data);
-    connect_button_save(&gui_data);
-    connect_button_search(
-        &gui_data,
-        glib_stop_sender,
-        futures_sender_duplicate_files,
-        futures_sender_empty_files,
-        futures_sender_empty_folder,
-        futures_sender_big_file,
-        futures_sender_same_music,
-        futures_sender_similar_images,
-        futures_sender_temporary,
-        futures_sender_zeroed,
-        futures_sender_invalid_symlinks,
-        futures_sender_broken_files,
-    );
-    connect_button_select(&gui_data);
-    connect_button_stop(&gui_data);
-    connect_button_symlink(&gui_data);
-    connect_button_hardlink(&gui_data);
-    connect_button_move(&gui_data);
-    connect_notebook_tabs(&gui_data);
-    connect_selection_of_directories(&gui_data);
-    connect_popovers(&gui_data);
-    connect_compute_results(&gui_data, glib_stop_receiver);
-    connect_progress_window(
-        &gui_data,
-        futures_receiver_duplicate_files,
-        futures_receiver_empty_files,
-        futures_receiver_empty_folder,
-        futures_receiver_big_file,
-        futures_receiver_same_music,
-        futures_receiver_similar_images,
-        futures_receiver_temporary,
-        futures_receiver_zeroed,
-        futures_receiver_invalid_symlinks,
-        futures_receiver_broken_files,
-    );
-    connect_hide_text_view_errors(&gui_data);
-    connect_settings(&gui_data);
-    connect_button_about(&gui_data);
-    connect_about_buttons(&gui_data);
-    connect_similar_image_size_change(&gui_data);
+    let application = gtk::Application::builder().application_id("com.github.qarmin").build();
+    application.connect_activate(|application| {
+        let mut gui_data: GuiData = GuiData::new_with_application(application);
+
+        // Used for getting data from thread
+        let (glib_stop_sender, glib_stop_receiver) = glib::MainContext::channel(glib::PRIORITY_DEFAULT);
+
+        // Futures progress report
+        let (futures_sender_duplicate_files, futures_receiver_duplicate_files): (futures::channel::mpsc::UnboundedSender<duplicate::ProgressData>, futures::channel::mpsc::UnboundedReceiver<duplicate::ProgressData>) =
+            futures::channel::mpsc::unbounded();
+        let (futures_sender_empty_files, futures_receiver_empty_files): (futures::channel::mpsc::UnboundedSender<empty_files::ProgressData>, futures::channel::mpsc::UnboundedReceiver<empty_files::ProgressData>) = futures::channel::mpsc::unbounded();
+        let (futures_sender_empty_folder, futures_receiver_empty_folder): (futures::channel::mpsc::UnboundedSender<empty_folder::ProgressData>, futures::channel::mpsc::UnboundedReceiver<empty_folder::ProgressData>) =
+            futures::channel::mpsc::unbounded();
+        let (futures_sender_big_file, futures_receiver_big_file): (futures::channel::mpsc::UnboundedSender<big_file::ProgressData>, futures::channel::mpsc::UnboundedReceiver<big_file::ProgressData>) = futures::channel::mpsc::unbounded();
+        let (futures_sender_same_music, futures_receiver_same_music): (futures::channel::mpsc::UnboundedSender<same_music::ProgressData>, futures::channel::mpsc::UnboundedReceiver<same_music::ProgressData>) = futures::channel::mpsc::unbounded();
+        let (futures_sender_similar_images, futures_receiver_similar_images): (futures::channel::mpsc::UnboundedSender<similar_images::ProgressData>, futures::channel::mpsc::UnboundedReceiver<similar_images::ProgressData>) =
+            futures::channel::mpsc::unbounded();
+        let (futures_sender_similar_videos, futures_receiver_similar_videos): (futures::channel::mpsc::UnboundedSender<similar_videos::ProgressData>, futures::channel::mpsc::UnboundedReceiver<similar_videos::ProgressData>) =
+            futures::channel::mpsc::unbounded();
+        let (futures_sender_temporary, futures_receiver_temporary): (futures::channel::mpsc::UnboundedSender<temporary::ProgressData>, futures::channel::mpsc::UnboundedReceiver<temporary::ProgressData>) = futures::channel::mpsc::unbounded();
+        let (futures_sender_invalid_symlinks, futures_receiver_invalid_symlinks): (futures::channel::mpsc::UnboundedSender<invalid_symlinks::ProgressData>, futures::channel::mpsc::UnboundedReceiver<invalid_symlinks::ProgressData>) =
+            futures::channel::mpsc::unbounded();
+        let (futures_sender_broken_files, futures_receiver_broken_files): (futures::channel::mpsc::UnboundedSender<broken_files::ProgressData>, futures::channel::mpsc::UnboundedReceiver<broken_files::ProgressData>) =
+            futures::channel::mpsc::unbounded();
+
+        initialize_gui(&mut gui_data);
+        validate_notebook_data(&gui_data); // Must be run after initialization of gui, to check if everything was properly setup
+        reset_configuration(false, &gui_data.upper_notebook, &gui_data.settings, &gui_data.text_view_errors); // Fallback for invalid loading setting project
+        load_configuration(false, &gui_data.upper_notebook, &gui_data.settings, &gui_data.text_view_errors, &gui_data.scrolled_window_errors);
+
+        connect_button_delete(&gui_data);
+        connect_button_save(&gui_data);
+        connect_button_search(
+            &gui_data,
+            glib_stop_sender,
+            futures_sender_duplicate_files,
+            futures_sender_empty_files,
+            futures_sender_empty_folder,
+            futures_sender_big_file,
+            futures_sender_same_music,
+            futures_sender_similar_images,
+            futures_sender_similar_videos,
+            futures_sender_temporary,
+            futures_sender_invalid_symlinks,
+            futures_sender_broken_files,
+        );
+        connect_button_select(&gui_data);
+        connect_button_stop(&gui_data);
+        connect_button_hardlink_symlink(&gui_data);
+        connect_button_move(&gui_data);
+        connect_duplicate_buttons(&gui_data);
+        connect_notebook_tabs(&gui_data);
+        connect_selection_of_directories(&gui_data);
+        connect_popovers(&gui_data);
+        connect_compute_results(&gui_data, glib_stop_receiver);
+        connect_progress_window(
+            &gui_data,
+            futures_receiver_duplicate_files,
+            futures_receiver_empty_files,
+            futures_receiver_empty_folder,
+            futures_receiver_big_file,
+            futures_receiver_same_music,
+            futures_receiver_similar_images,
+            futures_receiver_similar_videos,
+            futures_receiver_temporary,
+            futures_receiver_invalid_symlinks,
+            futures_receiver_broken_files,
+        );
+        connect_hide_text_view_errors(&gui_data);
+        connect_settings(&gui_data);
+        connect_button_about(&gui_data);
+        connect_about_buttons(&gui_data);
+        connect_similar_image_size_change(&gui_data);
 
-    // Quit the program when X in main window was clicked
-    {
         let window_main = gui_data.window_main.clone();
         let taskbar_state = gui_data.taskbar_state.clone();
         window_main.connect_delete_event(move |_, _| {
-            save_configuration(&gui_data, false); // Save configuration at exit
-            gtk::main_quit();
+            save_configuration(false, &gui_data.upper_notebook, &gui_data.settings, &gui_data.text_view_errors); // Save configuration at exit
             taskbar_state.borrow_mut().release();
             Inhibit(false)
         });
-    }
-
-    // We start the gtk main loop.
-    gtk::main();
+    });
 
-    // Quiting if quit flag was provided
-    if exit_program_after_initialization {
-        gtk::main_quit();
-    }
+    application.run();
 }
diff -Naur orig/czkawka_gui/src/notebook_enums.rs patched/czkawka_gui/src/notebook_enums.rs
--- orig/czkawka_gui/src/notebook_enums.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/notebook_enums.rs	2021-12-04 17:07:36.886961301 +0100
@@ -10,11 +10,12 @@
     EmptyFiles,
     Temporary,
     SimilarImages,
+    SimilarVideos,
     SameMusic,
-    Zeroed,
     Symlinks,
     BrokenFiles,
 }
+
 pub fn to_notebook_main_enum(notebook_number: u32) -> NotebookMainEnum {
     match notebook_number {
         0 => NotebookMainEnum::Duplicate,
@@ -23,13 +24,14 @@
         3 => NotebookMainEnum::EmptyFiles,
         4 => NotebookMainEnum::Temporary,
         5 => NotebookMainEnum::SimilarImages,
-        6 => NotebookMainEnum::SameMusic,
-        7 => NotebookMainEnum::Zeroed,
+        6 => NotebookMainEnum::SimilarVideos,
+        7 => NotebookMainEnum::SameMusic,
         8 => NotebookMainEnum::Symlinks,
         9 => NotebookMainEnum::BrokenFiles,
         _ => panic!("Invalid Notebook Tab"),
     }
 }
+
 pub fn get_all_main_tabs() -> [NotebookMainEnum; NUMBER_OF_NOTEBOOK_MAIN_TABS] {
     [
         to_notebook_main_enum(0),
@@ -52,6 +54,7 @@
     ExcludedItems,
     AllowedExtensions,
 }
+
 pub fn to_notebook_upper_enum(notebook_number: u32) -> NotebookUpperEnum {
     match notebook_number {
         0 => NotebookUpperEnum::IncludedDirectories,
@@ -61,6 +64,7 @@
         _ => panic!("Invalid Upper Notebook Tab"),
     }
 }
+
 pub fn get_all_upper_tabs() -> [NotebookUpperEnum; NUMBER_OF_NOTEBOOK_UPPER_TABS] {
     [to_notebook_upper_enum(0), to_notebook_upper_enum(1), to_notebook_upper_enum(2), to_notebook_upper_enum(3)]
 }
diff -Naur orig/czkawka_gui/src/opening_selecting_records.rs patched/czkawka_gui/src/opening_selecting_records.rs
--- orig/czkawka_gui/src/opening_selecting_records.rs	1970-01-01 01:00:00.000000000 +0100
+++ patched/czkawka_gui/src/opening_selecting_records.rs	2021-12-04 17:07:36.886961301 +0100
@@ -0,0 +1,126 @@
+use crate::help_functions::*;
+use gdk::ModifierType;
+use gtk::prelude::*;
+
+// TODO add option to open files and folders from context menu activated by pressing ONCE with right mouse button
+
+pub fn opening_enter_function_ported(event_controller: &gtk::EventControllerKey, _key_value: u32, key_code: u32, _modifier_type: ModifierType) -> bool {
+    let tree_view = event_controller.widget().unwrap().downcast::<gtk::TreeView>().unwrap();
+    #[cfg(debug_assertions)]
+    {
+        println!("key_code {}", key_code);
+    }
+
+    let nt_object = get_notebook_object_from_tree_view(&tree_view);
+    handle_tree_keypress(&tree_view, key_code, nt_object.column_name, nt_object.column_path, nt_object.column_selection);
+    false // True catches signal, and don't send it to function, e.g. up button is catched and don't move selection
+}
+pub fn opening_double_click_function(tree_view: &gtk::TreeView, event: &gdk::EventButton) -> gtk::Inhibit {
+    let nt_object = get_notebook_object_from_tree_view(tree_view);
+    if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 1 {
+        common_open_function(tree_view, nt_object.column_name, nt_object.column_path, OpenMode::PathAndName);
+    } else if event.event_type() == gdk::EventType::DoubleButtonPress && event.button() == 3 {
+        common_open_function(tree_view, nt_object.column_name, nt_object.column_path, OpenMode::OnlyPath);
+    }
+    gtk::Inhibit(false)
+}
+
+enum OpenMode {
+    OnlyPath,
+    PathAndName,
+}
+
+fn common_mark_function(tree_view: &gtk::TreeView, column_name: i32) {
+    let selection = tree_view.selection();
+    let (selected_rows, tree_model) = selection.selected_rows();
+
+    let model = get_list_store(tree_view);
+
+    for tree_path in selected_rows.iter().rev() {
+        let value = !tree_model.value(&tree_model.iter(tree_path).unwrap(), column_name).get::<bool>().unwrap();
+        model.set_value(&tree_model.iter(tree_path).unwrap(), column_name as u32, &value.to_value());
+    }
+}
+
+fn common_open_function(tree_view: &gtk::TreeView, column_name: i32, column_path: i32, opening_mode: OpenMode) {
+    let selection = tree_view.selection();
+    let (selected_rows, tree_model) = selection.selected_rows();
+
+    for tree_path in selected_rows.iter().rev() {
+        let end_path;
+        let name = tree_model.value(&tree_model.iter(tree_path).unwrap(), column_name).get::<String>().unwrap();
+        let path = tree_model.value(&tree_model.iter(tree_path).unwrap(), column_path).get::<String>().unwrap();
+
+        match opening_mode {
+            OpenMode::OnlyPath => {
+                end_path = path;
+            }
+            OpenMode::PathAndName => {
+                end_path = format!("{}/{}", path, name);
+            }
+        }
+
+        open::that_in_background(&end_path);
+
+        // if let Err(e) = open::that(&end_path) {
+        //     println!("Failed to open {} - Error {}", end_path, e);
+        // }
+    }
+}
+
+fn handle_tree_keypress(tree_view: &gtk::TreeView, key_code: u32, name_column: i32, path_column: i32, mark_column: i32) {
+    match key_code {
+        KEY_ENTER => {
+            // Enter
+            common_open_function(tree_view, name_column, path_column, OpenMode::PathAndName);
+        }
+        KEY_SPACE => {
+            // Space
+            common_mark_function(tree_view, mark_column);
+        }
+        _ => {}
+    }
+}
+
+pub fn select_function_duplicates(_tree_selection: &gtk::TreeSelection, tree_model: &gtk::TreeModel, tree_path: &gtk::TreePath, _is_path_currently_selected: bool) -> bool {
+    // let name = tree_model.value(&tree_model.iter(tree_path).unwrap(),ColumnsDuplicates::Name as i32).get::<String>().unwrap();
+    // let path = tree_model.value(&tree_model.iter(tree_path).unwrap(), ColumnsDuplicates::Path as i32).get::<String>().unwrap();
+    // let modification = tree_model.value(&tree_model.iter(tree_path).unwrap(),ColumnsDuplicates::Modification as i32).get::<String>().unwrap();
+    let color = tree_model.value(&tree_model.iter(tree_path).unwrap(), ColumnsDuplicates::Color as i32).get::<String>().unwrap();
+
+    if color == HEADER_ROW_COLOR {
+        return false;
+    }
+
+    true
+}
+
+pub fn select_function_same_music(_tree_selection: &gtk::TreeSelection, tree_model: &gtk::TreeModel, tree_path: &gtk::TreePath, _is_path_currently_selected: bool) -> bool {
+    let color = tree_model.value(&tree_model.iter(tree_path).unwrap(), ColumnsSameMusic::Color as i32).get::<String>().unwrap();
+
+    if color == HEADER_ROW_COLOR {
+        return false;
+    }
+
+    true
+}
+
+pub fn select_function_similar_images(_tree_selection: &gtk::TreeSelection, tree_model: &gtk::TreeModel, tree_path: &gtk::TreePath, _is_path_currently_selected: bool) -> bool {
+    let color = tree_model.value(&tree_model.iter(tree_path).unwrap(), ColumnsSimilarImages::Color as i32).get::<String>().unwrap();
+
+    if color == HEADER_ROW_COLOR {
+        return false;
+    }
+
+    true
+}
+
+pub fn select_function_similar_videos(_tree_selection: &gtk::TreeSelection, tree_model: &gtk::TreeModel, tree_path: &gtk::TreePath, _is_path_currently_selected: bool) -> bool {
+    let color = tree_model.value(&tree_model.iter(tree_path).unwrap(), ColumnsSimilarVideos::Color as i32).get::<String>().unwrap();
+
+    if color == HEADER_ROW_COLOR {
+        return false;
+    }
+
+    true
+}
diff -Naur orig/czkawka_gui/src/saving_loading.rs patched/czkawka_gui/src/saving_loading.rs
--- orig/czkawka_gui/src/saving_loading.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/saving_loading.rs	2021-12-04 17:07:36.886961301 +0100
@@ -1,19 +1,22 @@
-use crate::gui_data::*;
-use crate::help_functions::*;
-use directories_next::ProjectDirs;
-use gtk::prelude::*;
 use std::fs::File;
 use std::io::Write;
 use std::path::Path;
 use std::{env, fs};
 
-// TODO add more settings, maybe to different dialog window
+use directories_next::ProjectDirs;
+use gtk::prelude::*;
+use gtk::{ScrolledWindow, TextView};
+
+use crate::gui_settings::GuiSettings;
+use crate::gui_upper_notepad::GuiUpperNotebook;
+use crate::help_functions::*;
 
+// TODO organize this better, add specific functions that will allow to load from files specific strings
 const SAVE_FILE_NAME: &str = "czkawka_gui_config.txt";
 
-pub fn save_configuration(gui_data: &GuiData, manual_execution: bool) {
-    let check_button_settings_save_at_exit = gui_data.settings.check_button_settings_save_at_exit.clone();
-    let text_view_errors = gui_data.text_view_errors.clone();
+pub fn save_configuration(manual_execution: bool, upper_notebook: &GuiUpperNotebook, settings: &GuiSettings, text_view_errors: &TextView) {
+    let check_button_settings_save_at_exit = settings.check_button_settings_save_at_exit.clone();
+    let text_view_errors = text_view_errors.clone();
 
     reset_text_view(&text_view_errors);
 
@@ -40,7 +43,7 @@
 
         //// Included Directories
         data_to_save.push("--included_directories:".to_string());
-        let tree_view_included_directories = gui_data.upper_notebook.tree_view_included_directories.clone();
+        let tree_view_included_directories = upper_notebook.tree_view_included_directories.clone();
         let list_store = get_list_store(&tree_view_included_directories);
         if let Some(iter) = list_store.iter_first() {
             loop {
@@ -53,7 +56,7 @@
 
         //// Excluded Directories
         data_to_save.push("--excluded_directories:".to_string());
-        let tree_view_excluded_directories = gui_data.upper_notebook.tree_view_excluded_directories.clone();
+        let tree_view_excluded_directories = upper_notebook.tree_view_excluded_directories.clone();
         let list_store = get_list_store(&tree_view_excluded_directories);
         if let Some(iter) = list_store.iter_first() {
             loop {
@@ -67,7 +70,7 @@
         {
             //// Excluded Items
             data_to_save.push("--excluded_items:".to_string());
-            let entry_excluded_items = gui_data.upper_notebook.entry_excluded_items.clone();
+            let entry_excluded_items = upper_notebook.entry_excluded_items.clone();
             for item in entry_excluded_items.text().split(',') {
                 if item.trim().is_empty() {
                     continue;
@@ -77,7 +80,7 @@
 
             //// Allowed extensions
             data_to_save.push("--allowed_extensions:".to_string());
-            let entry_allowed_extensions = gui_data.upper_notebook.entry_allowed_extensions.clone();
+            let entry_allowed_extensions = upper_notebook.entry_allowed_extensions.clone();
             for extension in entry_allowed_extensions.text().split(',') {
                 if extension.trim().is_empty() {
                     continue;
@@ -87,58 +90,83 @@
 
             //// Save at exit
             data_to_save.push("--save_at_exit:".to_string());
-            let check_button_settings_save_at_exit = gui_data.settings.check_button_settings_save_at_exit.clone();
+            let check_button_settings_save_at_exit = settings.check_button_settings_save_at_exit.clone();
             data_to_save.push(check_button_settings_save_at_exit.is_active().to_string());
 
             //// Load at start
             data_to_save.push("--load_at_start:".to_string());
-            let check_button_settings_load_at_start = gui_data.settings.check_button_settings_load_at_start.clone();
+            let check_button_settings_load_at_start = settings.check_button_settings_load_at_start.clone();
             data_to_save.push(check_button_settings_load_at_start.is_active().to_string());
 
             //// Confirm deletion of files
             data_to_save.push("--confirm_deletion:".to_string());
-            let check_button_settings_confirm_deletion = gui_data.settings.check_button_settings_confirm_deletion.clone();
+            let check_button_settings_confirm_deletion = settings.check_button_settings_confirm_deletion.clone();
             data_to_save.push(check_button_settings_confirm_deletion.is_active().to_string());
 
             //// Confirm deletion of all files in group
             data_to_save.push("--confirm_group_deletion:".to_string());
-            let check_button_settings_confirm_group_deletion = gui_data.settings.check_button_settings_confirm_group_deletion.clone();
+            let check_button_settings_confirm_group_deletion = settings.check_button_settings_confirm_group_deletion.clone();
             data_to_save.push(check_button_settings_confirm_group_deletion.is_active().to_string());
 
             //// Show image previews in similar images
             data_to_save.push("--show_previews_similar_images:".to_string());
-            let check_button_settings_show_preview_similar_images = gui_data.settings.check_button_settings_show_preview_similar_images.clone();
+            let check_button_settings_show_preview_similar_images = settings.check_button_settings_show_preview_similar_images.clone();
             data_to_save.push(check_button_settings_show_preview_similar_images.is_active().to_string());
 
             //// Show image previews in duplicates
             data_to_save.push("--show_previews_duplicates:".to_string());
-            let check_button_settings_show_preview_duplicates = gui_data.settings.check_button_settings_show_preview_duplicates.clone();
+            let check_button_settings_show_preview_duplicates = settings.check_button_settings_show_preview_duplicates.clone();
             data_to_save.push(check_button_settings_show_preview_duplicates.is_active().to_string());
 
             //// Show bottom text panel with errors
             data_to_save.push("--bottom_text_panel:".to_string());
-            let check_button_settings_show_text_view = gui_data.settings.check_button_settings_show_text_view.clone();
+            let check_button_settings_show_text_view = settings.check_button_settings_show_text_view.clone();
             data_to_save.push(check_button_settings_show_text_view.is_active().to_string());
 
             //// Hide/Show hard linked files, with same inodes
             data_to_save.push("--hide_hard_links:".to_string());
-            let check_button_settings_hide_hard_links = gui_data.settings.check_button_settings_hide_hard_links.clone();
+            let check_button_settings_hide_hard_links = settings.check_button_settings_hide_hard_links.clone();
             data_to_save.push(check_button_settings_hide_hard_links.is_active().to_string());
 
             //// Use cache system
             data_to_save.push("--use_cache:".to_string());
-            let check_button_settings_use_cache = gui_data.settings.check_button_settings_use_cache.clone();
+            let check_button_settings_use_cache = settings.check_button_settings_use_cache.clone();
             data_to_save.push(check_button_settings_use_cache.is_active().to_string());
 
             //// Delete to trash
             data_to_save.push("--use_trash:".to_string());
-            let check_button_settings_use_trash = gui_data.settings.check_button_settings_use_trash.clone();
+            let check_button_settings_use_trash = settings.check_button_settings_use_trash.clone();
             data_to_save.push(check_button_settings_use_trash.is_active().to_string());
 
             //// minimal cache file size
             data_to_save.push("--cache_minimal_file_size:".to_string());
-            let entry_settings_cache_file_minimal_size = gui_data.settings.entry_settings_cache_file_minimal_size.clone();
-            data_to_save.push(entry_settings_cache_file_minimal_size.text().as_str().parse::<u64>().unwrap_or(2 * 1024 * 1024).to_string());
+            let entry_settings_cache_file_minimal_size = settings.entry_settings_cache_file_minimal_size.clone();
+            data_to_save.push(entry_settings_cache_file_minimal_size.text().as_str().parse::<u64>().unwrap_or(1024 * 1024 / 4).to_string());
+
+            //// Duplicates, delete outdated entries to trash
+            data_to_save.push("--delete_outdated_entries_duplicates:".to_string());
+            let check_button_settings_duplicates_delete_outdated_cache = settings.check_button_settings_duplicates_delete_outdated_cache.clone();
+            data_to_save.push(check_button_settings_duplicates_delete_outdated_cache.is_active().to_string());
+
+            //// Similar Images, delete outdated entries to trash
+            data_to_save.push("--delete_outdated_entries_similar_images:".to_string());
+            let check_button_settings_similar_images_delete_outdated_cache = settings.check_button_settings_similar_images_delete_outdated_cache.clone();
+            data_to_save.push(check_button_settings_similar_images_delete_outdated_cache.is_active().to_string());
+
+            //// Similar Videos, delete outdated entries to trash
+            data_to_save.push("--delete_outdated_entries_similar_videos:".to_string());
+            let check_button_settings_similar_videos_delete_outdated_cache = settings.check_button_settings_similar_videos_delete_outdated_cache.clone();
+            data_to_save.push(check_button_settings_similar_videos_delete_outdated_cache.is_active().to_string());
+
+            //// Use prehash cache system
+            data_to_save.push("--use_prehash_cache:".to_string());
+            let check_button_duplicates_use_prehash_cache = settings.check_button_duplicates_use_prehash_cache.clone();
+            data_to_save.push(check_button_duplicates_use_prehash_cache.is_active().to_string());
+
+            //// minimal prehash cache file size
+            data_to_save.push("--cache_prehash_minimal_file_size:".to_string());
+            let entry_settings_prehash_cache_file_minimal_size = settings.entry_settings_prehash_cache_file_minimal_size.clone();
+            data_to_save.push(entry_settings_prehash_cache_file_minimal_size.text().as_str().parse::<u64>().unwrap_or(0).to_string());
         }
 
         // Creating/Opening config file
@@ -192,10 +220,15 @@
     UseCache,
     UseTrash,
     CacheMinimalSize,
+    DeleteCacheDuplicates,
+    DeleteCacheSimilarImages,
+    DeleteCacheSimilarVideos,
+    UsePrehashCache,
+    CachePrehashMinimalSize,
 }
 
-pub fn load_configuration(gui_data: &GuiData, manual_execution: bool) {
-    let text_view_errors = gui_data.text_view_errors.clone();
+pub fn load_configuration(manual_execution: bool, upper_notebook: &GuiUpperNotebook, settings: &GuiSettings, text_view_errors: &TextView, scrolled_window_errors: &ScrolledWindow) {
+    let text_view_errors = text_view_errors.clone();
 
     reset_text_view(&text_view_errors);
 
@@ -240,6 +273,11 @@
         let mut use_cache: bool = true;
         let mut use_trash: bool = false;
         let mut cache_minimal_size: u64 = 2 * 1024 * 1024;
+        let mut delete_outdated_cache_dupliactes: bool = true;
+        let mut delete_outdated_cache_similar_images: bool = true;
+        let mut delete_outdated_cache_similar_videos: bool = false;
+        let mut use_prehash_cache: bool = false;
+        let mut cache_prehash_minimal_size: u64 = 0;
 
         let mut current_type = TypeOfLoadedData::None;
         for (line_number, line) in loaded_data.replace("\r\n", "\n").split('\n').enumerate() {
@@ -277,6 +315,16 @@
                 current_type = TypeOfLoadedData::UseTrash;
             } else if line.starts_with("--cache_minimal_file_size") {
                 current_type = TypeOfLoadedData::CacheMinimalSize;
+            } else if line.starts_with("--delete_outdated_entries_duplicates") {
+                current_type = TypeOfLoadedData::DeleteCacheDuplicates;
+            } else if line.starts_with("--delete_outdated_entries_similar_videos") {
+                current_type = TypeOfLoadedData::DeleteCacheSimilarVideos;
+            } else if line.starts_with("--delete_outdated_entries_similar_images") {
+                current_type = TypeOfLoadedData::DeleteCacheSimilarImages;
+            } else if line.starts_with("--use_prehash_cache") {
+                current_type = TypeOfLoadedData::UsePrehashCache;
+            } else if line.starts_with("--cache_prehash_minimal_file_size") {
+                current_type = TypeOfLoadedData::CachePrehashMinimalSize;
             } else if line.starts_with("--") {
                 current_type = TypeOfLoadedData::None;
                 add_text_to_text_view(
@@ -443,6 +491,68 @@
                             );
                         }
                     }
+                    TypeOfLoadedData::DeleteCacheDuplicates => {
+                        let line = line.to_lowercase();
+                        if line == "1" || line == "true" {
+                            delete_outdated_cache_dupliactes = true;
+                        } else if line == "0" || line == "false" {
+                            delete_outdated_cache_dupliactes = false;
+                        } else {
+                            add_text_to_text_view(
+                                &text_view_errors,
+                                format!("Found invalid data in line {} \"{}\" isn't proper value(0/1/true/false) when loading file {:?}", line_number, line, config_file).as_str(),
+                            );
+                        }
+                    }
+                    TypeOfLoadedData::DeleteCacheSimilarImages => {
+                        let line = line.to_lowercase();
+                        if line == "1" || line == "true" {
+                            delete_outdated_cache_similar_images = true;
+                        } else if line == "0" || line == "false" {
+                            delete_outdated_cache_similar_images = false;
+                        } else {
+                            add_text_to_text_view(
+                                &text_view_errors,
+                                format!("Found invalid data in line {} \"{}\" isn't proper value(0/1/true/false) when loading file {:?}", line_number, line, config_file).as_str(),
+                            );
+                        }
+                    }
+                    TypeOfLoadedData::DeleteCacheSimilarVideos => {
+                        let line = line.to_lowercase();
+                        if line == "1" || line == "true" {
+                            delete_outdated_cache_similar_videos = true;
+                        } else if line == "0" || line == "false" {
+                            delete_outdated_cache_similar_videos = false;
+                        } else {
+                            add_text_to_text_view(
+                                &text_view_errors,
+                                format!("Found invalid data in line {} \"{}\" isn't proper value(0/1/true/false) when loading file {:?}", line_number, line, config_file).as_str(),
+                            );
+                        }
+                    }
+                    TypeOfLoadedData::UsePrehashCache => {
+                        let line = line.to_lowercase();
+                        if line == "1" || line == "true" {
+                            use_prehash_cache = true;
+                        } else if line == "0" || line == "false" {
+                            use_prehash_cache = false;
+                        } else {
+                            add_text_to_text_view(
+                                &text_view_errors,
+                                format!("Found invalid data in line {} \"{}\" isn't proper value(0/1/true/false) when loading file {:?}", line_number, line, config_file).as_str(),
+                            );
+                        }
+                    }
+                    TypeOfLoadedData::CachePrehashMinimalSize => {
+                        if let Ok(number) = line.parse::<u64>() {
+                            cache_prehash_minimal_size = number;
+                        } else {
+                            add_text_to_text_view(
+                                &text_view_errors,
+                                format!("Found invalid data in line {} \"{}\" isn't proper value(u64) when loading file {:?}", line_number, line, config_file).as_str(),
+                            );
+                        }
+                    }
                 }
             }
         }
@@ -450,53 +560,59 @@
         // Setting data
         if manual_execution || loading_at_start {
             //// Included Directories
-            let tree_view_included_directories = gui_data.upper_notebook.tree_view_included_directories.clone();
+            let tree_view_included_directories = upper_notebook.tree_view_included_directories.clone();
             let list_store = get_list_store(&tree_view_included_directories);
             list_store.clear();
 
             for directory in included_directories {
-                let values: [(u32, &dyn ToValue); 1] = [(0, &directory)];
+                let values: [(u32, &dyn ToValue); 1] = [(ColumnsDirectory::Path as u32, &directory)];
                 list_store.set(&list_store.append(), &values);
             }
 
             //// Exclude Directories
-            let tree_view_excluded_directories = gui_data.upper_notebook.tree_view_excluded_directories.clone();
+            let tree_view_excluded_directories = upper_notebook.tree_view_excluded_directories.clone();
             let list_store = get_list_store(&tree_view_excluded_directories);
             list_store.clear();
 
             for directory in excluded_directories {
-                let values: [(u32, &dyn ToValue); 1] = [(0, &directory)];
+                let values: [(u32, &dyn ToValue); 1] = [(ColumnsDirectory::Path as u32, &directory)];
                 list_store.set(&list_store.append(), &values);
             }
 
             //// Excluded Items
-            let entry_excluded_items = gui_data.upper_notebook.entry_excluded_items.clone();
+            let entry_excluded_items = upper_notebook.entry_excluded_items.clone();
             entry_excluded_items.set_text(excluded_items.iter().map(|e| e.to_string() + ",").collect::<String>().as_str());
 
             //// Allowed extensions
-            let entry_allowed_extensions = gui_data.upper_notebook.entry_allowed_extensions.clone();
+            let entry_allowed_extensions = upper_notebook.entry_allowed_extensions.clone();
             entry_allowed_extensions.set_text(allowed_extensions.iter().map(|e| e.to_string() + ",").collect::<String>().as_str());
 
             //// Buttons
-            gui_data.settings.check_button_settings_load_at_start.set_active(loading_at_start);
-            gui_data.settings.check_button_settings_save_at_exit.set_active(saving_at_exit);
-            gui_data.settings.check_button_settings_confirm_deletion.set_active(confirm_deletion);
-            gui_data.settings.check_button_settings_confirm_group_deletion.set_active(confirm_group_deletion);
-            gui_data.settings.check_button_settings_show_preview_similar_images.set_active(show_previews_similar_images);
-            gui_data.settings.check_button_settings_show_preview_duplicates.set_active(show_previews_duplicates);
+            settings.check_button_settings_load_at_start.set_active(loading_at_start);
+            settings.check_button_settings_save_at_exit.set_active(saving_at_exit);
+            settings.check_button_settings_confirm_deletion.set_active(confirm_deletion);
+            settings.check_button_settings_confirm_group_deletion.set_active(confirm_group_deletion);
+            settings.check_button_settings_show_preview_similar_images.set_active(show_previews_similar_images);
+            settings.check_button_settings_show_preview_duplicates.set_active(show_previews_duplicates);
+
+            settings.check_button_settings_similar_videos_delete_outdated_cache.set_active(delete_outdated_cache_similar_videos);
+            settings.check_button_settings_similar_images_delete_outdated_cache.set_active(delete_outdated_cache_similar_images);
+            settings.check_button_settings_duplicates_delete_outdated_cache.set_active(delete_outdated_cache_dupliactes);
 
-            gui_data.settings.check_button_settings_show_text_view.set_active(bottom_text_panel);
+            settings.check_button_settings_show_text_view.set_active(bottom_text_panel);
             if !bottom_text_panel {
-                gui_data.scrolled_window_errors.hide();
+                scrolled_window_errors.hide();
             } else {
-                gui_data.scrolled_window_errors.show();
+                scrolled_window_errors.show();
             }
-            gui_data.settings.check_button_settings_hide_hard_links.set_active(hide_hard_links);
-            gui_data.settings.check_button_settings_use_cache.set_active(use_cache);
-            gui_data.settings.check_button_settings_use_trash.set_active(use_trash);
-            gui_data.settings.entry_settings_cache_file_minimal_size.set_text(cache_minimal_size.to_string().as_str());
+            settings.check_button_settings_hide_hard_links.set_active(hide_hard_links);
+            settings.check_button_settings_use_cache.set_active(use_cache);
+            settings.check_button_duplicates_use_prehash_cache.set_active(use_prehash_cache);
+            settings.check_button_settings_use_trash.set_active(use_trash);
+            settings.entry_settings_cache_file_minimal_size.set_text(cache_minimal_size.to_string().as_str());
+            settings.entry_settings_prehash_cache_file_minimal_size.set_text(cache_prehash_minimal_size.to_string().as_str());
         } else {
-            gui_data.settings.check_button_settings_load_at_start.set_active(false);
+            settings.check_button_settings_load_at_start.set_active(false);
         }
 
         if manual_execution {
@@ -507,15 +623,15 @@
     }
 }
 
-pub fn reset_configuration(gui_data: &GuiData, manual_clearing: bool) {
+pub fn reset_configuration(manual_clearing: bool, upper_notebook: &GuiUpperNotebook, settings: &GuiSettings, text_view_errors: &TextView) {
     // TODO Maybe add popup dialog to confirm resetting
-    let text_view_errors = gui_data.text_view_errors.clone();
+    let text_view_errors = text_view_errors.clone();
 
     reset_text_view(&text_view_errors);
 
     // Resetting included directories
     {
-        let tree_view_included_directories = gui_data.upper_notebook.tree_view_included_directories.clone();
+        let tree_view_included_directories = upper_notebook.tree_view_included_directories.clone();
         let list_store = get_list_store(&tree_view_included_directories);
         list_store.clear();
 
@@ -534,24 +650,24 @@
             }
         };
 
-        let values: [(u32, &dyn ToValue); 1] = [(0, &current_dir)];
+        let values: [(u32, &dyn ToValue); 1] = [(ColumnsDirectory::Path as u32, &current_dir)];
         list_store.set(&list_store.append(), &values);
     }
     // Resetting excluded directories
     {
-        let tree_view_excluded_directories = gui_data.upper_notebook.tree_view_excluded_directories.clone();
+        let tree_view_excluded_directories = upper_notebook.tree_view_excluded_directories.clone();
         let list_store = get_list_store(&tree_view_excluded_directories);
         list_store.clear();
         if cfg!(target_family = "unix") {
             for i in ["/proc", "/dev", "/sys", "/run", "/snap"].iter() {
-                let values: [(u32, &dyn ToValue); 1] = [(0, &i)];
+                let values: [(u32, &dyn ToValue); 1] = [(ColumnsDirectory::Path as u32, &i)];
                 list_store.set(&list_store.append(), &values);
             }
         }
     }
     // Resetting excluded items
     {
-        let entry_excluded_items = gui_data.upper_notebook.entry_excluded_items.clone();
+        let entry_excluded_items = upper_notebook.entry_excluded_items.clone();
         if cfg!(target_family = "unix") {
             entry_excluded_items.set_text("*/.git/*,*/node_modules/*,*/lost+found/*,*/Trash/*,*/.Trash-*/*,*/snap/*,/home/*/.cache/*");
         }
@@ -561,23 +677,28 @@
     }
     // Resetting allowed extensions
     {
-        let entry_allowed_extensions = gui_data.upper_notebook.entry_allowed_extensions.clone();
+        let entry_allowed_extensions = upper_notebook.entry_allowed_extensions.clone();
         entry_allowed_extensions.set_text("");
     }
 
-    // Set settings
+    // Set default settings
     {
-        gui_data.settings.check_button_settings_save_at_exit.set_active(true);
-        gui_data.settings.check_button_settings_load_at_start.set_active(true);
-        gui_data.settings.check_button_settings_confirm_deletion.set_active(true);
-        gui_data.settings.check_button_settings_confirm_group_deletion.set_active(true);
-        gui_data.settings.check_button_settings_show_preview_similar_images.set_active(true);
-        gui_data.settings.check_button_settings_show_preview_duplicates.set_active(true);
-        gui_data.settings.check_button_settings_show_text_view.set_active(true);
-        gui_data.settings.check_button_settings_hide_hard_links.set_active(true);
-        gui_data.settings.check_button_settings_use_cache.set_active(true);
-        gui_data.settings.check_button_settings_use_trash.set_active(false);
-        gui_data.settings.entry_settings_cache_file_minimal_size.set_text("2097152");
+        settings.check_button_settings_save_at_exit.set_active(true);
+        settings.check_button_settings_load_at_start.set_active(true);
+        settings.check_button_settings_confirm_deletion.set_active(true);
+        settings.check_button_settings_confirm_group_deletion.set_active(true);
+        settings.check_button_settings_show_preview_similar_images.set_active(true);
+        settings.check_button_settings_show_preview_duplicates.set_active(true);
+        settings.check_button_settings_show_text_view.set_active(true);
+        settings.check_button_settings_hide_hard_links.set_active(true);
+        settings.check_button_settings_use_cache.set_active(true);
+        settings.check_button_settings_use_trash.set_active(false);
+        settings.entry_settings_cache_file_minimal_size.set_text("257144");
+        settings.check_button_settings_similar_videos_delete_outdated_cache.set_active(false);
+        settings.check_button_settings_similar_images_delete_outdated_cache.set_active(true);
+        settings.check_button_settings_duplicates_delete_outdated_cache.set_active(true);
+        settings.check_button_duplicates_use_prehash_cache.set_active(false);
+        settings.entry_settings_prehash_cache_file_minimal_size.set_text("0");
     }
     if manual_clearing {
         add_text_to_text_view(&text_view_errors, "Current configuration was cleared.");
diff -Naur orig/czkawka_gui/src/taskbar_progress_dummy.rs patched/czkawka_gui/src/taskbar_progress_dummy.rs
--- orig/czkawka_gui/src/taskbar_progress_dummy.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/taskbar_progress_dummy.rs	2021-12-04 17:07:36.886961301 +0100
@@ -1,8 +1,10 @@
 #![allow(clippy::upper_case_acronyms)]
 #![cfg(not(target_os = "windows"))]
+
 use std::convert::From;
 
 enum HWND__ {}
+
 type HWND = *mut HWND__;
 
 #[allow(non_camel_case_types, dead_code)]
diff -Naur orig/czkawka_gui/src/taskbar_progress.rs patched/czkawka_gui/src/taskbar_progress.rs
--- orig/czkawka_gui/src/taskbar_progress.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/taskbar_progress.rs	2021-12-04 17:07:36.886961301 +0100
@@ -1,5 +1,4 @@
-#[cfg(target_os = "windows")]
-pub use crate::taskbar_progress_win::{tbp_flags, TaskbarProgress};
-
 #[cfg(not(target_os = "windows"))]
 pub use crate::taskbar_progress_dummy::{tbp_flags, TaskbarProgress};
+#[cfg(target_os = "windows")]
+pub use crate::taskbar_progress_win::{tbp_flags, TaskbarProgress};
diff -Naur orig/czkawka_gui/src/taskbar_progress_win.rs patched/czkawka_gui/src/taskbar_progress_win.rs
--- orig/czkawka_gui/src/taskbar_progress_win.rs	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/src/taskbar_progress_win.rs	2021-12-04 17:07:36.886961301 +0100
@@ -1,8 +1,10 @@
 #![cfg(target_os = "windows")]
 extern crate winapi;
+
 use std::cell::RefCell;
 use std::convert::From;
 use std::ptr;
+
 use winapi::ctypes::c_void;
 use winapi::shared::windef::HWND;
 use winapi::shared::winerror::{E_POINTER, S_OK};
diff -Naur orig/czkawka_gui/src/tests.rs patched/czkawka_gui/src/tests.rs
--- orig/czkawka_gui/src/tests.rs	1970-01-01 01:00:00.000000000 +0100
+++ patched/czkawka_gui/src/tests.rs	2021-12-04 17:07:36.886961301 +0100
@@ -0,0 +1,37 @@
+use crate::help_functions::{get_notebook_enum_from_tree_view, NOTEBOOKS_INFOS};
+use crate::notebook_enums::{to_notebook_main_enum, NUMBER_OF_NOTEBOOK_MAIN_TABS};
+use crate::GuiData;
+
+pub fn validate_notebook_data(gui_data: &GuiData) {
+    // Test treeviews names, each treeview should have set name same as variable name
+    let tree_view_arr: [&gtk::TreeView; NUMBER_OF_NOTEBOOK_MAIN_TABS] = [
+        &gui_data.main_notebook.tree_view_duplicate_finder,
+        &gui_data.main_notebook.tree_view_similar_videos_finder,
+        &gui_data.main_notebook.tree_view_temporary_files_finder,
+        &gui_data.main_notebook.tree_view_big_files_finder,
+        &gui_data.main_notebook.tree_view_empty_files_finder,
+        &gui_data.main_notebook.tree_view_broken_files,
+        &gui_data.main_notebook.tree_view_empty_folder_finder,
+        &gui_data.main_notebook.tree_view_same_music_finder,
+        &gui_data.main_notebook.tree_view_similar_images_finder,
+        &gui_data.main_notebook.tree_view_invalid_symlinks,
+    ];
+    for (_i, item) in tree_view_arr.iter().enumerate() {
+        // println!("Checking {} element", i);
+
+        get_notebook_enum_from_tree_view(item);
+    }
+
+    // This test main info about notebooks
+    // Should have same order as notebook enum types
+    for (i, item) in NOTEBOOKS_INFOS.iter().enumerate() {
+        let en = to_notebook_main_enum(i as u32);
+        assert_eq!(item.notebook_type, en);
+    }
+
+    // Tests if data returned from array get_notebook_enum_from_tree_view are in right
+    for (i, item) in gui_data.main_notebook.get_main_tree_views().iter().enumerate() {
+        let nb_en = get_notebook_enum_from_tree_view(item);
+        assert_eq!(to_notebook_main_enum(i as u32), nb_en);
+    }
+}
diff -Naur orig/czkawka_gui/ui/about_dialog.glade patched/czkawka_gui/ui/about_dialog.glade
--- orig/czkawka_gui/ui/about_dialog.glade	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/ui/about_dialog.glade	2021-12-04 17:07:36.886961301 +0100
@@ -27,7 +27,7 @@
 
 -->
 <interface>
-  <requires lib="gtk+" version="3.22"/>
+  <requires lib="gtk+" version="3.24"/>
   <!-- interface-license-type mit -->
   <!-- interface-name Czkawka -->
   <!-- interface-description Czkawka is simple and fast app to find duplicates, empty folders, similar images etc. -->
diff -Naur orig/czkawka_gui/ui/main_window.glade patched/czkawka_gui/ui/main_window.glade
--- orig/czkawka_gui/ui/main_window.glade	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/ui/main_window.glade	2021-12-04 17:07:36.886961301 +0100
@@ -27,7 +27,7 @@
 
 -->
 <interface>
-  <requires lib="gtk+" version="3.22"/>
+  <requires lib="gtk+" version="3.24"/>
   <!-- interface-license-type mit -->
   <!-- interface-name Czkawka -->
   <!-- interface-description Czkawka is simple and fast app to find duplicates, empty folders, similar images etc. -->
@@ -229,6 +229,7 @@
                         <property name="visible">True</property>
                         <property name="can-focus">True</property>
                         <property name="receives-default">False</property>
+                        <property name="margin-end">5</property>
                         <property name="active">True</property>
                         <property name="draw-indicator">True</property>
                       </object>
@@ -479,6 +480,8 @@
                       <object class="GtkBox">
                         <property name="visible">True</property>
                         <property name="can-focus">False</property>
+                        <property name="margin-start">5</property>
+                        <property name="margin-end">5</property>
                         <property name="spacing">5</property>
                         <child>
                           <object class="GtkLabel">
@@ -585,6 +588,8 @@
                       <object class="GtkBox">
                         <property name="visible">True</property>
                         <property name="can-focus">False</property>
+                        <property name="margin-start">5</property>
+                        <property name="margin-end">5</property>
                         <property name="spacing">5</property>
                         <child>
                           <object class="GtkLabel">
@@ -657,6 +662,9 @@
                           <object class="GtkBox">
                             <property name="visible">True</property>
                             <property name="can-focus">False</property>
+                            <property name="margin-start">5</property>
+                            <property name="margin-end">5</property>
+                            <property name="margin-top">2</property>
                             <child>
                               <object class="GtkLabel">
                                 <property name="visible">True</property>
@@ -685,21 +693,6 @@
                               </packing>
                             </child>
                             <child>
-                              <object class="GtkRadioButton" id="radio_button_duplicates_hashmb">
-                                <property name="label" translatable="yes">HashMb</property>
-                                <property name="visible">True</property>
-                                <property name="can-focus">True</property>
-                                <property name="receives-default">False</property>
-                                <property name="draw-indicator">True</property>
-                                <property name="group">radio_button_duplicates_hash</property>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="fill">True</property>
-                                <property name="position">2</property>
-                              </packing>
-                            </child>
-                            <child>
                               <object class="GtkRadioButton" id="radio_button_duplicates_size">
                                 <property name="label" translatable="yes">Size</property>
                                 <property name="visible">True</property>
@@ -740,6 +733,8 @@
                           <object class="GtkBox">
                             <property name="visible">True</property>
                             <property name="can-focus">False</property>
+                            <property name="margin-start">5</property>
+                            <property name="margin-end">5</property>
                             <child>
                               <object class="GtkLabel">
                                 <property name="visible">True</property>
@@ -808,6 +803,9 @@
                           <object class="GtkBox">
                             <property name="visible">True</property>
                             <property name="can-focus">False</property>
+                            <property name="margin-start">5</property>
+                            <property name="margin-end">5</property>
+                            <property name="margin-top">2</property>
                             <property name="spacing">8</property>
                             <child>
                               <object class="GtkLabel">
@@ -886,6 +884,7 @@
                           <object class="GtkScrolledWindow" id="scrolled_window_duplicate_finder">
                             <property name="visible">True</property>
                             <property name="can-focus">True</property>
+                            <property name="margin-end">5</property>
                             <property name="shadow-type">in</property>
                             <child>
                               <placeholder/>
@@ -963,6 +962,9 @@
                       <object class="GtkBox">
                         <property name="visible">True</property>
                         <property name="can-focus">False</property>
+                        <property name="margin-start">5</property>
+                        <property name="margin-end">5</property>
+                        <property name="margin-top">2</property>
                         <property name="spacing">8</property>
                         <child>
                           <object class="GtkLabel">
@@ -1090,6 +1092,9 @@
                           <object class="GtkBox">
                             <property name="visible">True</property>
                             <property name="can-focus">False</property>
+                            <property name="margin-start">5</property>
+                            <property name="margin-end">5</property>
+                            <property name="margin-top">2</property>
                             <child>
                               <object class="GtkLabel">
                                 <property name="visible">True</property>
@@ -1192,6 +1197,8 @@
                           <object class="GtkBox">
                             <property name="visible">True</property>
                             <property name="can-focus">False</property>
+                            <property name="margin-start">5</property>
+                            <property name="margin-end">5</property>
                             <child>
                               <object class="GtkLabel">
                                 <property name="visible">True</property>
@@ -1294,6 +1301,8 @@
                           <object class="GtkBox">
                             <property name="visible">True</property>
                             <property name="can-focus">False</property>
+                            <property name="margin-start">5</property>
+                            <property name="margin-end">5</property>
                             <child>
                               <object class="GtkLabel">
                                 <property name="visible">True</property>
@@ -1307,50 +1316,64 @@
                               </packing>
                             </child>
                             <child>
-                              <object class="GtkRadioButton" id="radio_button_similar_hash_size_4">
-                                <property name="label" translatable="yes">4</property>
+                              <object class="GtkRadioButton" id="radio_button_similar_hash_size_8">
+                                <property name="label" translatable="yes">8</property>
                                 <property name="visible">True</property>
                                 <property name="can-focus">True</property>
                                 <property name="receives-default">False</property>
                                 <property name="active">True</property>
                                 <property name="draw-indicator">True</property>
-                                <property name="group">radio_button_similar_hash_size_8</property>
                               </object>
                               <packing>
                                 <property name="expand">False</property>
                                 <property name="fill">True</property>
-                                <property name="position">1</property>
+                                <property name="position">2</property>
                               </packing>
                             </child>
                             <child>
-                              <object class="GtkRadioButton" id="radio_button_similar_hash_size_8">
-                                <property name="label" translatable="yes">8</property>
+                              <object class="GtkRadioButton" id="radio_button_similar_hash_size_16">
+                                <property name="label" translatable="yes">16</property>
                                 <property name="visible">True</property>
                                 <property name="can-focus">True</property>
                                 <property name="receives-default">False</property>
                                 <property name="active">True</property>
                                 <property name="draw-indicator">True</property>
+                                <property name="group">radio_button_similar_hash_size_8</property>
                               </object>
                               <packing>
                                 <property name="expand">False</property>
                                 <property name="fill">True</property>
-                                <property name="position">2</property>
+                                <property name="position">3</property>
                               </packing>
                             </child>
                             <child>
-                              <object class="GtkRadioButton" id="radio_button_similar_hash_size_16">
-                                <property name="label" translatable="yes">16</property>
+                              <object class="GtkRadioButton" id="radio_button_similar_hash_size_32">
+                                <property name="label" translatable="yes">32</property>
                                 <property name="visible">True</property>
                                 <property name="can-focus">True</property>
                                 <property name="receives-default">False</property>
-                                <property name="active">True</property>
                                 <property name="draw-indicator">True</property>
                                 <property name="group">radio_button_similar_hash_size_8</property>
                               </object>
                               <packing>
                                 <property name="expand">False</property>
                                 <property name="fill">True</property>
-                                <property name="position">3</property>
+                                <property name="position">4</property>
+                              </packing>
+                            </child>
+                            <child>
+                              <object class="GtkRadioButton" id="radio_button_similar_hash_size_64">
+                                <property name="label" translatable="yes">64</property>
+                                <property name="visible">True</property>
+                                <property name="can-focus">True</property>
+                                <property name="receives-default">False</property>
+                                <property name="draw-indicator">True</property>
+                                <property name="group">radio_button_similar_hash_size_8</property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
+                                <property name="position">5</property>
                               </packing>
                             </child>
                           </object>
@@ -1364,6 +1387,8 @@
                           <object class="GtkBox">
                             <property name="visible">True</property>
                             <property name="can-focus">False</property>
+                            <property name="margin-start">5</property>
+                            <property name="margin-end">5</property>
                             <property name="spacing">8</property>
                             <child>
                               <object class="GtkLabel">
@@ -1442,6 +1467,9 @@
                           <object class="GtkBox">
                             <property name="visible">True</property>
                             <property name="can-focus">False</property>
+                            <property name="margin-start">5</property>
+                            <property name="margin-end">5</property>
+                            <property name="margin-bottom">2</property>
                             <child>
                               <object class="GtkLabel">
                                 <property name="visible">True</property>
@@ -1467,7 +1495,7 @@
                               </packing>
                             </child>
                             <child>
-                              <object class="GtkScale" id="scale_similarity">
+                              <object class="GtkScale" id="scale_similarity_similar_images">
                                 <property name="visible">True</property>
                                 <property name="can-focus">True</property>
                                 <property name="fill-level">100</property>
@@ -1482,7 +1510,7 @@
                               </packing>
                             </child>
                             <child>
-                              <object class="GtkLabel">
+                              <object class="GtkLabel" id="label_similar_images_minimal_similarity">
                                 <property name="visible">True</property>
                                 <property name="can-focus">False</property>
                                 <property name="label" translatable="yes">  Minimal  </property>
@@ -1504,6 +1532,7 @@
                           <object class="GtkScrolledWindow" id="scrolled_window_similar_images_finder">
                             <property name="visible">True</property>
                             <property name="can-focus">True</property>
+                            <property name="margin-end">5</property>
                             <property name="shadow-type">in</property>
                             <child>
                               <placeholder/>
@@ -1561,6 +1590,191 @@
                       <object class="GtkBox">
                         <property name="visible">True</property>
                         <property name="can-focus">False</property>
+                        <property name="margin-start">5</property>
+                        <property name="margin-end">5</property>
+                        <property name="margin-top">2</property>
+                        <property name="spacing">8</property>
+                        <child>
+                          <object class="GtkLabel">
+                            <property name="visible">True</property>
+                            <property name="can-focus">False</property>
+                            <property name="label" translatable="yes">Size(bytes)</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkLabel">
+                            <property name="visible">True</property>
+                            <property name="can-focus">False</property>
+                            <property name="label" translatable="yes">Min:</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">1</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkEntry" id="entry_similar_videos_minimal_size">
+                            <property name="visible">True</property>
+                            <property name="can-focus">True</property>
+                            <property name="max-length">15</property>
+                            <property name="text" translatable="yes">16384</property>
+                            <property name="caps-lock-warning">False</property>
+                            <property name="input-purpose">number</property>
+                          </object>
+                          <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
+                            <property name="position">2</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkLabel">
+                            <property name="visible">True</property>
+                            <property name="can-focus">False</property>
+                            <property name="label" translatable="yes">Max:</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">4</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkEntry" id="entry_similar_videos_maximal_size">
+                            <property name="visible">True</property>
+                            <property name="can-focus">True</property>
+                            <property name="max-length">15</property>
+                            <property name="text" translatable="yes">1099512000000</property>
+                            <property name="caps-lock-warning">False</property>
+                            <property name="input-purpose">number</property>
+                          </object>
+                          <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
+                            <property name="position">5</property>
+                          </packing>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">3</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkBox">
+                        <property name="visible">True</property>
+                        <property name="can-focus">False</property>
+                        <property name="margin-start">5</property>
+                        <property name="margin-end">5</property>
+                        <property name="margin-bottom">2</property>
+                        <child>
+                          <object class="GtkLabel">
+                            <property name="visible">True</property>
+                            <property name="can-focus">False</property>
+                            <property name="label" translatable="yes">Similarity </property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkLabel">
+                            <property name="visible">True</property>
+                            <property name="can-focus">False</property>
+                            <property name="label" translatable="yes">  Very High  </property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">1</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkScale" id="scale_similarity_similar_videos">
+                            <property name="visible">True</property>
+                            <property name="can-focus">True</property>
+                            <property name="fill-level">100</property>
+                            <property name="round-digits">0</property>
+                            <property name="digits">0</property>
+                            <property name="value-pos">right</property>
+                          </object>
+                          <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
+                            <property name="position">2</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkLabel">
+                            <property name="visible">True</property>
+                            <property name="can-focus">False</property>
+                            <property name="label" translatable="yes">  Minimal  </property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">3</property>
+                          </packing>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">4</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkScrolledWindow" id="scrolled_window_similar_videos_finder">
+                        <property name="visible">True</property>
+                        <property name="can-focus">True</property>
+                        <property name="shadow-type">in</property>
+                        <child>
+                          <placeholder/>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="expand">True</property>
+                        <property name="fill">True</property>
+                        <property name="position">5</property>
+                      </packing>
+                    </child>
+                  </object>
+                  <packing>
+                    <property name="position">6</property>
+                  </packing>
+                </child>
+                <child type="tab">
+                  <object class="GtkLabel">
+                    <property name="visible">True</property>
+                    <property name="can-focus">False</property>
+                    <property name="label" translatable="yes">Similar Videos</property>
+                  </object>
+                  <packing>
+                    <property name="position">6</property>
+                    <property name="tab-fill">False</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkBox">
+                    <property name="visible">True</property>
+                    <property name="can-focus">False</property>
+                    <property name="orientation">vertical</property>
+                    <child>
+                      <object class="GtkBox">
+                        <property name="visible">True</property>
+                        <property name="can-focus">False</property>
+                        <property name="margin-start">5</property>
+                        <property name="margin-end">5</property>
+                        <property name="margin-top">2</property>
                         <property name="spacing">8</property>
                         <child>
                           <object class="GtkLabel">
@@ -1639,6 +1853,8 @@
                       <object class="GtkBox">
                         <property name="visible">True</property>
                         <property name="can-focus">False</property>
+                        <property name="margin-start">5</property>
+                        <property name="margin-end">5</property>
                         <property name="spacing">8</property>
                         <child>
                           <object class="GtkCheckButton" id="check_button_music_title">
@@ -1720,45 +1936,38 @@
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkScrolledWindow" id="scrolled_window_same_music_finder">
+                      <object class="GtkBox">
                         <property name="visible">True</property>
-                        <property name="can-focus">True</property>
-                        <property name="shadow-type">in</property>
+                        <property name="can-focus">False</property>
+                        <property name="margin-start">5</property>
+                        <property name="margin-end">5</property>
+                        <property name="margin-bottom">2</property>
                         <child>
-                          <placeholder/>
+                          <object class="GtkCheckButton" id="check_button_music_approximate_comparison">
+                            <property name="label" translatable="yes">Approximate Comparison</property>
+                            <property name="visible">True</property>
+                            <property name="can-focus">True</property>
+                            <property name="receives-default">False</property>
+                            <property name="draw-indicator">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">0</property>
+                          </packing>
                         </child>
                       </object>
                       <packing>
-                        <property name="expand">True</property>
+                        <property name="expand">False</property>
                         <property name="fill">True</property>
                         <property name="position">2</property>
                       </packing>
                     </child>
-                  </object>
-                  <packing>
-                    <property name="position">6</property>
-                  </packing>
-                </child>
-                <child type="tab">
-                  <object class="GtkLabel">
-                    <property name="visible">True</property>
-                    <property name="can-focus">False</property>
-                    <property name="label" translatable="yes">Music Duplicates</property>
-                  </object>
-                  <packing>
-                    <property name="position">6</property>
-                    <property name="tab-fill">False</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkBox">
-                    <property name="visible">True</property>
-                    <property name="can-focus">False</property>
-                    <property name="orientation">vertical</property>
                     <child>
-                      <object class="GtkScrolledWindow" id="scrolled_window_zeroed_files_finder">
+                      <object class="GtkScrolledWindow" id="scrolled_window_same_music_finder">
                         <property name="visible">True</property>
                         <property name="can-focus">True</property>
+                        <property name="margin-end">5</property>
                         <property name="shadow-type">in</property>
                         <child>
                           <placeholder/>
@@ -1767,7 +1976,7 @@
                       <packing>
                         <property name="expand">True</property>
                         <property name="fill">True</property>
-                        <property name="position">2</property>
+                        <property name="position">3</property>
                       </packing>
                     </child>
                   </object>
@@ -1779,7 +1988,7 @@
                   <object class="GtkLabel">
                     <property name="visible">True</property>
                     <property name="can-focus">False</property>
-                    <property name="label" translatable="yes">Zeroed Files</property>
+                    <property name="label" translatable="yes">Music Duplicates</property>
                   </object>
                   <packing>
                     <property name="position">7</property>
@@ -1938,9 +2147,10 @@
                 <property name="can-focus">False</property>
                 <property name="spacing">2</property>
                 <child>
-                  <object class="GtkButton" id="buttons_select">
+                  <object class="GtkMenuButton" id="buttons_select">
                     <property name="visible">True</property>
                     <property name="can-focus">True</property>
+                    <property name="focus-on-click">False</property>
                     <property name="receives-default">True</property>
                     <child>
                       <object class="GtkBox">
@@ -2022,7 +2232,7 @@
                   <packing>
                     <property name="expand">False</property>
                     <property name="fill">True</property>
-                    <property name="position">1</property>
+                    <property name="position">2</property>
                   </packing>
                 </child>
                 <child>
@@ -2066,7 +2276,7 @@
                   <packing>
                     <property name="expand">False</property>
                     <property name="fill">True</property>
-                    <property name="position">2</property>
+                    <property name="position">3</property>
                   </packing>
                 </child>
                 <child>
@@ -2110,7 +2320,7 @@
                   <packing>
                     <property name="expand">False</property>
                     <property name="fill">True</property>
-                    <property name="position">3</property>
+                    <property name="position">4</property>
                   </packing>
                 </child>
                 <child>
@@ -2154,7 +2364,7 @@
                   <packing>
                     <property name="expand">False</property>
                     <property name="fill">True</property>
-                    <property name="position">4</property>
+                    <property name="position">5</property>
                   </packing>
                 </child>
                 <child>
@@ -2198,7 +2408,7 @@
                   <packing>
                     <property name="expand">False</property>
                     <property name="fill">True</property>
-                    <property name="position">5</property>
+                    <property name="position">6</property>
                   </packing>
                 </child>
               </object>
diff -Naur orig/czkawka_gui/ui/popover_right_click.glade patched/czkawka_gui/ui/popover_right_click.glade
--- orig/czkawka_gui/ui/popover_right_click.glade	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/ui/popover_right_click.glade	2021-12-04 17:07:36.886961301 +0100
@@ -27,7 +27,7 @@
 
 -->
 <interface>
-  <requires lib="gtk+" version="3.22"/>
+  <requires lib="gtk+" version="3.24"/>
   <!-- interface-license-type mit -->
   <!-- interface-name Czkawka -->
   <!-- interface-description Czkawka is simple and fast app to find duplicates, empty folders, similar images etc. -->
diff -Naur orig/czkawka_gui/ui/popover_select.glade patched/czkawka_gui/ui/popover_select.glade
--- orig/czkawka_gui/ui/popover_select.glade	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/ui/popover_select.glade	2021-12-04 17:07:36.886961301 +0100
@@ -27,7 +27,7 @@
 
 -->
 <interface>
-  <requires lib="gtk+" version="3.22"/>
+  <requires lib="gtk+" version="3.24"/>
   <!-- interface-license-type mit -->
   <!-- interface-name Czkawka -->
   <!-- interface-description Czkawka is simple and fast app to find duplicates, empty folders, similar images etc. -->
diff -Naur orig/czkawka_gui/ui/progress.glade patched/czkawka_gui/ui/progress.glade
--- orig/czkawka_gui/ui/progress.glade	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/ui/progress.glade	2021-12-04 17:07:36.886961301 +0100
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<!-- Generated with glade 3.38.2 
+<!-- Generated with glade 3.39.0 
 
 The MIT License (MIT)
 
@@ -27,136 +27,171 @@
 
 -->
 <interface>
-  <requires lib="gtk+" version="3.22"/>
+  <requires lib="gtk+" version="3.24"/>
   <!-- interface-license-type mit -->
   <!-- interface-name Czkawka -->
   <!-- interface-description Czkawka is simple and fast app to find duplicates, empty folders, similar images etc. -->
   <!-- interface-authors Rafa\305\202 Mikrut -->
-  <object class="GtkWindow" id="window_progress">
+  <object class="GtkDialog" id="window_progress">
     <property name="can-focus">False</property>
-    <property name="title" translatable="yes">Czkawka Progress Window</property>
-    <child>
+    <property name="type-hint">dialog</property>
+    <property name="gravity">center</property>
+    <child internal-child="vbox">
       <object class="GtkBox">
-        <property name="visible">True</property>
         <property name="can-focus">False</property>
-        <property name="margin-start">10</property>
-        <property name="margin-end">10</property>
-        <property name="margin-top">10</property>
-        <property name="margin-bottom">10</property>
         <property name="orientation">vertical</property>
-        <property name="spacing">10</property>
-        <child>
-          <!-- n-columns=2 n-rows=2 -->
-          <object class="GtkGrid" id="grid_progress_stages">
-            <property name="visible">True</property>
+        <property name="spacing">2</property>
+        <child internal-child="action_area">
+          <object class="GtkButtonBox">
             <property name="can-focus">False</property>
+            <property name="layout-style">end</property>
             <child>
-              <object class="GtkLabel">
-                <property name="visible">True</property>
-                <property name="can-focus">False</property>
-                <property name="label" translatable="yes">All stages: </property>
-              </object>
-              <packing>
-                <property name="left-attach">0</property>
-                <property name="top-attach">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkProgressBar" id="progress_bar_all_stages">
-                <property name="visible">True</property>
-                <property name="can-focus">False</property>
-                <property name="hexpand">True</property>
-                <property name="pulse-step">0.099999999776482579</property>
-                <property name="show-text">True</property>
-              </object>
-              <packing>
-                <property name="left-attach">1</property>
-                <property name="top-attach">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel">
-                <property name="visible">True</property>
-                <property name="can-focus">False</property>
-                <property name="label" translatable="yes">Current stage:  </property>
-              </object>
-              <packing>
-                <property name="left-attach">0</property>
-                <property name="top-attach">0</property>
-              </packing>
+              <placeholder/>
             </child>
             <child>
-              <object class="GtkProgressBar" id="progress_bar_current_stage">
-                <property name="visible">True</property>
-                <property name="can-focus">False</property>
-                <property name="show-text">True</property>
-              </object>
-              <packing>
-                <property name="left-attach">1</property>
-                <property name="top-attach">0</property>
-              </packing>
+              <placeholder/>
             </child>
           </object>
           <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
+            <property name="expand">False</property>
+            <property name="fill">False</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
-          <object class="GtkLabel" id="label_stage">
+          <object class="GtkBox">
             <property name="visible">True</property>
             <property name="can-focus">False</property>
-            <property name="label" translatable="yes">Stage 1/2</property>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkButton" id="button_stop_in_dialog">
-            <property name="visible">True</property>
-            <property name="can-focus">True</property>
-            <property name="receives-default">True</property>
-            <property name="halign">end</property>
+            <property name="margin-start">10</property>
+            <property name="margin-end">10</property>
+            <property name="margin-top">10</property>
+            <property name="margin-bottom">10</property>
+            <property name="orientation">vertical</property>
+            <property name="spacing">10</property>
             <child>
-              <object class="GtkBox">
+              <!-- n-columns=2 n-rows=2 -->
+              <object class="GtkGrid" id="grid_progress_stages">
                 <property name="visible">True</property>
                 <property name="can-focus">False</property>
+                <property name="valign">center</property>
+                <property name="margin-start">2</property>
+                <property name="margin-end">2</property>
+                <property name="margin-top">2</property>
                 <child>
-                  <object class="GtkImage">
+                  <object class="GtkLabel">
+                    <property name="visible">True</property>
+                    <property name="can-focus">False</property>
+                    <property name="label" translatable="yes">All stages: </property>
+                  </object>
+                  <packing>
+                    <property name="left-attach">0</property>
+                    <property name="top-attach">1</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkProgressBar" id="progress_bar_all_stages">
                     <property name="visible">True</property>
                     <property name="can-focus">False</property>
-                    <property name="icon-name">dialog-cancel</property>
+                    <property name="hexpand">True</property>
+                    <property name="pulse-step">0.099999999776482579</property>
+                    <property name="show-text">True</property>
                   </object>
                   <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
+                    <property name="left-attach">1</property>
+                    <property name="top-attach">1</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkLabel">
                     <property name="visible">True</property>
                     <property name="can-focus">False</property>
-                    <property name="label" translatable="yes">Stop</property>
+                    <property name="label" translatable="yes">Current stage:  </property>
                   </object>
                   <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
+                    <property name="left-attach">0</property>
+                    <property name="top-attach">0</property>
                   </packing>
                 </child>
+                <child>
+                  <object class="GtkProgressBar" id="progress_bar_current_stage">
+                    <property name="visible">True</property>
+                    <property name="can-focus">False</property>
+                    <property name="show-text">True</property>
+                  </object>
+                  <packing>
+                    <property name="left-attach">1</property>
+                    <property name="top-attach">0</property>
+                  </packing>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">True</property>
+                <property name="fill">True</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkLabel" id="label_stage">
+                <property name="visible">True</property>
+                <property name="can-focus">False</property>
+                <property name="label" translatable="yes">Stage 1/2</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="button_stop_in_dialog">
+                <property name="visible">True</property>
+                <property name="can-focus">True</property>
+                <property name="receives-default">True</property>
+                <property name="halign">end</property>
+                <property name="margin-end">2</property>
+                <child>
+                  <object class="GtkBox">
+                    <property name="visible">True</property>
+                    <property name="can-focus">False</property>
+                    <child>
+                      <object class="GtkImage">
+                        <property name="visible">True</property>
+                        <property name="can-focus">False</property>
+                        <property name="icon-name">dialog-cancel</property>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">0</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkLabel">
+                        <property name="visible">True</property>
+                        <property name="can-focus">False</property>
+                        <property name="label" translatable="yes">Stop</property>
+                      </object>
+                      <packing>
+                        <property name="expand">True</property>
+                        <property name="fill">True</property>
+                        <property name="position">1</property>
+                      </packing>
+                    </child>
+                  </object>
+                </child>
               </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="pack-type">end</property>
+                <property name="position">2</property>
+              </packing>
             </child>
           </object>
           <packing>
             <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="pack-type">end</property>
-            <property name="position">2</property>
+            <property name="fill">True</property>
+            <property name="position">1</property>
           </packing>
         </child>
       </object>
diff -Naur orig/czkawka_gui/ui/settings.glade patched/czkawka_gui/ui/settings.glade
--- orig/czkawka_gui/ui/settings.glade	2021-11-22 06:48:07.000000000 +0100
+++ patched/czkawka_gui/ui/settings.glade	2021-12-04 17:07:36.886961301 +0100
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<!-- Generated with glade 3.38.2 
+<!-- Generated with glade 3.39.0 
 
 The MIT License (MIT)
 
@@ -27,60 +27,252 @@
 
 -->
 <interface>
-  <requires lib="gtk+" version="3.22"/>
+  <requires lib="gtk+" version="3.24"/>
   <!-- interface-license-type mit -->
   <!-- interface-name Czkawka -->
   <!-- interface-description Czkawka is simple and fast app to find duplicates, empty folders, similar images etc. -->
   <!-- interface-authors Rafa\305\202 Mikrut -->
-  <object class="GtkWindow" id="window_settings">
+  <object class="GtkDialog" id="window_settings">
     <property name="can-focus">False</property>
     <property name="title" translatable="yes">Czkawka Options</property>
-    <child>
+    <property name="modal">True</property>
+    <property name="type-hint">dialog</property>
+    <child internal-child="vbox">
       <object class="GtkBox">
-        <property name="visible">True</property>
         <property name="can-focus">False</property>
         <property name="orientation">vertical</property>
-        <child>
-          <object class="GtkBox">
-            <property name="visible">True</property>
+        <property name="spacing">2</property>
+        <child internal-child="action_area">
+          <object class="GtkButtonBox">
             <property name="can-focus">False</property>
-            <property name="orientation">vertical</property>
+            <property name="layout-style">end</property>
             <child>
-              <object class="GtkComboBoxText">
-                <property name="visible">True</property>
-                <property name="can-focus">False</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
+              <placeholder/>
+            </child>
+            <child>
+              <placeholder/>
             </child>
           </object>
           <packing>
             <property name="expand">False</property>
-            <property name="fill">True</property>
+            <property name="fill">False</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
-          <object class="GtkNotebook">
+          <object class="GtkBox">
             <property name="visible">True</property>
-            <property name="can-focus">True</property>
-            <property name="tab-pos">left</property>
+            <property name="can-focus">False</property>
+            <property name="orientation">vertical</property>
             <child>
               <object class="GtkBox">
                 <property name="visible">True</property>
                 <property name="can-focus">False</property>
                 <property name="orientation">vertical</property>
                 <child>
+                  <object class="GtkComboBoxText">
+                    <property name="visible">True</property>
+                    <property name="can-focus">False</property>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">False</property>
+                    <property name="position">0</property>
+                  </packing>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkNotebook">
+                <property name="visible">True</property>
+                <property name="can-focus">True</property>
+                <property name="tab-pos">left</property>
+                <child>
+                  <object class="GtkBox">
+                    <property name="visible">True</property>
+                    <property name="can-focus">False</property>
+                    <property name="orientation">vertical</property>
+                    <child>
+                      <object class="GtkBox">
+                        <property name="visible">True</property>
+                        <property name="can-focus">False</property>
+                        <property name="orientation">vertical</property>
+                        <child>
+                          <object class="GtkCheckButton" id="check_button_settings_load_at_start">
+                            <property name="label" translatable="yes">Load configuration at start</property>
+                            <property name="visible">True</property>
+                            <property name="can-focus">True</property>
+                            <property name="receives-default">False</property>
+                            <property name="active">True</property>
+                            <property name="draw-indicator">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkCheckButton" id="check_button_settings_save_at_exit">
+                            <property name="label" translatable="yes">Save configuration at exit</property>
+                            <property name="visible">True</property>
+                            <property name="can-focus">True</property>
+                            <property name="receives-default">False</property>
+                            <property name="active">True</property>
+                            <property name="draw-indicator">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">1</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkCheckButton" id="check_button_settings_confirm_deletion">
+                            <property name="label" translatable="yes">Show confirm dialog when deleting any files</property>
+                            <property name="visible">True</property>
+                            <property name="can-focus">True</property>
+                            <property name="receives-default">False</property>
+                            <property name="active">True</property>
+                            <property name="draw-indicator">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">2</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkCheckButton" id="check_button_settings_confirm_group_deletion">
+                            <property name="label" translatable="yes">Show confirm dialog when deleting all files in group</property>
+                            <property name="visible">True</property>
+                            <property name="can-focus">True</property>
+                            <property name="receives-default">False</property>
+                            <property name="active">True</property>
+                            <property name="draw-indicator">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">3</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkCheckButton" id="check_button_settings_show_text_view">
+                            <property name="label" translatable="yes">Show bottom text panel</property>
+                            <property name="visible">True</property>
+                            <property name="can-focus">True</property>
+                            <property name="receives-default">False</property>
+                            <property name="active">True</property>
+                            <property name="draw-indicator">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">False</property>
+                            <property name="position">4</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkCheckButton" id="check_button_settings_use_cache">
+                            <property name="label" translatable="yes">Use cache</property>
+                            <property name="visible">True</property>
+                            <property name="can-focus">True</property>
+                            <property name="receives-default">False</property>
+                            <property name="active">True</property>
+                            <property name="draw-indicator">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">5</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkCheckButton" id="check_button_settings_use_trash">
+                            <property name="label" translatable="yes">Move deleted files to trash</property>
+                            <property name="visible">True</property>
+                            <property name="can-focus">True</property>
+                            <property name="receives-default">False</property>
+                            <property name="active">True</property>
+                            <property name="draw-indicator">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">6</property>
+                          </packing>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">False</property>
+                        <property name="position">0</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkBox">
+                        <property name="visible">True</property>
+                        <property name="can-focus">False</property>
+                        <child>
+                          <object class="GtkButton" id="button_settings_open_cache_folder">
+                            <property name="label" translatable="yes">Open cache folder</property>
+                            <property name="visible">True</property>
+                            <property name="can-focus">True</property>
+                            <property name="receives-default">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkButton" id="button_settings_open_settings_folder">
+                            <property name="label" translatable="yes">Open settings folder</property>
+                            <property name="visible">True</property>
+                            <property name="can-focus">True</property>
+                            <property name="receives-default">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
+                            <property name="pack-type">end</property>
+                            <property name="position">1</property>
+                          </packing>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">False</property>
+                        <property name="pack-type">end</property>
+                        <property name="position">1</property>
+                      </packing>
+                    </child>
+                  </object>
+                </child>
+                <child type="tab">
+                  <object class="GtkLabel">
+                    <property name="visible">True</property>
+                    <property name="can-focus">False</property>
+                    <property name="label" translatable="yes">General</property>
+                  </object>
+                  <packing>
+                    <property name="tab-fill">False</property>
+                  </packing>
+                </child>
+                <child>
                   <object class="GtkBox">
                     <property name="visible">True</property>
                     <property name="can-focus">False</property>
                     <property name="orientation">vertical</property>
                     <child>
-                      <object class="GtkCheckButton" id="check_button_settings_load_at_start">
-                        <property name="label" translatable="yes">Load configuration at start</property>
+                      <object class="GtkCheckButton" id="check_button_settings_hide_hard_links">
+                        <property name="label" translatable="yes">Hide hard links(only Linux and MacOS)</property>
                         <property name="visible">True</property>
                         <property name="can-focus">True</property>
                         <property name="receives-default">False</property>
@@ -94,8 +286,8 @@
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkCheckButton" id="check_button_settings_save_at_exit">
-                        <property name="label" translatable="yes">Save configuration at exit</property>
+                      <object class="GtkCheckButton" id="check_button_settings_show_preview_duplicates">
+                        <property name="label" translatable="yes">Show image preview</property>
                         <property name="visible">True</property>
                         <property name="can-focus">True</property>
                         <property name="receives-default">False</property>
@@ -109,8 +301,8 @@
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkCheckButton" id="check_button_settings_confirm_deletion">
-                        <property name="label" translatable="yes">Show confirm dialog when deleting</property>
+                      <object class="GtkCheckButton" id="check_button_settings_duplicates_delete_outdated_cache">
+                        <property name="label" translatable="yes">Delete outdated cache entries automatically</property>
                         <property name="visible">True</property>
                         <property name="can-focus">True</property>
                         <property name="receives-default">False</property>
@@ -124,13 +316,41 @@
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkCheckButton" id="check_button_settings_confirm_group_deletion">
-                        <property name="label" translatable="yes">Show confirm dialog when deleting all files in group</property>
+                      <object class="GtkBox">
                         <property name="visible">True</property>
-                        <property name="can-focus">True</property>
-                        <property name="receives-default">False</property>
-                        <property name="active">True</property>
-                        <property name="draw-indicator">True</property>
+                        <property name="can-focus">False</property>
+                        <property name="margin-left">4</property>
+                        <property name="margin-right">4</property>
+                        <property name="margin-start">4</property>
+                        <property name="margin-end">4</property>
+                        <child>
+                          <object class="GtkLabel">
+                            <property name="visible">True</property>
+                            <property name="can-focus">False</property>
+                            <property name="label" translatable="yes">Minimal size of files in bytes saved to cache</property>
+                          </object>
+                          <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkEntry" id="entry_settings_cache_file_minimal_size">
+                            <property name="visible">True</property>
+                            <property name="can-focus">True</property>
+                            <property name="max-length">15</property>
+                            <property name="text" translatable="yes">257144</property>
+                            <property name="caps-lock-warning">False</property>
+                            <property name="input-purpose">number</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">False</property>
+                            <property name="pack-type">end</property>
+                            <property name="position">1</property>
+                          </packing>
+                        </child>
                       </object>
                       <packing>
                         <property name="expand">False</property>
@@ -139,43 +359,69 @@
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkCheckButton" id="check_button_settings_show_text_view">
-                        <property name="label" translatable="yes">Show bottom text panel</property>
+                      <object class="GtkCheckButton" id="check_button_duplicates_use_prehash_cache">
+                        <property name="label" translatable="yes">Use prehash cache</property>
                         <property name="visible">True</property>
                         <property name="can-focus">True</property>
                         <property name="receives-default">False</property>
-                        <property name="active">True</property>
                         <property name="draw-indicator">True</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
-                        <property name="fill">False</property>
+                        <property name="fill">True</property>
                         <property name="position">4</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkCheckButton" id="check_button_settings_use_cache">
-                        <property name="label" translatable="yes">Use cache</property>
+                      <object class="GtkButton" id="button_settings_duplicates_clear_cache">
+                        <property name="label" translatable="yes">Remove outdated results from duplicates cache</property>
                         <property name="visible">True</property>
                         <property name="can-focus">True</property>
-                        <property name="receives-default">False</property>
-                        <property name="active">True</property>
-                        <property name="draw-indicator">True</property>
+                        <property name="receives-default">True</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
-                        <property name="fill">True</property>
+                        <property name="fill">False</property>
+                        <property name="pack-type">end</property>
                         <property name="position">5</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkCheckButton" id="check_button_settings_use_trash">
-                        <property name="label" translatable="yes">Move deleted files to trash</property>
+                      <object class="GtkBox">
                         <property name="visible">True</property>
-                        <property name="can-focus">True</property>
-                        <property name="receives-default">False</property>
-                        <property name="active">True</property>
-                        <property name="draw-indicator">True</property>
+                        <property name="can-focus">False</property>
+                        <property name="margin-left">4</property>
+                        <property name="margin-right">4</property>
+                        <property name="margin-start">4</property>
+                        <property name="margin-end">4</property>
+                        <child>
+                          <object class="GtkLabel">
+                            <property name="visible">True</property>
+                            <property name="can-focus">False</property>
+                            <property name="label" translatable="yes">Minimal size of files in bytes saved to prehash cache</property>
+                          </object>
+                          <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkEntry" id="entry_settings_prehash_cache_file_minimal_size">
+                            <property name="visible">True</property>
+                            <property name="can-focus">True</property>
+                            <property name="max-length">15</property>
+                            <property name="text" translatable="yes">1</property>
+                            <property name="caps-lock-warning">False</property>
+                            <property name="input-purpose">number</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">False</property>
+                            <property name="pack-type">end</property>
+                            <property name="position">1</property>
+                          </packing>
+                        </child>
                       </object>
                       <packing>
                         <property name="expand">False</property>
@@ -185,151 +431,198 @@
                     </child>
                   </object>
                   <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
                     <property name="position">1</property>
                   </packing>
                 </child>
-              </object>
-            </child>
-            <child type="tab">
-              <object class="GtkLabel">
-                <property name="visible">True</property>
-                <property name="can-focus">False</property>
-                <property name="label" translatable="yes">General</property>
-              </object>
-              <packing>
-                <property name="tab-fill">False</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkBox">
-                <property name="visible">True</property>
-                <property name="can-focus">False</property>
-                <property name="orientation">vertical</property>
-                <child>
-                  <object class="GtkCheckButton" id="check_button_settings_hide_hard_links">
-                    <property name="label" translatable="yes">Hide hard links(only Linux and MacOS)</property>
+                <child type="tab">
+                  <object class="GtkLabel">
                     <property name="visible">True</property>
-                    <property name="can-focus">True</property>
-                    <property name="receives-default">False</property>
-                    <property name="active">True</property>
-                    <property name="draw-indicator">True</property>
+                    <property name="can-focus">False</property>
+                    <property name="label" translatable="yes">Duplicate Finder</property>
                   </object>
                   <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
+                    <property name="position">1</property>
+                    <property name="tab-fill">False</property>
                   </packing>
                 </child>
                 <child>
-                  <object class="GtkCheckButton" id="check_button_settings_show_preview_duplicates">
-                    <property name="label" translatable="yes">Show image preview</property>
+                  <object class="GtkBox">
                     <property name="visible">True</property>
-                    <property name="can-focus">True</property>
-                    <property name="receives-default">False</property>
-                    <property name="active">True</property>
-                    <property name="draw-indicator">True</property>
+                    <property name="can-focus">False</property>
+                    <property name="orientation">vertical</property>
+                    <child>
+                      <object class="GtkCheckButton" id="check_button_settings_show_preview_similar_images">
+                        <property name="label" translatable="yes">Show image preview</property>
+                        <property name="visible">True</property>
+                        <property name="can-focus">True</property>
+                        <property name="receives-default">False</property>
+                        <property name="active">True</property>
+                        <property name="draw-indicator">True</property>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">0</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkCheckButton" id="check_button_settings_similar_images_delete_outdated_cache">
+                        <property name="label" translatable="yes">Delete outdated cache entries automatically</property>
+                        <property name="visible">True</property>
+                        <property name="can-focus">True</property>
+                        <property name="receives-default">False</property>
+                        <property name="active">True</property>
+                        <property name="draw-indicator">True</property>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">1</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkButton" id="button_settings_similar_images_clear_cache">
+                        <property name="label" translatable="yes">Remove outdated results from images cache</property>
+                        <property name="visible">True</property>
+                        <property name="can-focus">True</property>
+                        <property name="receives-default">True</property>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">False</property>
+                        <property name="pack-type">end</property>
+                        <property name="position">2</property>
+                      </packing>
+                    </child>
                   </object>
                   <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
+                    <property name="position">2</property>
+                  </packing>
+                </child>
+                <child type="tab">
+                  <object class="GtkLabel">
+                    <property name="visible">True</property>
+                    <property name="can-focus">False</property>
+                    <property name="label" translatable="yes">Similar Images</property>
+                  </object>
+                  <packing>
+                    <property name="position">2</property>
+                    <property name="tab-fill">False</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkBox">
                     <property name="visible">True</property>
                     <property name="can-focus">False</property>
-                    <property name="margin-start">4</property>
-                    <property name="margin-end">4</property>
+                    <property name="orientation">vertical</property>
                     <child>
-                      <object class="GtkLabel">
+                      <object class="GtkButton" id="button_settings_similar_videos_clear_cache">
+                        <property name="label" translatable="yes">Remove outdated results from videos cache</property>
                         <property name="visible">True</property>
-                        <property name="can-focus">False</property>
-                        <property name="label" translatable="yes">Minimal cached file size in bytes</property>
+                        <property name="can-focus">True</property>
+                        <property name="receives-default">True</property>
                       </object>
                       <packing>
-                        <property name="expand">True</property>
-                        <property name="fill">True</property>
+                        <property name="expand">False</property>
+                        <property name="fill">False</property>
+                        <property name="pack-type">end</property>
                         <property name="position">0</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkEntry" id="entry_settings_cache_file_minimal_size">
+                      <object class="GtkCheckButton" id="check_button_settings_similar_videos_delete_outdated_cache">
+                        <property name="label" translatable="yes">Delete outdated cache entries automatically</property>
                         <property name="visible">True</property>
                         <property name="can-focus">True</property>
-                        <property name="max-length">15</property>
-                        <property name="text" translatable="yes">2097152</property>
-                        <property name="caps-lock-warning">False</property>
-                        <property name="input-purpose">number</property>
+                        <property name="receives-default">False</property>
+                        <property name="draw-indicator">True</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="pack-type">end</property>
+                        <property name="fill">True</property>
                         <property name="position">1</property>
                       </packing>
                     </child>
                   </object>
                   <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">2</property>
+                    <property name="position">3</property>
+                  </packing>
+                </child>
+                <child type="tab">
+                  <object class="GtkLabel">
+                    <property name="visible">True</property>
+                    <property name="can-focus">False</property>
+                    <property name="label" translatable="yes">Similar Videos</property>
+                  </object>
+                  <packing>
+                    <property name="position">3</property>
+                    <property name="tab-fill">False</property>
                   </packing>
                 </child>
               </object>
               <packing>
+                <property name="expand">True</property>
+                <property name="fill">True</property>
                 <property name="position">1</property>
               </packing>
             </child>
-            <child type="tab">
-              <object class="GtkLabel">
-                <property name="visible">True</property>
-                <property name="can-focus">False</property>
-                <property name="label" translatable="yes">Duplicate Finder</property>
-              </object>
-              <packing>
-                <property name="position">1</property>
-                <property name="tab-fill">False</property>
-              </packing>
-            </child>
             <child>
               <object class="GtkBox">
                 <property name="visible">True</property>
                 <property name="can-focus">False</property>
-                <property name="orientation">vertical</property>
+                <property name="margin-left">3</property>
+                <property name="margin-right">3</property>
+                <property name="margin-start">3</property>
+                <property name="margin-end">3</property>
+                <property name="spacing">3</property>
                 <child>
-                  <object class="GtkCheckButton" id="check_button_settings_show_preview_similar_images">
-                    <property name="label" translatable="yes">Show image preview</property>
+                  <object class="GtkButton" id="button_settings_load_configuration">
+                    <property name="label" translatable="yes">Load configuration</property>
                     <property name="visible">True</property>
                     <property name="can-focus">True</property>
-                    <property name="receives-default">False</property>
-                    <property name="active">True</property>
-                    <property name="draw-indicator">True</property>
+                    <property name="receives-default">True</property>
                   </object>
                   <packing>
                     <property name="expand">False</property>
-                    <property name="fill">True</property>
+                    <property name="fill">False</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
+                <child>
+                  <object class="GtkButton" id="button_settings_reset_configuration">
+                    <property name="label" translatable="yes">Reset configuration</property>
+                    <property name="visible">True</property>
+                    <property name="can-focus">True</property>
+                    <property name="receives-default">True</property>
+                  </object>
+                  <packing>
+                    <property name="expand">True</property>
+                    <property name="fill">False</property>
+                    <property name="position">1</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkButton" id="button_settings_save_configuration">
+                    <property name="label" translatable="yes">Save configuration</property>
+                    <property name="visible">True</property>
+                    <property name="can-focus">True</property>
+                    <property name="receives-default">True</property>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">False</property>
+                    <property name="pack-type">end</property>
+                    <property name="position">2</property>
+                  </packing>
+                </child>
               </object>
               <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="padding">3</property>
                 <property name="position">2</property>
               </packing>
             </child>
-            <child type="tab">
-              <object class="GtkLabel">
-                <property name="visible">True</property>
-                <property name="can-focus">False</property>
-                <property name="label" translatable="yes">Similar Images</property>
-              </object>
-              <packing>
-                <property name="position">2</property>
-                <property name="tab-fill">False</property>
-              </packing>
-            </child>
           </object>
           <packing>
             <property name="expand">True</property>
@@ -337,61 +630,6 @@
             <property name="position">1</property>
           </packing>
         </child>
-        <child>
-          <object class="GtkBox">
-            <property name="visible">True</property>
-            <property name="can-focus">False</property>
-            <property name="margin-start">3</property>
-            <property name="margin-end">3</property>
-            <property name="spacing">3</property>
-            <child>
-              <object class="GtkButton" id="button_settings_load_configuration">
-                <property name="label" translatable="yes">Load configuration</property>
-                <property name="visible">True</property>
-                <property name="can-focus">True</property>
-                <property name="receives-default">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="button_settings_reset_configuration">
-                <property name="label" translatable="yes">Reset configuration</property>
-                <property name="visible">True</property>
-                <property name="can-focus">True</property>
-                <property name="receives-default">True</property>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="button_settings_save_configuration">
-                <property name="label" translatable="yes">Save configuration</property>
-                <property name="visible">True</property>
-                <property name="can-focus">True</property>
-                <property name="receives-default">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="pack-type">end</property>
-                <property name="position">2</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="padding">3</property>
-            <property name="position">2</property>
-          </packing>
-        </child>
       </object>
     </child>
   </object>
diff -Naur orig/data/com.github.qarmin.czkawka.desktop patched/data/com.github.qarmin.czkawka.desktop
--- orig/data/com.github.qarmin.czkawka.desktop	1970-01-01 01:00:00.000000000 +0100
+++ patched/data/com.github.qarmin.czkawka.desktop	2021-12-04 17:07:36.886961301 +0100
@@ -0,0 +1,10 @@
+[Desktop Entry]
+Type=Application
+Terminal=false
+Exec=czkawka_gui
+Name=Czkawka
+Comment=Multi functional app to clean OS which allow to find duplicates, empty folders, similar files etc.
+Icon=com.github.qarmin.czkawka
+Categories=System;
+StartupWMClass=czkawka_gui
+TryExec=czkawka_gui
diff -Naur orig/flatpak/cargo-sources.json patched/flatpak/cargo-sources.json
--- orig/flatpak/cargo-sources.json	2021-11-22 06:48:07.000000000 +0100
+++ patched/flatpak/cargo-sources.json	1970-01-01 01:00:00.000000000 +0100
@@ -1,2953 +0,0 @@
-[
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/adler/adler-1.0.2.crate",
-        "sha256": "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe",
-        "dest": "cargo/vendor",
-        "dest-filename": "adler-1.0.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/adler-1.0.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/adler32/adler32-1.2.0.crate",
-        "sha256": "aae1277d39aeec15cb388266ecc24b11c80469deae6067e17a1a7aa9e5c1f234",
-        "dest": "cargo/vendor",
-        "dest-filename": "adler32-1.2.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22aae1277d39aeec15cb388266ecc24b11c80469deae6067e17a1a7aa9e5c1f234%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/adler32-1.2.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/alsa/alsa-0.5.0.crate",
-        "sha256": "75c4da790adcb2ce5e758c064b4f3ec17a30349f9961d3e5e6c9688b052a9e18",
-        "dest": "cargo/vendor",
-        "dest-filename": "alsa-0.5.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2275c4da790adcb2ce5e758c064b4f3ec17a30349f9961d3e5e6c9688b052a9e18%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/alsa-0.5.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/alsa-sys/alsa-sys-0.3.1.crate",
-        "sha256": "db8fee663d06c4e303404ef5f40488a53e062f89ba8bfed81f42325aafad1527",
-        "dest": "cargo/vendor",
-        "dest-filename": "alsa-sys-0.3.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22db8fee663d06c4e303404ef5f40488a53e062f89ba8bfed81f42325aafad1527%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/alsa-sys-0.3.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/ansi_term/ansi_term-0.11.0.crate",
-        "sha256": "ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b",
-        "dest": "cargo/vendor",
-        "dest-filename": "ansi_term-0.11.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/ansi_term-0.11.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/anyhow/anyhow-1.0.40.crate",
-        "sha256": "28b2cd92db5cbd74e8e5028f7e27dd7aa3090e89e4f2a197cc7c8dfb69c7063b",
-        "dest": "cargo/vendor",
-        "dest-filename": "anyhow-1.0.40.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2228b2cd92db5cbd74e8e5028f7e27dd7aa3090e89e4f2a197cc7c8dfb69c7063b%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/anyhow-1.0.40",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/arrayref/arrayref-0.3.6.crate",
-        "sha256": "a4c527152e37cf757a3f78aae5a06fbeefdb07ccc535c980a3208ee3060dd544",
-        "dest": "cargo/vendor",
-        "dest-filename": "arrayref-0.3.6.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22a4c527152e37cf757a3f78aae5a06fbeefdb07ccc535c980a3208ee3060dd544%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/arrayref-0.3.6",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/arrayvec/arrayvec-0.5.2.crate",
-        "sha256": "23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b",
-        "dest": "cargo/vendor",
-        "dest-filename": "arrayvec-0.5.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2223b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/arrayvec-0.5.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/atk/atk-0.9.0.crate",
-        "sha256": "812b4911e210bd51b24596244523c856ca749e6223c50a7fbbba3f89ee37c426",
-        "dest": "cargo/vendor",
-        "dest-filename": "atk-0.9.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22812b4911e210bd51b24596244523c856ca749e6223c50a7fbbba3f89ee37c426%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/atk-0.9.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/atk-sys/atk-sys-0.10.0.crate",
-        "sha256": "f530e4af131d94cc4fa15c5c9d0348f0ef28bac64ba660b6b2a1cf2605dedfce",
-        "dest": "cargo/vendor",
-        "dest-filename": "atk-sys-0.10.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22f530e4af131d94cc4fa15c5c9d0348f0ef28bac64ba660b6b2a1cf2605dedfce%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/atk-sys-0.10.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/atty/atty-0.2.14.crate",
-        "sha256": "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
-        "dest": "cargo/vendor",
-        "dest-filename": "atty-0.2.14.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/atty-0.2.14",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/audiotags/audiotags-0.2.7182.crate",
-        "sha256": "b87d111118f42416bb5f13c5dd2e2d879925964702a435be711d4f78fa9ce6d8",
-        "dest": "cargo/vendor",
-        "dest-filename": "audiotags-0.2.7182.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22b87d111118f42416bb5f13c5dd2e2d879925964702a435be711d4f78fa9ce6d8%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/audiotags-0.2.7182",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/audiotags-dev-macro/audiotags-dev-macro-0.1.4.crate",
-        "sha256": "3b79298591161f312f06327df7963063ee07466be303dcc3084a44ec293cb36e",
-        "dest": "cargo/vendor",
-        "dest-filename": "audiotags-dev-macro-0.1.4.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%223b79298591161f312f06327df7963063ee07466be303dcc3084a44ec293cb36e%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/audiotags-dev-macro-0.1.4",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/autocfg/autocfg-1.0.1.crate",
-        "sha256": "cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a",
-        "dest": "cargo/vendor",
-        "dest-filename": "autocfg-1.0.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/autocfg-1.0.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/base64/base64-0.13.0.crate",
-        "sha256": "904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd",
-        "dest": "cargo/vendor",
-        "dest-filename": "base64-0.13.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/base64-0.13.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/bindgen/bindgen-0.56.0.crate",
-        "sha256": "2da379dbebc0b76ef63ca68d8fc6e71c0f13e59432e0987e508c1820e6ab5239",
-        "dest": "cargo/vendor",
-        "dest-filename": "bindgen-0.56.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%222da379dbebc0b76ef63ca68d8fc6e71c0f13e59432e0987e508c1820e6ab5239%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/bindgen-0.56.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/bitflags/bitflags-1.2.1.crate",
-        "sha256": "cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693",
-        "dest": "cargo/vendor",
-        "dest-filename": "bitflags-1.2.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/bitflags-1.2.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/bk-tree/bk-tree-0.3.0.crate",
-        "sha256": "5488039ea2c6de8668351415e39a0218a8955bffadcff0cf01d1293a20854584",
-        "dest": "cargo/vendor",
-        "dest-filename": "bk-tree-0.3.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%225488039ea2c6de8668351415e39a0218a8955bffadcff0cf01d1293a20854584%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/bk-tree-0.3.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/blake3/blake3-0.3.7.crate",
-        "sha256": "e9ff35b701f3914bdb8fad3368d822c766ef2858b2583198e41639b936f09d3f",
-        "dest": "cargo/vendor",
-        "dest-filename": "blake3-0.3.7.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22e9ff35b701f3914bdb8fad3368d822c766ef2858b2583198e41639b936f09d3f%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/blake3-0.3.7",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/bumpalo/bumpalo-3.6.1.crate",
-        "sha256": "63396b8a4b9de3f4fdfb320ab6080762242f66a8ef174c49d8e19b674db4cdbe",
-        "dest": "cargo/vendor",
-        "dest-filename": "bumpalo-3.6.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2263396b8a4b9de3f4fdfb320ab6080762242f66a8ef174c49d8e19b674db4cdbe%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/bumpalo-3.6.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/bytemuck/bytemuck-1.5.1.crate",
-        "sha256": "bed57e2090563b83ba8f83366628ce535a7584c9afa4c9fc0612a03925c6df58",
-        "dest": "cargo/vendor",
-        "dest-filename": "bytemuck-1.5.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22bed57e2090563b83ba8f83366628ce535a7584c9afa4c9fc0612a03925c6df58%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/bytemuck-1.5.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/byteorder/byteorder-1.4.3.crate",
-        "sha256": "14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610",
-        "dest": "cargo/vendor",
-        "dest-filename": "byteorder-1.4.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2214c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/byteorder-1.4.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/bytes/bytes-1.0.1.crate",
-        "sha256": "b700ce4376041dcd0a327fd0097c41095743c4c8af8887265942faf1100bd040",
-        "dest": "cargo/vendor",
-        "dest-filename": "bytes-1.0.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22b700ce4376041dcd0a327fd0097c41095743c4c8af8887265942faf1100bd040%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/bytes-1.0.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/bzip2/bzip2-0.3.3.crate",
-        "sha256": "42b7c3cbf0fa9c1b82308d57191728ca0256cb821220f4e2fd410a72ade26e3b",
-        "dest": "cargo/vendor",
-        "dest-filename": "bzip2-0.3.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2242b7c3cbf0fa9c1b82308d57191728ca0256cb821220f4e2fd410a72ade26e3b%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/bzip2-0.3.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/bzip2-sys/bzip2-sys-0.1.10+1.0.8.crate",
-        "sha256": "17fa3d1ac1ca21c5c4e36a97f3c3eb25084576f6fc47bf0139c1123434216c6c",
-        "dest": "cargo/vendor",
-        "dest-filename": "bzip2-sys-0.1.10+1.0.8.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2217fa3d1ac1ca21c5c4e36a97f3c3eb25084576f6fc47bf0139c1123434216c6c%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/bzip2-sys-0.1.10+1.0.8",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/cairo-rs/cairo-rs-0.9.1.crate",
-        "sha256": "c5c0f2e047e8ca53d0ff249c54ae047931d7a6ebe05d00af73e0ffeb6e34bdb8",
-        "dest": "cargo/vendor",
-        "dest-filename": "cairo-rs-0.9.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22c5c0f2e047e8ca53d0ff249c54ae047931d7a6ebe05d00af73e0ffeb6e34bdb8%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/cairo-rs-0.9.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/cairo-sys-rs/cairo-sys-rs-0.10.0.crate",
-        "sha256": "2ed2639b9ad5f1d6efa76de95558e11339e7318426d84ac4890b86c03e828ca7",
-        "dest": "cargo/vendor",
-        "dest-filename": "cairo-sys-rs-0.10.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%222ed2639b9ad5f1d6efa76de95558e11339e7318426d84ac4890b86c03e828ca7%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/cairo-sys-rs-0.10.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/cc/cc-1.0.67.crate",
-        "sha256": "e3c69b077ad434294d3ce9f1f6143a2a4b89a8a2d54ef813d85003a4fd1137fd",
-        "dest": "cargo/vendor",
-        "dest-filename": "cc-1.0.67.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22e3c69b077ad434294d3ce9f1f6143a2a4b89a8a2d54ef813d85003a4fd1137fd%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/cc-1.0.67",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/cesu8/cesu8-1.1.0.crate",
-        "sha256": "6d43a04d8753f35258c91f8ec639f792891f748a1edbd759cf1dcea3382ad83c",
-        "dest": "cargo/vendor",
-        "dest-filename": "cesu8-1.1.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%226d43a04d8753f35258c91f8ec639f792891f748a1edbd759cf1dcea3382ad83c%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/cesu8-1.1.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/cexpr/cexpr-0.4.0.crate",
-        "sha256": "f4aedb84272dbe89af497cf81375129abda4fc0a9e7c5d317498c15cc30c0d27",
-        "dest": "cargo/vendor",
-        "dest-filename": "cexpr-0.4.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22f4aedb84272dbe89af497cf81375129abda4fc0a9e7c5d317498c15cc30c0d27%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/cexpr-0.4.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/cfg-if/cfg-if-0.1.10.crate",
-        "sha256": "4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822",
-        "dest": "cargo/vendor",
-        "dest-filename": "cfg-if-0.1.10.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%224785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/cfg-if-0.1.10",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/cfg-if/cfg-if-1.0.0.crate",
-        "sha256": "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd",
-        "dest": "cargo/vendor",
-        "dest-filename": "cfg-if-1.0.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/cfg-if-1.0.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/chrono/chrono-0.4.19.crate",
-        "sha256": "670ad68c9088c2a963aaa298cb369688cf3f9465ce5e2d4ca10e6e0098a1ce73",
-        "dest": "cargo/vendor",
-        "dest-filename": "chrono-0.4.19.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22670ad68c9088c2a963aaa298cb369688cf3f9465ce5e2d4ca10e6e0098a1ce73%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/chrono-0.4.19",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/clang-sys/clang-sys-1.2.0.crate",
-        "sha256": "853eda514c284c2287f4bf20ae614f8781f40a81d32ecda6e91449304dfe077c",
-        "dest": "cargo/vendor",
-        "dest-filename": "clang-sys-1.2.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22853eda514c284c2287f4bf20ae614f8781f40a81d32ecda6e91449304dfe077c%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/clang-sys-1.2.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/clap/clap-2.33.3.crate",
-        "sha256": "37e58ac78573c40708d45522f0d80fa2f01cc4f9b4e2bf749807255454312002",
-        "dest": "cargo/vendor",
-        "dest-filename": "clap-2.33.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2237e58ac78573c40708d45522f0d80fa2f01cc4f9b4e2bf749807255454312002%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/clap-2.33.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/claxon/claxon-0.4.3.crate",
-        "sha256": "4bfbf56724aa9eca8afa4fcfadeb479e722935bb2a0900c2d37e0cc477af0688",
-        "dest": "cargo/vendor",
-        "dest-filename": "claxon-0.4.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%224bfbf56724aa9eca8afa4fcfadeb479e722935bb2a0900c2d37e0cc477af0688%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/claxon-0.4.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/color_quant/color_quant-1.1.0.crate",
-        "sha256": "3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b",
-        "dest": "cargo/vendor",
-        "dest-filename": "color_quant-1.1.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%223d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/color_quant-1.1.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/combine/combine-4.5.2.crate",
-        "sha256": "cc4369b5e4c0cddf64ad8981c0111e7df4f7078f4d6ba98fb31f2e17c4c57b7e",
-        "dest": "cargo/vendor",
-        "dest-filename": "combine-4.5.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22cc4369b5e4c0cddf64ad8981c0111e7df4f7078f4d6ba98fb31f2e17c4c57b7e%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/combine-4.5.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/constant_time_eq/constant_time_eq-0.1.5.crate",
-        "sha256": "245097e9a4535ee1e3e3931fcfcd55a796a44c643e8596ff6566d68f09b87bbc",
-        "dest": "cargo/vendor",
-        "dest-filename": "constant_time_eq-0.1.5.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22245097e9a4535ee1e3e3931fcfcd55a796a44c643e8596ff6566d68f09b87bbc%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/constant_time_eq-0.1.5",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/core-foundation-sys/core-foundation-sys-0.6.2.crate",
-        "sha256": "e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b",
-        "dest": "cargo/vendor",
-        "dest-filename": "core-foundation-sys-0.6.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/core-foundation-sys-0.6.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/coreaudio-rs/coreaudio-rs-0.10.0.crate",
-        "sha256": "11894b20ebfe1ff903cbdc52259693389eea03b94918a2def2c30c3bf227ad88",
-        "dest": "cargo/vendor",
-        "dest-filename": "coreaudio-rs-0.10.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2211894b20ebfe1ff903cbdc52259693389eea03b94918a2def2c30c3bf227ad88%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/coreaudio-rs-0.10.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/coreaudio-sys/coreaudio-sys-0.2.8.crate",
-        "sha256": "2b7e3347be6a09b46aba228d6608386739fb70beff4f61e07422da87b0bb31fa",
-        "dest": "cargo/vendor",
-        "dest-filename": "coreaudio-sys-0.2.8.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%222b7e3347be6a09b46aba228d6608386739fb70beff4f61e07422da87b0bb31fa%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/coreaudio-sys-0.2.8",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/cpal/cpal-0.13.3.crate",
-        "sha256": "8351ddf2aaa3c583fa388029f8b3d26f3c7035a20911fdd5f2e2ed7ab57dad25",
-        "dest": "cargo/vendor",
-        "dest-filename": "cpal-0.13.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%228351ddf2aaa3c583fa388029f8b3d26f3c7035a20911fdd5f2e2ed7ab57dad25%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/cpal-0.13.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/crc32fast/crc32fast-1.2.1.crate",
-        "sha256": "81156fece84ab6a9f2afdb109ce3ae577e42b1228441eded99bd77f627953b1a",
-        "dest": "cargo/vendor",
-        "dest-filename": "crc32fast-1.2.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2281156fece84ab6a9f2afdb109ce3ae577e42b1228441eded99bd77f627953b1a%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/crc32fast-1.2.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/crossbeam-channel/crossbeam-channel-0.5.1.crate",
-        "sha256": "06ed27e177f16d65f0f0c22a213e17c696ace5dd64b14258b52f9417ccb52db4",
-        "dest": "cargo/vendor",
-        "dest-filename": "crossbeam-channel-0.5.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2206ed27e177f16d65f0f0c22a213e17c696ace5dd64b14258b52f9417ccb52db4%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/crossbeam-channel-0.5.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/crossbeam-deque/crossbeam-deque-0.8.0.crate",
-        "sha256": "94af6efb46fef72616855b036a624cf27ba656ffc9be1b9a3c931cfc7749a9a9",
-        "dest": "cargo/vendor",
-        "dest-filename": "crossbeam-deque-0.8.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2294af6efb46fef72616855b036a624cf27ba656ffc9be1b9a3c931cfc7749a9a9%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/crossbeam-deque-0.8.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/crossbeam-epoch/crossbeam-epoch-0.9.4.crate",
-        "sha256": "52fb27eab85b17fbb9f6fd667089e07d6a2eb8743d02639ee7f6a7a7729c9c94",
-        "dest": "cargo/vendor",
-        "dest-filename": "crossbeam-epoch-0.9.4.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2252fb27eab85b17fbb9f6fd667089e07d6a2eb8743d02639ee7f6a7a7729c9c94%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/crossbeam-epoch-0.9.4",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/crossbeam-utils/crossbeam-utils-0.8.4.crate",
-        "sha256": "4feb231f0d4d6af81aed15928e58ecf5816aa62a2393e2c82f46973e92a9a278",
-        "dest": "cargo/vendor",
-        "dest-filename": "crossbeam-utils-0.8.4.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%224feb231f0d4d6af81aed15928e58ecf5816aa62a2393e2c82f46973e92a9a278%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/crossbeam-utils-0.8.4",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/crypto-mac/crypto-mac-0.8.0.crate",
-        "sha256": "b584a330336237c1eecd3e94266efb216c56ed91225d634cb2991c5f3fd1aeab",
-        "dest": "cargo/vendor",
-        "dest-filename": "crypto-mac-0.8.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22b584a330336237c1eecd3e94266efb216c56ed91225d634cb2991c5f3fd1aeab%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/crypto-mac-0.8.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/darling/darling-0.10.2.crate",
-        "sha256": "0d706e75d87e35569db781a9b5e2416cff1236a47ed380831f959382ccd5f858",
-        "dest": "cargo/vendor",
-        "dest-filename": "darling-0.10.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%220d706e75d87e35569db781a9b5e2416cff1236a47ed380831f959382ccd5f858%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/darling-0.10.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/darling_core/darling_core-0.10.2.crate",
-        "sha256": "f0c960ae2da4de88a91b2d920c2a7233b400bc33cb28453a2987822d8392519b",
-        "dest": "cargo/vendor",
-        "dest-filename": "darling_core-0.10.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22f0c960ae2da4de88a91b2d920c2a7233b400bc33cb28453a2987822d8392519b%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/darling_core-0.10.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/darling_macro/darling_macro-0.10.2.crate",
-        "sha256": "d9b5a2f4ac4969822c62224815d069952656cadc7084fdca9751e6d959189b72",
-        "dest": "cargo/vendor",
-        "dest-filename": "darling_macro-0.10.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22d9b5a2f4ac4969822c62224815d069952656cadc7084fdca9751e6d959189b72%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/darling_macro-0.10.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/deflate/deflate-0.8.6.crate",
-        "sha256": "73770f8e1fe7d64df17ca66ad28994a0a623ea497fa69486e14984e715c5d174",
-        "dest": "cargo/vendor",
-        "dest-filename": "deflate-0.8.6.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2273770f8e1fe7d64df17ca66ad28994a0a623ea497fa69486e14984e715c5d174%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/deflate-0.8.6",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/derivative/derivative-2.2.0.crate",
-        "sha256": "fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b",
-        "dest": "cargo/vendor",
-        "dest-filename": "derivative-2.2.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/derivative-2.2.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/digest/digest-0.9.0.crate",
-        "sha256": "d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066",
-        "dest": "cargo/vendor",
-        "dest-filename": "digest-0.9.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/digest-0.9.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/directories-next/directories-next-2.0.0.crate",
-        "sha256": "339ee130d97a610ea5a5872d2bbb130fdf68884ff09d3028b81bec8a1ac23bbc",
-        "dest": "cargo/vendor",
-        "dest-filename": "directories-next-2.0.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22339ee130d97a610ea5a5872d2bbb130fdf68884ff09d3028b81bec8a1ac23bbc%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/directories-next-2.0.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/dirs-sys-next/dirs-sys-next-0.1.2.crate",
-        "sha256": "4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d",
-        "dest": "cargo/vendor",
-        "dest-filename": "dirs-sys-next-0.1.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%224ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/dirs-sys-next-0.1.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/either/either-1.6.1.crate",
-        "sha256": "e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457",
-        "dest": "cargo/vendor",
-        "dest-filename": "either-1.6.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/either-1.6.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/flate2/flate2-1.0.20.crate",
-        "sha256": "cd3aec53de10fe96d7d8c565eb17f2c687bb5518a2ec453b5b1252964526abe0",
-        "dest": "cargo/vendor",
-        "dest-filename": "flate2-1.0.20.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22cd3aec53de10fe96d7d8c565eb17f2c687bb5518a2ec453b5b1252964526abe0%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/flate2-1.0.20",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/fnv/fnv-1.0.7.crate",
-        "sha256": "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1",
-        "dest": "cargo/vendor",
-        "dest-filename": "fnv-1.0.7.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%223f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/fnv-1.0.7",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/futures/futures-0.3.14.crate",
-        "sha256": "a9d5813545e459ad3ca1bff9915e9ad7f1a47dc6a91b627ce321d5863b7dd253",
-        "dest": "cargo/vendor",
-        "dest-filename": "futures-0.3.14.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22a9d5813545e459ad3ca1bff9915e9ad7f1a47dc6a91b627ce321d5863b7dd253%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/futures-0.3.14",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/futures-channel/futures-channel-0.3.14.crate",
-        "sha256": "ce79c6a52a299137a6013061e0cf0e688fce5d7f1bc60125f520912fdb29ec25",
-        "dest": "cargo/vendor",
-        "dest-filename": "futures-channel-0.3.14.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22ce79c6a52a299137a6013061e0cf0e688fce5d7f1bc60125f520912fdb29ec25%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/futures-channel-0.3.14",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/futures-core/futures-core-0.3.14.crate",
-        "sha256": "098cd1c6dda6ca01650f1a37a794245eb73181d0d4d4e955e2f3c37db7af1815",
-        "dest": "cargo/vendor",
-        "dest-filename": "futures-core-0.3.14.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22098cd1c6dda6ca01650f1a37a794245eb73181d0d4d4e955e2f3c37db7af1815%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/futures-core-0.3.14",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/futures-executor/futures-executor-0.3.14.crate",
-        "sha256": "10f6cb7042eda00f0049b1d2080aa4b93442997ee507eb3828e8bd7577f94c9d",
-        "dest": "cargo/vendor",
-        "dest-filename": "futures-executor-0.3.14.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2210f6cb7042eda00f0049b1d2080aa4b93442997ee507eb3828e8bd7577f94c9d%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/futures-executor-0.3.14",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/futures-io/futures-io-0.3.14.crate",
-        "sha256": "365a1a1fb30ea1c03a830fdb2158f5236833ac81fa0ad12fe35b29cddc35cb04",
-        "dest": "cargo/vendor",
-        "dest-filename": "futures-io-0.3.14.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22365a1a1fb30ea1c03a830fdb2158f5236833ac81fa0ad12fe35b29cddc35cb04%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/futures-io-0.3.14",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/futures-macro/futures-macro-0.3.14.crate",
-        "sha256": "668c6733a182cd7deb4f1de7ba3bf2120823835b3bcfbeacf7d2c4a773c1bb8b",
-        "dest": "cargo/vendor",
-        "dest-filename": "futures-macro-0.3.14.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22668c6733a182cd7deb4f1de7ba3bf2120823835b3bcfbeacf7d2c4a773c1bb8b%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/futures-macro-0.3.14",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/futures-sink/futures-sink-0.3.14.crate",
-        "sha256": "5c5629433c555de3d82861a7a4e3794a4c40040390907cfbfd7143a92a426c23",
-        "dest": "cargo/vendor",
-        "dest-filename": "futures-sink-0.3.14.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%225c5629433c555de3d82861a7a4e3794a4c40040390907cfbfd7143a92a426c23%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/futures-sink-0.3.14",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/futures-task/futures-task-0.3.14.crate",
-        "sha256": "ba7aa51095076f3ba6d9a1f702f74bd05ec65f555d70d2033d55ba8d69f581bc",
-        "dest": "cargo/vendor",
-        "dest-filename": "futures-task-0.3.14.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22ba7aa51095076f3ba6d9a1f702f74bd05ec65f555d70d2033d55ba8d69f581bc%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/futures-task-0.3.14",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/futures-util/futures-util-0.3.14.crate",
-        "sha256": "3c144ad54d60f23927f0a6b6d816e4271278b64f005ad65e4e35291d2de9c025",
-        "dest": "cargo/vendor",
-        "dest-filename": "futures-util-0.3.14.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%223c144ad54d60f23927f0a6b6d816e4271278b64f005ad65e4e35291d2de9c025%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/futures-util-0.3.14",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/gdk/gdk-0.13.2.crate",
-        "sha256": "db00839b2a68a7a10af3fa28dfb3febaba3a20c3a9ac2425a33b7df1f84a6b7d",
-        "dest": "cargo/vendor",
-        "dest-filename": "gdk-0.13.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22db00839b2a68a7a10af3fa28dfb3febaba3a20c3a9ac2425a33b7df1f84a6b7d%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/gdk-0.13.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/gdk-pixbuf/gdk-pixbuf-0.9.0.crate",
-        "sha256": "8f6dae3cb99dd49b758b88f0132f8d401108e63ae8edd45f432d42cdff99998a",
-        "dest": "cargo/vendor",
-        "dest-filename": "gdk-pixbuf-0.9.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%228f6dae3cb99dd49b758b88f0132f8d401108e63ae8edd45f432d42cdff99998a%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/gdk-pixbuf-0.9.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/gdk-pixbuf-sys/gdk-pixbuf-sys-0.10.0.crate",
-        "sha256": "3bfe468a7f43e97b8d193a762b6c5cf67a7d36cacbc0b9291dbcae24bfea1e8f",
-        "dest": "cargo/vendor",
-        "dest-filename": "gdk-pixbuf-sys-0.10.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%223bfe468a7f43e97b8d193a762b6c5cf67a7d36cacbc0b9291dbcae24bfea1e8f%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/gdk-pixbuf-sys-0.10.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/gdk-sys/gdk-sys-0.10.0.crate",
-        "sha256": "0a9653cfc500fd268015b1ac055ddbc3df7a5c9ea3f4ccef147b3957bd140d69",
-        "dest": "cargo/vendor",
-        "dest-filename": "gdk-sys-0.10.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%220a9653cfc500fd268015b1ac055ddbc3df7a5c9ea3f4ccef147b3957bd140d69%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/gdk-sys-0.10.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/generic-array/generic-array-0.14.4.crate",
-        "sha256": "501466ecc8a30d1d3b7fc9229b122b2ce8ed6e9d9223f1138d4babb253e51817",
-        "dest": "cargo/vendor",
-        "dest-filename": "generic-array-0.14.4.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22501466ecc8a30d1d3b7fc9229b122b2ce8ed6e9d9223f1138d4babb253e51817%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/generic-array-0.14.4",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/getrandom/getrandom-0.2.2.crate",
-        "sha256": "c9495705279e7140bf035dde1f6e750c162df8b625267cd52cc44e0b156732c8",
-        "dest": "cargo/vendor",
-        "dest-filename": "getrandom-0.2.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22c9495705279e7140bf035dde1f6e750c162df8b625267cd52cc44e0b156732c8%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/getrandom-0.2.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/gif/gif-0.11.2.crate",
-        "sha256": "5a668f699973d0f573d15749b7002a9ac9e1f9c6b220e7b165601334c173d8de",
-        "dest": "cargo/vendor",
-        "dest-filename": "gif-0.11.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%225a668f699973d0f573d15749b7002a9ac9e1f9c6b220e7b165601334c173d8de%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/gif-0.11.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/gio/gio-0.9.1.crate",
-        "sha256": "1fb60242bfff700772dae5d9e3a1f7aa2e4ebccf18b89662a16acb2822568561",
-        "dest": "cargo/vendor",
-        "dest-filename": "gio-0.9.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%221fb60242bfff700772dae5d9e3a1f7aa2e4ebccf18b89662a16acb2822568561%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/gio-0.9.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/gio-sys/gio-sys-0.10.1.crate",
-        "sha256": "5e24fb752f8f5d2cf6bbc2c606fd2bc989c81c5e2fe321ab974d54f8b6344eac",
-        "dest": "cargo/vendor",
-        "dest-filename": "gio-sys-0.10.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%225e24fb752f8f5d2cf6bbc2c606fd2bc989c81c5e2fe321ab974d54f8b6344eac%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/gio-sys-0.10.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/glib/glib-0.10.3.crate",
-        "sha256": "0c685013b7515e668f1b57a165b009d4d28cb139a8a989bbd699c10dad29d0c5",
-        "dest": "cargo/vendor",
-        "dest-filename": "glib-0.10.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%220c685013b7515e668f1b57a165b009d4d28cb139a8a989bbd699c10dad29d0c5%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/glib-0.10.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/glib-macros/glib-macros-0.10.1.crate",
-        "sha256": "41486a26d1366a8032b160b59065a59fb528530a46a49f627e7048fb8c064039",
-        "dest": "cargo/vendor",
-        "dest-filename": "glib-macros-0.10.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2241486a26d1366a8032b160b59065a59fb528530a46a49f627e7048fb8c064039%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/glib-macros-0.10.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/glib-sys/glib-sys-0.10.1.crate",
-        "sha256": "c7e9b997a66e9a23d073f2b1abb4dbfc3925e0b8952f67efd8d9b6e168e4cdc1",
-        "dest": "cargo/vendor",
-        "dest-filename": "glib-sys-0.10.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22c7e9b997a66e9a23d073f2b1abb4dbfc3925e0b8952f67efd8d9b6e168e4cdc1%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/glib-sys-0.10.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/glob/glob-0.3.0.crate",
-        "sha256": "9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574",
-        "dest": "cargo/vendor",
-        "dest-filename": "glob-0.3.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%229b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/glob-0.3.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/gobject-sys/gobject-sys-0.10.0.crate",
-        "sha256": "952133b60c318a62bf82ee75b93acc7e84028a093e06b9e27981c2b6fe68218c",
-        "dest": "cargo/vendor",
-        "dest-filename": "gobject-sys-0.10.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22952133b60c318a62bf82ee75b93acc7e84028a093e06b9e27981c2b6fe68218c%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/gobject-sys-0.10.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/gtk/gtk-0.9.2.crate",
-        "sha256": "2f022f2054072b3af07666341984562c8e626a79daa8be27b955d12d06a5ad6a",
-        "dest": "cargo/vendor",
-        "dest-filename": "gtk-0.9.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%222f022f2054072b3af07666341984562c8e626a79daa8be27b955d12d06a5ad6a%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/gtk-0.9.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/gtk-sys/gtk-sys-0.10.0.crate",
-        "sha256": "89acda6f084863307d948ba64a4b1ef674e8527dddab147ee4cdcc194c880457",
-        "dest": "cargo/vendor",
-        "dest-filename": "gtk-sys-0.10.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2289acda6f084863307d948ba64a4b1ef674e8527dddab147ee4cdcc194c880457%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/gtk-sys-0.10.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/hamming/hamming-0.1.3.crate",
-        "sha256": "65043da274378d68241eb9a8f8f8aa54e349136f7b8e12f63e3ef44043cc30e1",
-        "dest": "cargo/vendor",
-        "dest-filename": "hamming-0.1.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2265043da274378d68241eb9a8f8f8aa54e349136f7b8e12f63e3ef44043cc30e1%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/hamming-0.1.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/heck/heck-0.3.2.crate",
-        "sha256": "87cbf45460356b7deeb5e3415b5563308c0a9b057c85e12b06ad551f98d0a6ac",
-        "dest": "cargo/vendor",
-        "dest-filename": "heck-0.3.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2287cbf45460356b7deeb5e3415b5563308c0a9b057c85e12b06ad551f98d0a6ac%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/heck-0.3.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/hermit-abi/hermit-abi-0.1.18.crate",
-        "sha256": "322f4de77956e22ed0e5032c359a0f1273f1f7f0d79bfa3b8ffbc730d7fbcc5c",
-        "dest": "cargo/vendor",
-        "dest-filename": "hermit-abi-0.1.18.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22322f4de77956e22ed0e5032c359a0f1273f1f7f0d79bfa3b8ffbc730d7fbcc5c%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/hermit-abi-0.1.18",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/hex/hex-0.4.3.crate",
-        "sha256": "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70",
-        "dest": "cargo/vendor",
-        "dest-filename": "hex-0.4.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%227f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/hex-0.4.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/hound/hound-3.4.0.crate",
-        "sha256": "8a164bb2ceaeff4f42542bdb847c41517c78a60f5649671b2a07312b6e117549",
-        "dest": "cargo/vendor",
-        "dest-filename": "hound-3.4.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%228a164bb2ceaeff4f42542bdb847c41517c78a60f5649671b2a07312b6e117549%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/hound-3.4.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/humansize/humansize-1.1.0.crate",
-        "sha256": "b6cab2627acfc432780848602f3f558f7e9dd427352224b0d9324025796d2a5e",
-        "dest": "cargo/vendor",
-        "dest-filename": "humansize-1.1.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22b6cab2627acfc432780848602f3f558f7e9dd427352224b0d9324025796d2a5e%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/humansize-1.1.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/id3/id3-0.5.3.crate",
-        "sha256": "8cb37ae5aa60d57c5f3412df1f3e5a48a978804f4a7e70700bb5f97e8f1a6331",
-        "dest": "cargo/vendor",
-        "dest-filename": "id3-0.5.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%228cb37ae5aa60d57c5f3412df1f3e5a48a978804f4a7e70700bb5f97e8f1a6331%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/id3-0.5.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/ident_case/ident_case-1.0.1.crate",
-        "sha256": "b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39",
-        "dest": "cargo/vendor",
-        "dest-filename": "ident_case-1.0.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/ident_case-1.0.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/image/image-0.23.14.crate",
-        "sha256": "24ffcb7e7244a9bf19d35bf2883b9c080c4ced3c07a9895572178cdb8f13f6a1",
-        "dest": "cargo/vendor",
-        "dest-filename": "image-0.23.14.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2224ffcb7e7244a9bf19d35bf2883b9c080c4ced3c07a9895572178cdb8f13f6a1%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/image-0.23.14",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/img_hash/img_hash-3.2.0.crate",
-        "sha256": "5ea4eac6fc4f64ed363d5c210732b747bfa5ddd8a25ac347d887f298c3a70b49",
-        "dest": "cargo/vendor",
-        "dest-filename": "img_hash-3.2.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%225ea4eac6fc4f64ed363d5c210732b747bfa5ddd8a25ac347d887f298c3a70b49%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/img_hash-3.2.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/instant/instant-0.1.9.crate",
-        "sha256": "61124eeebbd69b8190558df225adf7e4caafce0d743919e5d6b19652314ec5ec",
-        "dest": "cargo/vendor",
-        "dest-filename": "instant-0.1.9.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2261124eeebbd69b8190558df225adf7e4caafce0d743919e5d6b19652314ec5ec%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/instant-0.1.9",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/itertools/itertools-0.9.0.crate",
-        "sha256": "284f18f85651fe11e8a991b2adb42cb078325c996ed026d994719efcfca1d54b",
-        "dest": "cargo/vendor",
-        "dest-filename": "itertools-0.9.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22284f18f85651fe11e8a991b2adb42cb078325c996ed026d994719efcfca1d54b%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/itertools-0.9.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/jni/jni-0.18.0.crate",
-        "sha256": "24967112a1e4301ca5342ea339763613a37592b8a6ce6cf2e4494537c7a42faf",
-        "dest": "cargo/vendor",
-        "dest-filename": "jni-0.18.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2224967112a1e4301ca5342ea339763613a37592b8a6ce6cf2e4494537c7a42faf%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/jni-0.18.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/jni-sys/jni-sys-0.3.0.crate",
-        "sha256": "8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130",
-        "dest": "cargo/vendor",
-        "dest-filename": "jni-sys-0.3.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%228eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/jni-sys-0.3.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/jobserver/jobserver-0.1.22.crate",
-        "sha256": "972f5ae5d1cb9c6ae417789196c803205313edde988685da5e3aae0827b9e7fd",
-        "dest": "cargo/vendor",
-        "dest-filename": "jobserver-0.1.22.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22972f5ae5d1cb9c6ae417789196c803205313edde988685da5e3aae0827b9e7fd%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/jobserver-0.1.22",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/jpeg-decoder/jpeg-decoder-0.1.22.crate",
-        "sha256": "229d53d58899083193af11e15917b5640cd40b29ff475a1fe4ef725deb02d0f2",
-        "dest": "cargo/vendor",
-        "dest-filename": "jpeg-decoder-0.1.22.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22229d53d58899083193af11e15917b5640cd40b29ff475a1fe4ef725deb02d0f2%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/jpeg-decoder-0.1.22",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/js-sys/js-sys-0.3.50.crate",
-        "sha256": "2d99f9e3e84b8f67f846ef5b4cbbc3b1c29f6c759fcbce6f01aa0e73d932a24c",
-        "dest": "cargo/vendor",
-        "dest-filename": "js-sys-0.3.50.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%222d99f9e3e84b8f67f846ef5b4cbbc3b1c29f6c759fcbce6f01aa0e73d932a24c%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/js-sys-0.3.50",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/lazy_static/lazy_static-1.4.0.crate",
-        "sha256": "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646",
-        "dest": "cargo/vendor",
-        "dest-filename": "lazy_static-1.4.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/lazy_static-1.4.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/lazycell/lazycell-1.3.0.crate",
-        "sha256": "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55",
-        "dest": "cargo/vendor",
-        "dest-filename": "lazycell-1.3.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/lazycell-1.3.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/lewton/lewton-0.10.2.crate",
-        "sha256": "777b48df9aaab155475a83a7df3070395ea1ac6902f5cd062b8f2b028075c030",
-        "dest": "cargo/vendor",
-        "dest-filename": "lewton-0.10.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22777b48df9aaab155475a83a7df3070395ea1ac6902f5cd062b8f2b028075c030%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/lewton-0.10.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/libc/libc-0.2.94.crate",
-        "sha256": "18794a8ad5b29321f790b55d93dfba91e125cb1a9edbd4f8e3150acc771c1a5e",
-        "dest": "cargo/vendor",
-        "dest-filename": "libc-0.2.94.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2218794a8ad5b29321f790b55d93dfba91e125cb1a9edbd4f8e3150acc771c1a5e%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/libc-0.2.94",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/libloading/libloading-0.7.0.crate",
-        "sha256": "6f84d96438c15fcd6c3f244c8fce01d1e2b9c6b5623e9c711dc9286d8fc92d6a",
-        "dest": "cargo/vendor",
-        "dest-filename": "libloading-0.7.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%226f84d96438c15fcd6c3f244c8fce01d1e2b9c6b5623e9c711dc9286d8fc92d6a%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/libloading-0.7.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/lock_api/lock_api-0.4.4.crate",
-        "sha256": "0382880606dff6d15c9476c416d18690b72742aa7b605bb6dd6ec9030fbf07eb",
-        "dest": "cargo/vendor",
-        "dest-filename": "lock_api-0.4.4.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%220382880606dff6d15c9476c416d18690b72742aa7b605bb6dd6ec9030fbf07eb%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/lock_api-0.4.4",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/log/log-0.4.14.crate",
-        "sha256": "51b9bbe6c47d51fc3e1a9b945965946b4c44142ab8792c50835a980d362c2710",
-        "dest": "cargo/vendor",
-        "dest-filename": "log-0.4.14.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2251b9bbe6c47d51fc3e1a9b945965946b4c44142ab8792c50835a980d362c2710%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/log-0.4.14",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/mach/mach-0.3.2.crate",
-        "sha256": "b823e83b2affd8f40a9ee8c29dbc56404c1e34cd2710921f2801e2cf29527afa",
-        "dest": "cargo/vendor",
-        "dest-filename": "mach-0.3.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22b823e83b2affd8f40a9ee8c29dbc56404c1e34cd2710921f2801e2cf29527afa%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/mach-0.3.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/memchr/memchr-2.4.0.crate",
-        "sha256": "b16bd47d9e329435e309c58469fe0791c2d0d1ba96ec0954152a5ae2b04387dc",
-        "dest": "cargo/vendor",
-        "dest-filename": "memchr-2.4.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22b16bd47d9e329435e309c58469fe0791c2d0d1ba96ec0954152a5ae2b04387dc%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/memchr-2.4.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/memoffset/memoffset-0.6.3.crate",
-        "sha256": "f83fb6581e8ed1f85fd45c116db8405483899489e38406156c25eb743554361d",
-        "dest": "cargo/vendor",
-        "dest-filename": "memoffset-0.6.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22f83fb6581e8ed1f85fd45c116db8405483899489e38406156c25eb743554361d%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/memoffset-0.6.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/metaflac/metaflac-0.2.4.crate",
-        "sha256": "4685bf0039a9d2919c2dbb281cba1c58d168dce58f519cbd70c468ce2c36a748",
-        "dest": "cargo/vendor",
-        "dest-filename": "metaflac-0.2.4.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%224685bf0039a9d2919c2dbb281cba1c58d168dce58f519cbd70c468ce2c36a748%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/metaflac-0.2.4",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/minimp3/minimp3-0.5.1.crate",
-        "sha256": "985438f75febf74c392071a975a29641b420dd84431135a6e6db721de4b74372",
-        "dest": "cargo/vendor",
-        "dest-filename": "minimp3-0.5.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22985438f75febf74c392071a975a29641b420dd84431135a6e6db721de4b74372%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/minimp3-0.5.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/minimp3-sys/minimp3-sys-0.3.2.crate",
-        "sha256": "e21c73734c69dc95696c9ed8926a2b393171d98b3f5f5935686a26a487ab9b90",
-        "dest": "cargo/vendor",
-        "dest-filename": "minimp3-sys-0.3.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22e21c73734c69dc95696c9ed8926a2b393171d98b3f5f5935686a26a487ab9b90%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/minimp3-sys-0.3.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/miniz_oxide/miniz_oxide-0.3.7.crate",
-        "sha256": "791daaae1ed6889560f8c4359194f56648355540573244a5448a83ba1ecc7435",
-        "dest": "cargo/vendor",
-        "dest-filename": "miniz_oxide-0.3.7.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22791daaae1ed6889560f8c4359194f56648355540573244a5448a83ba1ecc7435%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/miniz_oxide-0.3.7",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/miniz_oxide/miniz_oxide-0.4.4.crate",
-        "sha256": "a92518e98c078586bc6c934028adcca4c92a53d6a958196de835170a01d84e4b",
-        "dest": "cargo/vendor",
-        "dest-filename": "miniz_oxide-0.4.4.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22a92518e98c078586bc6c934028adcca4c92a53d6a958196de835170a01d84e4b%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/miniz_oxide-0.4.4",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/mp4ameta/mp4ameta-0.6.1.crate",
-        "sha256": "1ef7a2ba51feaa9e7be2209b6e5d7472d08427ef0ce88616ed93c66dae9601b2",
-        "dest": "cargo/vendor",
-        "dest-filename": "mp4ameta-0.6.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%221ef7a2ba51feaa9e7be2209b6e5d7472d08427ef0ce88616ed93c66dae9601b2%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/mp4ameta-0.6.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/mp4ameta_proc/mp4ameta_proc-0.1.1.crate",
-        "sha256": "64ae83441f6b67e3b7f009295618e90f03228b0f1a149f56ee8cd0f6bb5602c5",
-        "dest": "cargo/vendor",
-        "dest-filename": "mp4ameta_proc-0.1.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2264ae83441f6b67e3b7f009295618e90f03228b0f1a149f56ee8cd0f6bb5602c5%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/mp4ameta_proc-0.1.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/ndk/ndk-0.3.0.crate",
-        "sha256": "8794322172319b972f528bf90c6b467be0079f1fa82780ffb431088e741a73ab",
-        "dest": "cargo/vendor",
-        "dest-filename": "ndk-0.3.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%228794322172319b972f528bf90c6b467be0079f1fa82780ffb431088e741a73ab%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/ndk-0.3.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/ndk-glue/ndk-glue-0.3.0.crate",
-        "sha256": "c5caf0c24d51ac1c905c27d4eda4fa0635bbe0de596b8f79235e0b17a4d29385",
-        "dest": "cargo/vendor",
-        "dest-filename": "ndk-glue-0.3.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22c5caf0c24d51ac1c905c27d4eda4fa0635bbe0de596b8f79235e0b17a4d29385%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/ndk-glue-0.3.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/ndk-macro/ndk-macro-0.2.0.crate",
-        "sha256": "05d1c6307dc424d0f65b9b06e94f88248e6305726b14729fd67a5e47b2dc481d",
-        "dest": "cargo/vendor",
-        "dest-filename": "ndk-macro-0.2.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2205d1c6307dc424d0f65b9b06e94f88248e6305726b14729fd67a5e47b2dc481d%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/ndk-macro-0.2.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/ndk-sys/ndk-sys-0.2.1.crate",
-        "sha256": "c44922cb3dbb1c70b5e5f443d63b64363a898564d739ba5198e3a9138442868d",
-        "dest": "cargo/vendor",
-        "dest-filename": "ndk-sys-0.2.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22c44922cb3dbb1c70b5e5f443d63b64363a898564d739ba5198e3a9138442868d%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/ndk-sys-0.2.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/nix/nix-0.20.0.crate",
-        "sha256": "fa9b4819da1bc61c0ea48b63b7bc8604064dd43013e7cc325df098d49cd7c18a",
-        "dest": "cargo/vendor",
-        "dest-filename": "nix-0.20.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22fa9b4819da1bc61c0ea48b63b7bc8604064dd43013e7cc325df098d49cd7c18a%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/nix-0.20.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/nom/nom-5.1.2.crate",
-        "sha256": "ffb4262d26ed83a1c0a33a38fe2bb15797329c85770da05e6b828ddb782627af",
-        "dest": "cargo/vendor",
-        "dest-filename": "nom-5.1.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22ffb4262d26ed83a1c0a33a38fe2bb15797329c85770da05e6b828ddb782627af%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/nom-5.1.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/num-complex/num-complex-0.2.4.crate",
-        "sha256": "b6b19411a9719e753aff12e5187b74d60d3dc449ec3f4dc21e3989c3f554bc95",
-        "dest": "cargo/vendor",
-        "dest-filename": "num-complex-0.2.4.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22b6b19411a9719e753aff12e5187b74d60d3dc449ec3f4dc21e3989c3f554bc95%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/num-complex-0.2.4",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/num-derive/num-derive-0.3.3.crate",
-        "sha256": "876a53fff98e03a936a674b29568b0e605f06b29372c2489ff4de23f1949743d",
-        "dest": "cargo/vendor",
-        "dest-filename": "num-derive-0.3.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22876a53fff98e03a936a674b29568b0e605f06b29372c2489ff4de23f1949743d%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/num-derive-0.3.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/num-integer/num-integer-0.1.44.crate",
-        "sha256": "d2cc698a63b549a70bc047073d2949cce27cd1c7b0a4a862d08a8031bc2801db",
-        "dest": "cargo/vendor",
-        "dest-filename": "num-integer-0.1.44.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22d2cc698a63b549a70bc047073d2949cce27cd1c7b0a4a862d08a8031bc2801db%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/num-integer-0.1.44",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/num-iter/num-iter-0.1.42.crate",
-        "sha256": "b2021c8337a54d21aca0d59a92577a029af9431cb59b909b03252b9c164fad59",
-        "dest": "cargo/vendor",
-        "dest-filename": "num-iter-0.1.42.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22b2021c8337a54d21aca0d59a92577a029af9431cb59b909b03252b9c164fad59%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/num-iter-0.1.42",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/num-rational/num-rational-0.3.2.crate",
-        "sha256": "12ac428b1cb17fce6f731001d307d351ec70a6d202fc2e60f7d4c5e42d8f4f07",
-        "dest": "cargo/vendor",
-        "dest-filename": "num-rational-0.3.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2212ac428b1cb17fce6f731001d307d351ec70a6d202fc2e60f7d4c5e42d8f4f07%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/num-rational-0.3.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/num-traits/num-traits-0.2.14.crate",
-        "sha256": "9a64b1ec5cda2586e284722486d802acf1f7dbdc623e2bfc57e65ca1cd099290",
-        "dest": "cargo/vendor",
-        "dest-filename": "num-traits-0.2.14.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%229a64b1ec5cda2586e284722486d802acf1f7dbdc623e2bfc57e65ca1cd099290%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/num-traits-0.2.14",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/num_cpus/num_cpus-1.13.0.crate",
-        "sha256": "05499f3756671c15885fee9034446956fff3f243d6077b91e5767df161f766b3",
-        "dest": "cargo/vendor",
-        "dest-filename": "num_cpus-1.13.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2205499f3756671c15885fee9034446956fff3f243d6077b91e5767df161f766b3%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/num_cpus-1.13.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/num_enum/num_enum-0.5.1.crate",
-        "sha256": "226b45a5c2ac4dd696ed30fa6b94b057ad909c7b7fc2e0d0808192bced894066",
-        "dest": "cargo/vendor",
-        "dest-filename": "num_enum-0.5.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22226b45a5c2ac4dd696ed30fa6b94b057ad909c7b7fc2e0d0808192bced894066%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/num_enum-0.5.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/num_enum_derive/num_enum_derive-0.5.1.crate",
-        "sha256": "1c0fd9eba1d5db0994a239e09c1be402d35622277e35468ba891aa5e3188ce7e",
-        "dest": "cargo/vendor",
-        "dest-filename": "num_enum_derive-0.5.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%221c0fd9eba1d5db0994a239e09c1be402d35622277e35468ba891aa5e3188ce7e%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/num_enum_derive-0.5.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/oboe/oboe-0.4.1.crate",
-        "sha256": "4cfb2390bddb9546c0f7448fd1d2abdd39e6075206f960991eb28c7fa7f126c4",
-        "dest": "cargo/vendor",
-        "dest-filename": "oboe-0.4.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%224cfb2390bddb9546c0f7448fd1d2abdd39e6075206f960991eb28c7fa7f126c4%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/oboe-0.4.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/oboe-sys/oboe-sys-0.4.0.crate",
-        "sha256": "fe069264d082fc820dfa172f79be3f2e088ecfece9b1c47b0c9fd838d2bef103",
-        "dest": "cargo/vendor",
-        "dest-filename": "oboe-sys-0.4.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22fe069264d082fc820dfa172f79be3f2e088ecfece9b1c47b0c9fd838d2bef103%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/oboe-sys-0.4.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/ogg/ogg-0.8.0.crate",
-        "sha256": "6951b4e8bf21c8193da321bcce9c9dd2e13c858fe078bf9054a288b419ae5d6e",
-        "dest": "cargo/vendor",
-        "dest-filename": "ogg-0.8.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%226951b4e8bf21c8193da321bcce9c9dd2e13c858fe078bf9054a288b419ae5d6e%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/ogg-0.8.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/once_cell/once_cell-1.7.2.crate",
-        "sha256": "af8b08b04175473088b46763e51ee54da5f9a164bc162f615b91bc179dbf15a3",
-        "dest": "cargo/vendor",
-        "dest-filename": "once_cell-1.7.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22af8b08b04175473088b46763e51ee54da5f9a164bc162f615b91bc179dbf15a3%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/once_cell-1.7.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/open/open-1.7.0.crate",
-        "sha256": "1711eb4b31ce4ad35b0f316d8dfba4fe5c7ad601c448446d84aae7a896627b20",
-        "dest": "cargo/vendor",
-        "dest-filename": "open-1.7.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%221711eb4b31ce4ad35b0f316d8dfba4fe5c7ad601c448446d84aae7a896627b20%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/open-1.7.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/pango/pango-0.9.1.crate",
-        "sha256": "9937068580bebd8ced19975938573803273ccbcbd598c58d4906efd4ac87c438",
-        "dest": "cargo/vendor",
-        "dest-filename": "pango-0.9.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%229937068580bebd8ced19975938573803273ccbcbd598c58d4906efd4ac87c438%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/pango-0.9.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/pango-sys/pango-sys-0.10.0.crate",
-        "sha256": "24d2650c8b62d116c020abd0cea26a4ed96526afda89b1c4ea567131fdefc890",
-        "dest": "cargo/vendor",
-        "dest-filename": "pango-sys-0.10.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2224d2650c8b62d116c020abd0cea26a4ed96526afda89b1c4ea567131fdefc890%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/pango-sys-0.10.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/parking_lot/parking_lot-0.11.1.crate",
-        "sha256": "6d7744ac029df22dca6284efe4e898991d28e3085c706c972bcd7da4a27a15eb",
-        "dest": "cargo/vendor",
-        "dest-filename": "parking_lot-0.11.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%226d7744ac029df22dca6284efe4e898991d28e3085c706c972bcd7da4a27a15eb%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/parking_lot-0.11.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/parking_lot_core/parking_lot_core-0.8.3.crate",
-        "sha256": "fa7a782938e745763fe6907fc6ba86946d72f49fe7e21de074e08128a99fb018",
-        "dest": "cargo/vendor",
-        "dest-filename": "parking_lot_core-0.8.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22fa7a782938e745763fe6907fc6ba86946d72f49fe7e21de074e08128a99fb018%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/parking_lot_core-0.8.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/peeking_take_while/peeking_take_while-0.1.2.crate",
-        "sha256": "19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099",
-        "dest": "cargo/vendor",
-        "dest-filename": "peeking_take_while-0.1.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2219b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/peeking_take_while-0.1.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/pin-project-lite/pin-project-lite-0.2.6.crate",
-        "sha256": "dc0e1f259c92177c30a4c9d177246edd0a3568b25756a977d0632cf8fa37e905",
-        "dest": "cargo/vendor",
-        "dest-filename": "pin-project-lite-0.2.6.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22dc0e1f259c92177c30a4c9d177246edd0a3568b25756a977d0632cf8fa37e905%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/pin-project-lite-0.2.6",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/pin-utils/pin-utils-0.1.0.crate",
-        "sha256": "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184",
-        "dest": "cargo/vendor",
-        "dest-filename": "pin-utils-0.1.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%228b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/pin-utils-0.1.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/pkg-config/pkg-config-0.3.19.crate",
-        "sha256": "3831453b3449ceb48b6d9c7ad7c96d5ea673e9b470a1dc578c2ce6521230884c",
-        "dest": "cargo/vendor",
-        "dest-filename": "pkg-config-0.3.19.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%223831453b3449ceb48b6d9c7ad7c96d5ea673e9b470a1dc578c2ce6521230884c%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/pkg-config-0.3.19",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/png/png-0.16.8.crate",
-        "sha256": "3c3287920cb847dee3de33d301c463fba14dda99db24214ddf93f83d3021f4c6",
-        "dest": "cargo/vendor",
-        "dest-filename": "png-0.16.8.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%223c3287920cb847dee3de33d301c463fba14dda99db24214ddf93f83d3021f4c6%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/png-0.16.8",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/ppv-lite86/ppv-lite86-0.2.10.crate",
-        "sha256": "ac74c624d6b2d21f425f752262f42188365d7b8ff1aff74c82e45136510a4857",
-        "dest": "cargo/vendor",
-        "dest-filename": "ppv-lite86-0.2.10.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22ac74c624d6b2d21f425f752262f42188365d7b8ff1aff74c82e45136510a4857%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/ppv-lite86-0.2.10",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/proc-macro-crate/proc-macro-crate-0.1.5.crate",
-        "sha256": "1d6ea3c4595b96363c13943497db34af4460fb474a95c43f4446ad341b8c9785",
-        "dest": "cargo/vendor",
-        "dest-filename": "proc-macro-crate-0.1.5.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%221d6ea3c4595b96363c13943497db34af4460fb474a95c43f4446ad341b8c9785%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/proc-macro-crate-0.1.5",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/proc-macro-error/proc-macro-error-1.0.4.crate",
-        "sha256": "da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c",
-        "dest": "cargo/vendor",
-        "dest-filename": "proc-macro-error-1.0.4.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/proc-macro-error-1.0.4",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/proc-macro-error-attr/proc-macro-error-attr-1.0.4.crate",
-        "sha256": "a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869",
-        "dest": "cargo/vendor",
-        "dest-filename": "proc-macro-error-attr-1.0.4.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/proc-macro-error-attr-1.0.4",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/proc-macro-hack/proc-macro-hack-0.5.19.crate",
-        "sha256": "dbf0c48bc1d91375ae5c3cd81e3722dff1abcf81a30960240640d223f59fe0e5",
-        "dest": "cargo/vendor",
-        "dest-filename": "proc-macro-hack-0.5.19.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22dbf0c48bc1d91375ae5c3cd81e3722dff1abcf81a30960240640d223f59fe0e5%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/proc-macro-hack-0.5.19",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/proc-macro-nested/proc-macro-nested-0.1.7.crate",
-        "sha256": "bc881b2c22681370c6a780e47af9840ef841837bc98118431d4e1868bd0c1086",
-        "dest": "cargo/vendor",
-        "dest-filename": "proc-macro-nested-0.1.7.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22bc881b2c22681370c6a780e47af9840ef841837bc98118431d4e1868bd0c1086%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/proc-macro-nested-0.1.7",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/proc-macro2/proc-macro2-1.0.26.crate",
-        "sha256": "a152013215dca273577e18d2bf00fa862b89b24169fb78c4c95aeb07992c9cec",
-        "dest": "cargo/vendor",
-        "dest-filename": "proc-macro2-1.0.26.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22a152013215dca273577e18d2bf00fa862b89b24169fb78c4c95aeb07992c9cec%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/proc-macro2-1.0.26",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/quote/quote-1.0.9.crate",
-        "sha256": "c3d0b9745dc2debf507c8422de05d7226cc1f0644216dfdfead988f9b1ab32a7",
-        "dest": "cargo/vendor",
-        "dest-filename": "quote-1.0.9.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22c3d0b9745dc2debf507c8422de05d7226cc1f0644216dfdfead988f9b1ab32a7%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/quote-1.0.9",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/rand/rand-0.8.3.crate",
-        "sha256": "0ef9e7e66b4468674bfcb0c81af8b7fa0bb154fa9f28eb840da5c447baeb8d7e",
-        "dest": "cargo/vendor",
-        "dest-filename": "rand-0.8.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%220ef9e7e66b4468674bfcb0c81af8b7fa0bb154fa9f28eb840da5c447baeb8d7e%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/rand-0.8.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/rand_chacha/rand_chacha-0.3.0.crate",
-        "sha256": "e12735cf05c9e10bf21534da50a147b924d555dc7a547c42e6bb2d5b6017ae0d",
-        "dest": "cargo/vendor",
-        "dest-filename": "rand_chacha-0.3.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22e12735cf05c9e10bf21534da50a147b924d555dc7a547c42e6bb2d5b6017ae0d%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/rand_chacha-0.3.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/rand_core/rand_core-0.6.2.crate",
-        "sha256": "34cf66eb183df1c5876e2dcf6b13d57340741e8dc255b48e40a26de954d06ae7",
-        "dest": "cargo/vendor",
-        "dest-filename": "rand_core-0.6.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2234cf66eb183df1c5876e2dcf6b13d57340741e8dc255b48e40a26de954d06ae7%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/rand_core-0.6.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/rand_hc/rand_hc-0.3.0.crate",
-        "sha256": "3190ef7066a446f2e7f42e239d161e905420ccab01eb967c9eb27d21b2322a73",
-        "dest": "cargo/vendor",
-        "dest-filename": "rand_hc-0.3.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%223190ef7066a446f2e7f42e239d161e905420ccab01eb967c9eb27d21b2322a73%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/rand_hc-0.3.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/rayon/rayon-1.5.0.crate",
-        "sha256": "8b0d8e0819fadc20c74ea8373106ead0600e3a67ef1fe8da56e39b9ae7275674",
-        "dest": "cargo/vendor",
-        "dest-filename": "rayon-1.5.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%228b0d8e0819fadc20c74ea8373106ead0600e3a67ef1fe8da56e39b9ae7275674%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/rayon-1.5.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/rayon-core/rayon-core-1.9.0.crate",
-        "sha256": "9ab346ac5921dc62ffa9f89b7a773907511cdfa5490c572ae9be1be33e8afa4a",
-        "dest": "cargo/vendor",
-        "dest-filename": "rayon-core-1.9.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%229ab346ac5921dc62ffa9f89b7a773907511cdfa5490c572ae9be1be33e8afa4a%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/rayon-core-1.9.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/redox_syscall/redox_syscall-0.2.8.crate",
-        "sha256": "742739e41cd49414de871ea5e549afb7e2a3ac77b589bcbebe8c82fab37147fc",
-        "dest": "cargo/vendor",
-        "dest-filename": "redox_syscall-0.2.8.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22742739e41cd49414de871ea5e549afb7e2a3ac77b589bcbebe8c82fab37147fc%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/redox_syscall-0.2.8",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/redox_users/redox_users-0.4.0.crate",
-        "sha256": "528532f3d801c87aec9def2add9ca802fe569e44a544afe633765267840abe64",
-        "dest": "cargo/vendor",
-        "dest-filename": "redox_users-0.4.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22528532f3d801c87aec9def2add9ca802fe569e44a544afe633765267840abe64%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/redox_users-0.4.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/regex/regex-1.5.3.crate",
-        "sha256": "ce5f1ceb7f74abbce32601642fcf8e8508a8a8991e0621c7d750295b9095702b",
-        "dest": "cargo/vendor",
-        "dest-filename": "regex-1.5.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22ce5f1ceb7f74abbce32601642fcf8e8508a8a8991e0621c7d750295b9095702b%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/regex-1.5.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/regex-syntax/regex-syntax-0.6.25.crate",
-        "sha256": "f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b",
-        "dest": "cargo/vendor",
-        "dest-filename": "regex-syntax-0.6.25.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/regex-syntax-0.6.25",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/remove_dir_all/remove_dir_all-0.5.3.crate",
-        "sha256": "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7",
-        "dest": "cargo/vendor",
-        "dest-filename": "remove_dir_all-0.5.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%223acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/remove_dir_all-0.5.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/rodio/rodio-0.13.1.crate",
-        "sha256": "b65c2eda643191f6d1bb12ea323a9db8d9ba95374e9be3780b5a9fb5cfb8520f",
-        "dest": "cargo/vendor",
-        "dest-filename": "rodio-0.13.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22b65c2eda643191f6d1bb12ea323a9db8d9ba95374e9be3780b5a9fb5cfb8520f%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/rodio-0.13.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/rustc-hash/rustc-hash-1.1.0.crate",
-        "sha256": "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2",
-        "dest": "cargo/vendor",
-        "dest-filename": "rustc-hash-1.1.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2208d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/rustc-hash-1.1.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/rustdct/rustdct-0.4.0.crate",
-        "sha256": "ef4d167674b4cf68c2114bdbcd34c95aa9071652b73b0f43b19298f1d2780b7d",
-        "dest": "cargo/vendor",
-        "dest-filename": "rustdct-0.4.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22ef4d167674b4cf68c2114bdbcd34c95aa9071652b73b0f43b19298f1d2780b7d%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/rustdct-0.4.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/rustfft/rustfft-3.0.1.crate",
-        "sha256": "77008ed59a8923c8b4ac2e5eaa6d28fbe893d3b9515098a4a5fc7767d6430fe5",
-        "dest": "cargo/vendor",
-        "dest-filename": "rustfft-3.0.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2277008ed59a8923c8b4ac2e5eaa6d28fbe893d3b9515098a4a5fc7767d6430fe5%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/rustfft-3.0.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/same-file/same-file-1.0.6.crate",
-        "sha256": "93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502",
-        "dest": "cargo/vendor",
-        "dest-filename": "same-file-1.0.6.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2293fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/same-file-1.0.6",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/scoped_threadpool/scoped_threadpool-0.1.9.crate",
-        "sha256": "1d51f5df5af43ab3f1360b429fa5e0152ac5ce8c0bd6485cae490332e96846a8",
-        "dest": "cargo/vendor",
-        "dest-filename": "scoped_threadpool-0.1.9.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%221d51f5df5af43ab3f1360b429fa5e0152ac5ce8c0bd6485cae490332e96846a8%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/scoped_threadpool-0.1.9",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/scopeguard/scopeguard-1.1.0.crate",
-        "sha256": "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd",
-        "dest": "cargo/vendor",
-        "dest-filename": "scopeguard-1.1.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/scopeguard-1.1.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/serde/serde-1.0.125.crate",
-        "sha256": "558dc50e1a5a5fa7112ca2ce4effcb321b0300c0d4ccf0776a9f60cd89031171",
-        "dest": "cargo/vendor",
-        "dest-filename": "serde-1.0.125.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22558dc50e1a5a5fa7112ca2ce4effcb321b0300c0d4ccf0776a9f60cd89031171%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/serde-1.0.125",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/serde_derive/serde_derive-1.0.125.crate",
-        "sha256": "b093b7a2bb58203b5da3056c05b4ec1fed827dcfdb37347a8841695263b3d06d",
-        "dest": "cargo/vendor",
-        "dest-filename": "serde_derive-1.0.125.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22b093b7a2bb58203b5da3056c05b4ec1fed827dcfdb37347a8841695263b3d06d%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/serde_derive-1.0.125",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/shlex/shlex-0.1.1.crate",
-        "sha256": "7fdf1b9db47230893d76faad238fd6097fd6d6a9245cd7a4d90dbd639536bbd2",
-        "dest": "cargo/vendor",
-        "dest-filename": "shlex-0.1.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%227fdf1b9db47230893d76faad238fd6097fd6d6a9245cd7a4d90dbd639536bbd2%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/shlex-0.1.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/slab/slab-0.4.3.crate",
-        "sha256": "f173ac3d1a7e3b28003f40de0b5ce7fe2710f9b9dc3fc38664cebee46b3b6527",
-        "dest": "cargo/vendor",
-        "dest-filename": "slab-0.4.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22f173ac3d1a7e3b28003f40de0b5ce7fe2710f9b9dc3fc38664cebee46b3b6527%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/slab-0.4.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/slice-deque/slice-deque-0.3.0.crate",
-        "sha256": "31ef6ee280cdefba6d2d0b4b78a84a1c1a3f3a4cec98c2d4231c8bc225de0f25",
-        "dest": "cargo/vendor",
-        "dest-filename": "slice-deque-0.3.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2231ef6ee280cdefba6d2d0b4b78a84a1c1a3f3a4cec98c2d4231c8bc225de0f25%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/slice-deque-0.3.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/smallvec/smallvec-1.6.1.crate",
-        "sha256": "fe0f37c9e8f3c5a4a66ad655a93c74daac4ad00c441533bf5c6e7990bb42604e",
-        "dest": "cargo/vendor",
-        "dest-filename": "smallvec-1.6.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22fe0f37c9e8f3c5a4a66ad655a93c74daac4ad00c441533bf5c6e7990bb42604e%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/smallvec-1.6.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/stdweb/stdweb-0.1.3.crate",
-        "sha256": "ef5430c8e36b713e13b48a9f709cc21e046723fe44ce34587b73a830203b533e",
-        "dest": "cargo/vendor",
-        "dest-filename": "stdweb-0.1.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22ef5430c8e36b713e13b48a9f709cc21e046723fe44ce34587b73a830203b533e%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/stdweb-0.1.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/strength_reduce/strength_reduce-0.2.3.crate",
-        "sha256": "a3ff2f71c82567c565ba4b3009a9350a96a7269eaa4001ebedae926230bc2254",
-        "dest": "cargo/vendor",
-        "dest-filename": "strength_reduce-0.2.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22a3ff2f71c82567c565ba4b3009a9350a96a7269eaa4001ebedae926230bc2254%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/strength_reduce-0.2.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/strsim/strsim-0.8.0.crate",
-        "sha256": "8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a",
-        "dest": "cargo/vendor",
-        "dest-filename": "strsim-0.8.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%228ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/strsim-0.8.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/strsim/strsim-0.9.3.crate",
-        "sha256": "6446ced80d6c486436db5c078dde11a9f73d42b57fb273121e160b84f63d894c",
-        "dest": "cargo/vendor",
-        "dest-filename": "strsim-0.9.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%226446ced80d6c486436db5c078dde11a9f73d42b57fb273121e160b84f63d894c%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/strsim-0.9.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/structopt/structopt-0.3.21.crate",
-        "sha256": "5277acd7ee46e63e5168a80734c9f6ee81b1367a7d8772a2d765df2a3705d28c",
-        "dest": "cargo/vendor",
-        "dest-filename": "structopt-0.3.21.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%225277acd7ee46e63e5168a80734c9f6ee81b1367a7d8772a2d765df2a3705d28c%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/structopt-0.3.21",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/structopt-derive/structopt-derive-0.4.14.crate",
-        "sha256": "5ba9cdfda491b814720b6b06e0cac513d922fc407582032e8706e9f137976f90",
-        "dest": "cargo/vendor",
-        "dest-filename": "structopt-derive-0.4.14.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%225ba9cdfda491b814720b6b06e0cac513d922fc407582032e8706e9f137976f90%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/structopt-derive-0.4.14",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/strum/strum-0.18.0.crate",
-        "sha256": "57bd81eb48f4c437cadc685403cad539345bf703d78e63707418431cecd4522b",
-        "dest": "cargo/vendor",
-        "dest-filename": "strum-0.18.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2257bd81eb48f4c437cadc685403cad539345bf703d78e63707418431cecd4522b%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/strum-0.18.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/strum_macros/strum_macros-0.18.0.crate",
-        "sha256": "87c85aa3f8ea653bfd3ddf25f7ee357ee4d204731f6aa9ad04002306f6e2774c",
-        "dest": "cargo/vendor",
-        "dest-filename": "strum_macros-0.18.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2287c85aa3f8ea653bfd3ddf25f7ee357ee4d204731f6aa9ad04002306f6e2774c%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/strum_macros-0.18.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/subtle/subtle-2.4.0.crate",
-        "sha256": "1e81da0851ada1f3e9d4312c704aa4f8806f0f9d69faaf8df2f3464b4a9437c2",
-        "dest": "cargo/vendor",
-        "dest-filename": "subtle-2.4.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%221e81da0851ada1f3e9d4312c704aa4f8806f0f9d69faaf8df2f3464b4a9437c2%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/subtle-2.4.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/syn/syn-1.0.72.crate",
-        "sha256": "a1e8cdbefb79a9a5a65e0db8b47b723ee907b7c7f8496c76a1770b5c310bab82",
-        "dest": "cargo/vendor",
-        "dest-filename": "syn-1.0.72.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22a1e8cdbefb79a9a5a65e0db8b47b723ee907b7c7f8496c76a1770b5c310bab82%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/syn-1.0.72",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/system-deps/system-deps-1.3.2.crate",
-        "sha256": "0f3ecc17269a19353b3558b313bba738b25d82993e30d62a18406a24aba4649b",
-        "dest": "cargo/vendor",
-        "dest-filename": "system-deps-1.3.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%220f3ecc17269a19353b3558b313bba738b25d82993e30d62a18406a24aba4649b%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/system-deps-1.3.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/tempfile/tempfile-3.2.0.crate",
-        "sha256": "dac1c663cfc93810f88aed9b8941d48cabf856a1b111c29a40439018d870eb22",
-        "dest": "cargo/vendor",
-        "dest-filename": "tempfile-3.2.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22dac1c663cfc93810f88aed9b8941d48cabf856a1b111c29a40439018d870eb22%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/tempfile-3.2.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/textwrap/textwrap-0.11.0.crate",
-        "sha256": "d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060",
-        "dest": "cargo/vendor",
-        "dest-filename": "textwrap-0.11.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/textwrap-0.11.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/thiserror/thiserror-1.0.24.crate",
-        "sha256": "e0f4a65597094d4483ddaed134f409b2cb7c1beccf25201a9f73c719254fa98e",
-        "dest": "cargo/vendor",
-        "dest-filename": "thiserror-1.0.24.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22e0f4a65597094d4483ddaed134f409b2cb7c1beccf25201a9f73c719254fa98e%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/thiserror-1.0.24",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/thiserror-impl/thiserror-impl-1.0.24.crate",
-        "sha256": "7765189610d8241a44529806d6fd1f2e0a08734313a35d5b3a556f92b381f3c0",
-        "dest": "cargo/vendor",
-        "dest-filename": "thiserror-impl-1.0.24.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%227765189610d8241a44529806d6fd1f2e0a08734313a35d5b3a556f92b381f3c0%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/thiserror-impl-1.0.24",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/tiff/tiff-0.6.1.crate",
-        "sha256": "9a53f4706d65497df0c4349241deddf35f84cee19c87ed86ea8ca590f4464437",
-        "dest": "cargo/vendor",
-        "dest-filename": "tiff-0.6.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%229a53f4706d65497df0c4349241deddf35f84cee19c87ed86ea8ca590f4464437%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/tiff-0.6.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/time/time-0.1.43.crate",
-        "sha256": "ca8a50ef2360fbd1eeb0ecd46795a87a19024eb4b53c5dc916ca1fd95fe62438",
-        "dest": "cargo/vendor",
-        "dest-filename": "time-0.1.43.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22ca8a50ef2360fbd1eeb0ecd46795a87a19024eb4b53c5dc916ca1fd95fe62438%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/time-0.1.43",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/tinyvec/tinyvec-1.2.0.crate",
-        "sha256": "5b5220f05bb7de7f3f53c7c065e1199b3172696fe2db9f9c4d8ad9b4ee74c342",
-        "dest": "cargo/vendor",
-        "dest-filename": "tinyvec-1.2.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%225b5220f05bb7de7f3f53c7c065e1199b3172696fe2db9f9c4d8ad9b4ee74c342%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/tinyvec-1.2.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/tinyvec_macros/tinyvec_macros-0.1.0.crate",
-        "sha256": "cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c",
-        "dest": "cargo/vendor",
-        "dest-filename": "tinyvec_macros-0.1.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/tinyvec_macros-0.1.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/toml/toml-0.5.8.crate",
-        "sha256": "a31142970826733df8241ef35dc040ef98c679ab14d7c3e54d827099b3acecaa",
-        "dest": "cargo/vendor",
-        "dest-filename": "toml-0.5.8.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22a31142970826733df8241ef35dc040ef98c679ab14d7c3e54d827099b3acecaa%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/toml-0.5.8",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/transpose/transpose-0.1.0.crate",
-        "sha256": "643e21580bb0627c7bb09e5cedbb42c8705b19d012de593ed6b0309270b3cd1e",
-        "dest": "cargo/vendor",
-        "dest-filename": "transpose-0.1.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22643e21580bb0627c7bb09e5cedbb42c8705b19d012de593ed6b0309270b3cd1e%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/transpose-0.1.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/transpose/transpose-0.2.1.crate",
-        "sha256": "95f9c900aa98b6ea43aee227fd680550cdec726526aab8ac801549eadb25e39f",
-        "dest": "cargo/vendor",
-        "dest-filename": "transpose-0.2.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2295f9c900aa98b6ea43aee227fd680550cdec726526aab8ac801549eadb25e39f%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/transpose-0.2.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/trash/trash-1.3.0.crate",
-        "sha256": "90df96afb154814e214f37eac04920c66886fd95962f22febb4d537b0dacd512",
-        "dest": "cargo/vendor",
-        "dest-filename": "trash-1.3.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2290df96afb154814e214f37eac04920c66886fd95962f22febb4d537b0dacd512%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/trash-1.3.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/typenum/typenum-1.13.0.crate",
-        "sha256": "879f6906492a7cd215bfa4cf595b600146ccfac0c79bcbd1f3000162af5e8b06",
-        "dest": "cargo/vendor",
-        "dest-filename": "typenum-1.13.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22879f6906492a7cd215bfa4cf595b600146ccfac0c79bcbd1f3000162af5e8b06%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/typenum-1.13.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/unicode-segmentation/unicode-segmentation-1.7.1.crate",
-        "sha256": "bb0d2e7be6ae3a5fa87eed5fb451aff96f2573d2694942e40543ae0bbe19c796",
-        "dest": "cargo/vendor",
-        "dest-filename": "unicode-segmentation-1.7.1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22bb0d2e7be6ae3a5fa87eed5fb451aff96f2573d2694942e40543ae0bbe19c796%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/unicode-segmentation-1.7.1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/unicode-width/unicode-width-0.1.8.crate",
-        "sha256": "9337591893a19b88d8d87f2cec1e73fad5cdfd10e5a6f349f498ad6ea2ffb1e3",
-        "dest": "cargo/vendor",
-        "dest-filename": "unicode-width-0.1.8.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%229337591893a19b88d8d87f2cec1e73fad5cdfd10e5a6f349f498ad6ea2ffb1e3%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/unicode-width-0.1.8",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/unicode-xid/unicode-xid-0.2.2.crate",
-        "sha256": "8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3",
-        "dest": "cargo/vendor",
-        "dest-filename": "unicode-xid-0.2.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%228ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/unicode-xid-0.2.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/vec_map/vec_map-0.8.2.crate",
-        "sha256": "f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191",
-        "dest": "cargo/vendor",
-        "dest-filename": "vec_map-0.8.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/vec_map-0.8.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/version-compare/version-compare-0.0.10.crate",
-        "sha256": "d63556a25bae6ea31b52e640d7c41d1ab27faba4ccb600013837a3d0b3994ca1",
-        "dest": "cargo/vendor",
-        "dest-filename": "version-compare-0.0.10.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22d63556a25bae6ea31b52e640d7c41d1ab27faba4ccb600013837a3d0b3994ca1%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/version-compare-0.0.10",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/version_check/version_check-0.9.3.crate",
-        "sha256": "5fecdca9a5291cc2b8dcf7dc02453fee791a280f3743cb0905f8822ae463b3fe",
-        "dest": "cargo/vendor",
-        "dest-filename": "version_check-0.9.3.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%225fecdca9a5291cc2b8dcf7dc02453fee791a280f3743cb0905f8822ae463b3fe%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/version_check-0.9.3",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/walkdir/walkdir-2.3.2.crate",
-        "sha256": "808cf2735cd4b6866113f648b791c6adc5714537bc222d9347bb203386ffda56",
-        "dest": "cargo/vendor",
-        "dest-filename": "walkdir-2.3.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22808cf2735cd4b6866113f648b791c6adc5714537bc222d9347bb203386ffda56%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/walkdir-2.3.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/wasi/wasi-0.10.2+wasi-snapshot-preview1.crate",
-        "sha256": "fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6",
-        "dest": "cargo/vendor",
-        "dest-filename": "wasi-0.10.2+wasi-snapshot-preview1.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/wasi-0.10.2+wasi-snapshot-preview1",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/wasm-bindgen/wasm-bindgen-0.2.73.crate",
-        "sha256": "83240549659d187488f91f33c0f8547cbfef0b2088bc470c116d1d260ef623d9",
-        "dest": "cargo/vendor",
-        "dest-filename": "wasm-bindgen-0.2.73.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2283240549659d187488f91f33c0f8547cbfef0b2088bc470c116d1d260ef623d9%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/wasm-bindgen-0.2.73",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/wasm-bindgen-backend/wasm-bindgen-backend-0.2.73.crate",
-        "sha256": "ae70622411ca953215ca6d06d3ebeb1e915f0f6613e3b495122878d7ebec7dae",
-        "dest": "cargo/vendor",
-        "dest-filename": "wasm-bindgen-backend-0.2.73.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22ae70622411ca953215ca6d06d3ebeb1e915f0f6613e3b495122878d7ebec7dae%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/wasm-bindgen-backend-0.2.73",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/wasm-bindgen-macro/wasm-bindgen-macro-0.2.73.crate",
-        "sha256": "3e734d91443f177bfdb41969de821e15c516931c3c3db3d318fa1b68975d0f6f",
-        "dest": "cargo/vendor",
-        "dest-filename": "wasm-bindgen-macro-0.2.73.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%223e734d91443f177bfdb41969de821e15c516931c3c3db3d318fa1b68975d0f6f%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/wasm-bindgen-macro-0.2.73",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/wasm-bindgen-macro-support/wasm-bindgen-macro-support-0.2.73.crate",
-        "sha256": "d53739ff08c8a68b0fdbcd54c372b8ab800b1449ab3c9d706503bc7dd1621b2c",
-        "dest": "cargo/vendor",
-        "dest-filename": "wasm-bindgen-macro-support-0.2.73.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22d53739ff08c8a68b0fdbcd54c372b8ab800b1449ab3c9d706503bc7dd1621b2c%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/wasm-bindgen-macro-support-0.2.73",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/wasm-bindgen-shared/wasm-bindgen-shared-0.2.73.crate",
-        "sha256": "d9a543ae66aa233d14bb765ed9af4a33e81b8b58d1584cf1b47ff8cd0b9e4489",
-        "dest": "cargo/vendor",
-        "dest-filename": "wasm-bindgen-shared-0.2.73.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22d9a543ae66aa233d14bb765ed9af4a33e81b8b58d1584cf1b47ff8cd0b9e4489%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/wasm-bindgen-shared-0.2.73",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/web-sys/web-sys-0.3.50.crate",
-        "sha256": "a905d57e488fec8861446d3393670fb50d27a262344013181c2cdf9fff5481be",
-        "dest": "cargo/vendor",
-        "dest-filename": "web-sys-0.3.50.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22a905d57e488fec8861446d3393670fb50d27a262344013181c2cdf9fff5481be%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/web-sys-0.3.50",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/weezl/weezl-0.1.5.crate",
-        "sha256": "d8b77fdfd5a253be4ab714e4ffa3c49caf146b4de743e97510c0656cf90f1e8e",
-        "dest": "cargo/vendor",
-        "dest-filename": "weezl-0.1.5.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22d8b77fdfd5a253be4ab714e4ffa3c49caf146b4de743e97510c0656cf90f1e8e%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/weezl-0.1.5",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/which/which-4.1.0.crate",
-        "sha256": "b55551e42cbdf2ce2bedd2203d0cc08dba002c27510f86dab6d0ce304cba3dfe",
-        "dest": "cargo/vendor",
-        "dest-filename": "which-4.1.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22b55551e42cbdf2ce2bedd2203d0cc08dba002c27510f86dab6d0ce304cba3dfe%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/which-4.1.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/winapi/winapi-0.3.9.crate",
-        "sha256": "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419",
-        "dest": "cargo/vendor",
-        "dest-filename": "winapi-0.3.9.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%225c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/winapi-0.3.9",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/winapi-i686-pc-windows-gnu/winapi-i686-pc-windows-gnu-0.4.0.crate",
-        "sha256": "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6",
-        "dest": "cargo/vendor",
-        "dest-filename": "winapi-i686-pc-windows-gnu-0.4.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/winapi-i686-pc-windows-gnu-0.4.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/winapi-util/winapi-util-0.1.5.crate",
-        "sha256": "70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178",
-        "dest": "cargo/vendor",
-        "dest-filename": "winapi-util-0.1.5.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%2270ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/winapi-util-0.1.5",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/winapi-x86_64-pc-windows-gnu/winapi-x86_64-pc-windows-gnu-0.4.0.crate",
-        "sha256": "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f",
-        "dest": "cargo/vendor",
-        "dest-filename": "winapi-x86_64-pc-windows-gnu-0.4.0.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/winapi-x86_64-pc-windows-gnu-0.4.0",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/xxhash-rust/xxhash-rust-0.8.2.crate",
-        "sha256": "e575e15bedf6e57b5c2d763ffc6c3c760143466cbd09d762d539680ab5992ded",
-        "dest": "cargo/vendor",
-        "dest-filename": "xxhash-rust-0.8.2.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%22e575e15bedf6e57b5c2d763ffc6c3c760143466cbd09d762d539680ab5992ded%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/xxhash-rust-0.8.2",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "file",
-        "url": "https://static.crates.io/crates/zip/zip-0.5.12.crate",
-        "sha256": "9c83dc9b784d252127720168abd71ea82bf8c3d96b17dc565b5e2a02854f2b27",
-        "dest": "cargo/vendor",
-        "dest-filename": "zip-0.5.12.crate"
-    },
-    {
-        "type": "file",
-        "url": "data:%7B%22package%22%3A%20%229c83dc9b784d252127720168abd71ea82bf8c3d96b17dc565b5e2a02854f2b27%22%2C%20%22files%22%3A%20%7B%7D%7D",
-        "dest": "cargo/vendor/zip-0.5.12",
-        "dest-filename": ".cargo-checksum.json"
-    },
-    {
-        "type": "shell",
-        "dest": "cargo/vendor",
-        "commands": [
-            "for c in *.crate; do tar -xf $c; done"
-        ]
-    },
-    {
-        "type": "file",
-        "url": "data:%5Bsource.vendored-sources%5D%0Adirectory%20%3D%20%22cargo/vendor%22%0A%0A%5Bsource.crates-io%5D%0Areplace-with%20%3D%20%22vendored-sources%22%0A",
-        "dest": "cargo",
-        "dest-filename": "config"
-    }
-]
\ Nincs új sor a fájl végén
diff -Naur orig/flatpak/com.github.qarmin.czkawka.yaml patched/flatpak/com.github.qarmin.czkawka.yaml
--- orig/flatpak/com.github.qarmin.czkawka.yaml	2021-11-22 06:48:07.000000000 +0100
+++ patched/flatpak/com.github.qarmin.czkawka.yaml	1970-01-01 01:00:00.000000000 +0100
@@ -1,32 +0,0 @@
-app-id: com.github.qarmin.czkawka
-runtime: org.gnome.Platform
-runtime-version: '3.38'
-sdk: org.gnome.Sdk
-sdk-extensions:
-- org.freedesktop.Sdk.Extension.rust-stable
-command: czkawka_gui
-finish-args:
-- "--share=ipc"
-- "--socket=fallback-x11"
-- "--socket=wayland"
-- "--filesystem=host"
-- "--device=dri"
-build-options:
-  append-path: "/usr/lib/sdk/rust-stable/bin"
-  env:
-    CARGO_HOME: "/run/build/czkawka_gui/cargo"
-modules:
-- name: czkawka_gui
-  buildsystem: simple
-  build-commands:
-  - cargo --offline fetch --manifest-path Cargo.toml
-  - cargo --offline build --release
-  - install -Dm755 ./target/release/czkawka_gui -t /app/bin/
-  - install -Dm644 ./data/icons/com.github.qarmin.czkawka.svg -t /app/share/icons/hicolor/scalable/apps/
-  - install -Dm644 ./pkgs/com.github.qarmin.czkawka.desktop -t /app/share/applications/
-  - install -Dm644 ./data/com.github.qarmin.czkawka.metainfo.xml -t /app/share/metainfo
-  sources:
-  - cargo-sources.json
-  - type: git
-    url: https://github.com/qarmin/czkawka.git
-    tag: 3.3.1
diff -Naur orig/.github/workflows/linux.yml patched/.github/workflows/linux.yml
--- orig/.github/workflows/linux.yml	2021-11-22 06:48:07.000000000 +0100
+++ patched/.github/workflows/linux.yml	2021-12-04 17:07:36.874961285 +0100
@@ -14,7 +14,7 @@
       matrix:
         toolchain: [ stable ]
         type: [ release ]
-    runs-on: ubuntu-18.04
+    runs-on: ubuntu-20.04
     steps:
       - uses: actions/checkout@v2
 
@@ -55,8 +55,8 @@
           path: target/release/czkawka_cli
         if: ${{ matrix.type == 'release' }}
 
-# Duplicate finder checks included and excluded directories
-# Others are just check delete files number
+      # Duplicate finder checks included and excluded directories
+      # Others are just check delete files number
       - name: Linux Regression Test
         run: |
           wget https://github.com/qarmin/czkawka/releases/download/1.1.0/TestSuite.zip
@@ -132,7 +132,7 @@
       matrix:
         toolchain: [ stable, 1.53.0 ]
         type: [ release ]
-    runs-on: ubuntu-18.04
+    runs-on: ubuntu-20.04
     steps:
       - uses: actions/checkout@v2
 
@@ -196,7 +196,7 @@
       matrix:
         toolchain: [ stable ]
         type: [ release ]
-    runs-on: ubuntu-18.04
+    runs-on: ubuntu-20.04
     steps:
       - uses: actions/checkout@v2
 
@@ -230,7 +230,7 @@
           chmod +x linuxdeploy-x86_64.AppImage
           mkdir -p AppDir/usr/bin
           cp target/release/czkawka_gui AppDir/usr/bin
-          ./linuxdeploy-x86_64.AppImage --appdir AppDir --plugin gtk --output appimage --icon-file data/icons/com.github.qarmin.czkawka.svg --desktop-file pkgs/com.github.qarmin.czkawka.desktop
+          ./linuxdeploy-x86_64.AppImage --appdir AppDir --plugin gtk --output appimage --icon-file data/icons/com.github.qarmin.czkawka.svg --desktop-file data/com.github.qarmin.czkawka.desktop
 
       - name: Store Linux Appimage GUI
         uses: actions/upload-artifact@v2
diff -Naur orig/.github/workflows/windows.yml patched/.github/workflows/windows.yml
--- orig/.github/workflows/windows.yml	2021-11-22 06:48:07.000000000 +0100
+++ patched/.github/workflows/windows.yml	2021-12-04 17:07:36.874961285 +0100
@@ -54,9 +54,9 @@
           path: target/release/czkawka_cli.exe
         if: ${{ matrix.type == 'release' }}
 
-# Duplicate finder checks included and excluded directories
-# Others are just check delete files number
-# Windows build have some elements changed like powershell before wget and unzip, python instead python3, rm -r  instead rm -r and one (at the top) additional test which check size of characyers
+      # Duplicate finder checks included and excluded directories
+      # Others are just check delete files number
+      # Windows build have some elements changed like powershell before wget and unzip, python instead python3, rm -r  instead rm -r and one (at the top) additional test which check size of characyers
       - name: test
         run: |
           powershell wget https://github.com/qarmin/czkawka/releases/download/1.1.0/TestSuite.zip -O TestSuite.zip
diff -Naur orig/.gitignore patched/.gitignore
--- orig/.gitignore	2021-11-22 06:48:07.000000000 +0100
+++ patched/.gitignore	2021-12-04 17:07:36.874961285 +0100
@@ -6,3 +6,4 @@
 results*.txt
 TestSuite*
 *.snap
+flatpak/
diff -Naur orig/instructions/Compilation.md patched/instructions/Compilation.md
--- orig/instructions/Compilation.md	2021-11-22 06:48:07.000000000 +0100
+++ patched/instructions/Compilation.md	2021-12-04 17:07:36.886961301 +0100
@@ -22,12 +22,12 @@
 ```
 
 #### macOS
-You need to install Rust via Homebrew and GTK Libraries
+You need to install Rust via Homebrew and GTK Libraries(ffmpeg is optional dependency)
 ```shell
 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
 brew install rustup
 rustup-init
-brew install rust gtk+3
+brew install rust gtk+3 adwaita-icon-theme librsvg ffmpeg
 ```
 
 ### Windows
@@ -43,6 +43,11 @@
 
 ## Compilation
 
+Czkawka can be installed with Debug or Release build.  
+With Debug build additional checks e.g. for variables overflow are available but depends of the usage it works very slow so should be using only to develop this app.    
+Compilation with `--release` flag will optimize binaries, so they can be used with good performance(official binaries are build with this flag)
+
+
 - Download the source
 ```
 git clone https://github.com/qarmin/czkawka.git
diff -Naur orig/instructions/Installation.md patched/instructions/Installation.md
--- orig/instructions/Installation.md	2021-11-22 06:48:07.000000000 +0100
+++ patched/instructions/Installation.md	2021-12-04 17:07:36.886961301 +0100
@@ -1,28 +1,34 @@
 # Installation
 ## Requirements
 ### Linux
-If you use Snap, Flatpak or Appimage, you may skip this section.
+If you use Snap, Flatpak or Appimage, you need to only install ffmpeg if you want to use Similar Videos tool.
 
 For Czkawka GUI you are required to have at least `GTK 3.22` and also `Alsa` installed (for finding broken music files, but it is disabled by default).  
+`FFmpeg` in Similar Videos is non required dependency - app will work, but this tool will throw errors, so I recommend to install it.  
 It should be installed by default on all the most popular distros.
-#### Ubuntu/Debian
+#### Ubuntu/Debian/Linux Mint
 ```
-sudo apt install libgtk-3-dev
+sudo apt install libgtk-3-dev ffmpeg
 ```
-#### Fedora/CentOS
+#### Fedora/Rocky Linux
 ```
 sudo yum install gtk3-devel glib2-devel
+sudo dnf -y install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
+sudo dnf -y install https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
+sudo dnf -y install ffmpeg
 ```
 #### Void Linux (CLI only)
 ```
-sudo xbps-install gcc pkg-config alsa-lib-devel
+sudo xbps-install gcc pkg-config alsa-lib-devel ffpmeg
 ```
 
 ### macOS
-Currently, you need to manually install `GTK 3` libraries and the Adwaita theme, because they are dynamically loaded from the OS (*help in linking statically these things is needed*). One very straight-forward way to do this is by using [Homebrew](https://brew.sh/). Installation in the terminal:
+Currently, you need to manually install `GTK 3` libraries, `FFmpeg` and the Adwaita theme, because they are dynamically loaded from the OS.  
+One very straight-forward way to do this is by using [Homebrew](https://brew.sh/).  
+Installation in the terminal:
 ```shell
 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
-brew install gtk+3 adwaita-icon-theme
+brew install gtk+3 adwaita-icon-theme ffmpeg librsvg
 ```
 After that, go to the location where you downloaded Czkawka and add the `executable` permission to this file.
 ```shell
@@ -33,10 +39,18 @@
 ./mac_czkawka_gui
 ```
 
+**Warning**  
+Prebuilt binaries are available only for x86_64, so if you use ARM machine like e.g. Mac M1, you need to compile manually app or install special version of required libraries which can be done via this:
+```shell
+arch -x86_64 /usr/local/bin/brew install gtk+3 adwaita-icon-theme ffmpeg librsvg
+```
+
 ### Windows
 By default, all needed libraries are bundled with the app, inside `windows_czkawka_gui.zip`, but if you compile the app or just move `czkawka_gui.exe`, then you will need to install the `GTK 3`
 runtime from [**here**](https://github.com/tschoonj/GTK-for-Windows-Runtime-Environment-Installer/releases).
 
+FFmpeg to be able to use Similar Videos, you can download and install from this [**link**](https://ffmpeg.org/).
+
 ## Installation
 ### Precompiled binaries
 Ready-to-go executables for Linux, Windows and macOS are available [**here**](https://github.com/qarmin/czkawka/releases/).  
@@ -49,7 +63,7 @@
 ### Appimage
 Appimage files are available in release page - [**GitHub releases**](https://github.com/qarmin/czkawka/releases/)  
 This version is bundled with its own theme.  
-There is also a small problem with not being able to open 2 images at once.
+There is also minimal appimage which use system theme.
 
 ### Cargo
 The easiest method to install Czkawka is using the `cargo` command. To compile it, you need to get all the
@@ -93,10 +107,13 @@
 sudo apt-get install czkawka
 ```
 
+alternatively you can use instruction from this [xtradeb site](https://xtradeb.net/wiki/how-to-install-applications-from-this-web-site/)
+
 ### AUR - Arch Linux Package (unofficial)
 Czkawka is also available in Arch Linux's AUR from which it can be easily installed.
 ```
-yay -Syu czkawka-git
+yay -Syu czkawka-gui
+yay -Syu czkawka-cli
 ```
 or
 ```
@@ -108,3 +125,6 @@
 
 ### Docker image (unofficial)
 Czkawka docker image is available [**here**](https://github.com/jlesage/docker-czkawka)
+
+### Chocolatey (unofficial)
+Windows Chocolatey binaries are available [**here**](https://community.chocolatey.org/packages/czkawka)
\ Nincs új sor a fájl végén
diff -Naur orig/instructions/Instruction.md patched/instructions/Instruction.md
--- orig/instructions/Instruction.md	2021-11-22 06:48:07.000000000 +0100
+++ patched/instructions/Instruction.md	2021-12-04 17:07:36.886961301 +0100
@@ -7,8 +7,6 @@
 - [Tools](#tools)
 
 Czkawka for now contains two independent frontends - the terminal and graphical interface which share the core module.
-Using Rust language without unsafe code helps to create safe, fast, and low resources requirements app.
-This code also has good support for multi-threading.
 
 ## GUI GTK
 <img src="https://user-images.githubusercontent.com/41945903/103002387-14d1b800-452f-11eb-967e-9d5905dd6db5.png" width="800" />
@@ -87,17 +85,23 @@
 
 ## Tips, Tricks and Known Bugs
 - **Manually adding multiple directories**  
-  You can manually edit config file `czkawka_gui_config.txt` and add/remove/change directories as you want. After setting required values, configuration must be loaded to Czkawka.
-- **Slow checking of little number similar images**  
-  If you checked before a large number of images (several tens of thousands) and they are still present on the disk, then the required information  about all of them is loaded from and saved to the cache, even if you are working with only few image files. You can rename one of cache file which starts from `cache_similar_image`(to be able to use it again) or delete it - cache will then regenerate but with smaller number of entries and this way it should load and save a lot of faster.
-- **Not all columns are visible**
+  You can manually edit config file `czkawka_gui_config.txt` and add/remove/change directories as you want. After set required values, configuration must be loaded to Czkawka.
+- **Slow checking of little number similar images/duplicates/broken files**  
+  If you checked before a large number of files (several tens of thousands), then the required information about all of them are loaded and saved to the cache, even if you are working with only few files. You can rename one of cache file which starts from `cache_similar_image`(to be able to use it again) or delete it - cache will then regenerate but with smaller number of entries and this way it should load and save cache faster.
+- **Not all columns are always visible**
   For now it is possible that some columns will not be visible when some are too wide. There are 2 workarounds for now
-    - View can be scrolled via horizontal scroll bar
-    - Size of other columns can be slimmed 
-  
-  This is handled via https://github.com/qarmin/czkawka/issues/169
-
+    - View can be scrolled via horizontal scroll bar (1 on image)
+    - Size of other columns can be slimmed (2 )
+  This is checked if is possible to do in https://github.com/qarmin/czkawka/issues/169
 ![AA](https://user-images.githubusercontent.com/41945903/125684641-728e264a-34ab-41b1-9853-ab45dc25551f.png)
+- **Opening parent folders**
+    - It is possible to open parent folder of selected items with double click with right mouse button(RMB)
+  it is also possible to open such item with double click with left mouse button(LMB).
+- **Faster scanning for big number of duplicates**  
+  By default for all files grouped by same size are computed partial hash(hash from only of 2KB each file). Such hash is computed usually very fast, especially on SSD and fast multicore processors. But when scanning a hundred of thousands or millions of files with HDD or slow processor, usually this step can take much time. In settings exists option `Use prehash cache` which enables caching such things. It is disabled by default because can increase time of loading/saving cache, with big number of entries.
+- **Permanent store of cache entries**  
+  After each scan, entries in cache are validated and outdated ones(which points at non-existent files) are removed. This may be problematic when scanning external drivers(like pendrives, disks etc.) and later unplugging and plugging them again. In settings exists option `Delete outdated cache entries automatically` which automatically clear this, but this can be disabled. Disabling such option may create big cache files, so button `Remove outdated results` will do it manually.
+
 
 # Tools
 
@@ -170,14 +174,6 @@
 
 This only removes the most basic temporary files, for more I suggest to use BleachBit.
 
-### Zeroed Files
-Zeroed files very often are results of e.g. incorrect file downloads.
-
-Their search consists of 3 steps:
-- Collecting a list of all files with a size greater than 0
-- At start, 64 bytes of each file are checked to discard the vast majority of non-zero files without major performance losses.
-- The next step is to check the rest of the file with bigger parts(32KB)
-
 ### Invalid Symlinks
 To find invalid symlinks we must first find symlnks.
 
@@ -241,11 +237,26 @@
 - Smaller hash size not always means that calculating it will take more time
 - `Blockhash` is the only algorithm that don't resize images before hashing
 - `Nearest` resize algorithm can be faster even 5 times than any other available but provide worse results
+
+### Similar Videos
+Tool works similar as Similar Images.  
+
+To work require `FFmpeg`, so it will show an error when it is not found in OS.  
+Also only checks files which are longer than 30s.  
+For now it is limiting to check video files with almost equal length.
+
+At first, it collects video files by extension (`mp4`, `mpv`, `avi` etc.).  
+Next each file is hashed. Implementation is hidden in library but looks that generate 10 images from this video and hash them with help of perceptual hash.
+
+Such hashes are saved to cache to be able to use them later.
+
+Next, with provided by user tolerance, they are compared to each other and group of similar hashes are returned.
+
 ### Broken Files
 This tool finds files which are corrupted or have an invalid extension.
 
-At first files from specific group (image,archive,audio) are collected and then these files are opened.
+At first files from specific group (image,archive,audio) are collected and then these files are opened(due to additional dependencies, audio files are disabled by default).
 
 If an error happens when opening such file it means that this file is corrupted or unsupported.
 
-Only some file extensions are supported, because I rely on external crates. Also, some false positives may be shown(e.g. https://github.com/image-rs/jpeg-decoder/issues/130) so always open file to check if it is really broken.
+Only some file extensions are handled, because I rely on external crates. Also, some false positives may be shown(e.g. https://github.com/image-rs/jpeg-decoder/issues/130) so always open file to check if it is really broken.
diff -Naur orig/LICENSE patched/LICENSE
--- orig/LICENSE	2021-11-22 06:48:07.000000000 +0100
+++ patched/LICENSE	2021-12-04 17:07:36.874961285 +0100
@@ -1,6 +1,6 @@
 MIT License
 
-Copyright (c) 2020 Rafał Mikrut
+Copyright (c) 2020-2021 Rafał Mikrut
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
diff -Naur orig/misc/czkawka-appimage-recipe.yml patched/misc/czkawka-appimage-recipe.yml
--- orig/misc/czkawka-appimage-recipe.yml	2021-11-22 06:48:07.000000000 +0100
+++ patched/misc/czkawka-appimage-recipe.yml	2021-12-04 17:07:36.890961306 +0100
@@ -7,5 +7,5 @@
 script:
   - pwd
   - cp ../../czkawka_gui ./usr/bin/czkawka_gui
-  - cp ../../pkgs/com.github.qarmin.czkawka.desktop .
+  - cp ../../data/com.github.qarmin.czkawka.desktop .
   - cp ../../data/icons/com.github.qarmin.czkawka.svg .
diff -Naur orig/misc/flathub.sh patched/misc/flathub.sh
--- orig/misc/flathub.sh	2021-11-22 06:48:07.000000000 +0100
+++ patched/misc/flathub.sh	2021-12-04 17:07:36.890961306 +0100
@@ -1,5 +1,6 @@
 #!/bin/bash
 pip3 install aiohttp toml
 wget https://raw.githubusercontent.com/flatpak/flatpak-builder-tools/master/cargo/flatpak-cargo-generator.py
+mkdir flatpak
 python3 flatpak-cargo-generator.py ./Cargo.lock -o flatpak/cargo-sources.json
 rm flatpak-cargo-generator.py
diff -Naur orig/pkgs/com.github.qarmin.czkawka.desktop patched/pkgs/com.github.qarmin.czkawka.desktop
--- orig/pkgs/com.github.qarmin.czkawka.desktop	2021-11-22 06:48:07.000000000 +0100
+++ patched/pkgs/com.github.qarmin.czkawka.desktop	1970-01-01 01:00:00.000000000 +0100
@@ -1,10 +0,0 @@
-[Desktop Entry]
-Type=Application
-Terminal=false
-Exec=czkawka_gui
-Name=Czkawka
-Comment=Multi functional app to clean OS which allow to find duplicates, empty folders, similar files etc.
-Icon=com.github.qarmin.czkawka
-Categories=System;
-StartupWMClass=czkawka_gui
-TryExec=czkawka_gui
diff -Naur orig/README.md patched/README.md
--- orig/README.md	2021-11-22 06:48:07.000000000 +0100
+++ patched/README.md	2021-12-04 17:07:36.874961285 +0100
@@ -14,13 +14,13 @@
   or excluded items with the `*` wildcard
 - No spying - Czkawka does not have access to the Internet, nor does it collect any user information or statistics
 - Multiple tools to use:
-  - Duplicates - Finds duplicates based on file name, size, hash, hash of just first 1 MB of a file
+  - Duplicates - Finds duplicates based on file name, size or hash
   - Empty Folders - Finds empty folders with the help of an advanced algorithm
   - Big Files - Finds the provided number of the biggest files in given location
   - Empty Files - Looks for empty files across the drive
   - Temporary Files - Finds temporary files
   - Similar Images - Finds images which are not exactly the same (different resolution, watermarks)
-  - Zeroed Files - Finds files which are filled with zeros (usually corrupted)
+  - Similar Videos - Looks for similar visually videos
   - Same Music - Searches for music with the same artist, album etc.
   - Invalid Symbolic Links - Shows symbolic links which point to non-existent files/directories
   - Broken Files - Finds files with an invalid extension or that are corrupted
@@ -31,6 +31,8 @@
 ## How do I use it?
 You can find the instructions on how to use Czkawka [**here**](instructions/Instruction.md).
 
+Some helpful tricks you can find [**here**](instructions/Instruction.md#tips-tricks-and-known-bugs)
+
 ## Installation
 Installation instructions with download links you can find [**here**](instructions/Installation.md).
 
@@ -101,10 +103,10 @@
 | Temporary files        | •           | •          |                   | •           |
 | Big files              | •           |            |                   |             |
 | Similar images         | •           |            | •                 |             |
-| Zeroed Files           | •           |            |                   |             |
+| Similar videos         | •           |            |                   |             |
 | Music duplicates(tags) | •           |            | •                 |             |
 | Invalid symlinks       | •           | •          |                   |             |
-| Broken Files           | •           |            |                   |             |
+| Broken files           | •           |            |                   |             |
 | Names conflict         | •           | •          |                   |             |
 | Installed packages     |             | •          |                   |             |
 | Invalid names          |             | •          |                   |             |
@@ -118,7 +120,7 @@
 
 ## Other apps
 There are many similar applications to Czkawka on the Internet, which do some things better and some things worse.
-- [DupeGuru](https://github.com/arsenetar/dupeguru) - A lot of options to customize
+- [DupeGuru](https://github.com/arsenetar/dupeguru) - A lot of options to customize, great photo compare tool
 - [FSlint](https://github.com/pixelb/fslint) - A little outdated, but still have some tools not available in Czkawka
 - [Fclones](https://github.com/pkolaczk/fclones) - One of the fastest tools to find duplicates, it is written also in Rust but only in CLI
 
diff -Naur orig/.rustfmt.toml patched/.rustfmt.toml
--- orig/.rustfmt.toml	2021-11-22 06:48:07.000000000 +0100
+++ patched/.rustfmt.toml	2021-12-04 17:07:36.874961285 +0100
@@ -1,4 +1,3 @@
-
 newline_style = "Unix"
 max_width = 250
 remove_nested_parens = true
diff -Naur orig/snap/snapcraft.yaml patched/snap/snapcraft.yaml
--- orig/snap/snapcraft.yaml	2021-11-22 06:48:07.000000000 +0100
+++ patched/snap/snapcraft.yaml	2021-12-04 17:07:36.890961306 +0100
@@ -17,11 +17,11 @@
       - curl
       - gcc
       - git
-    rust-path: ["czkawka_gui"]
+    rust-path: [ "czkawka_gui" ]
 apps:
   czkawka:
     command: bin/czkawka_gui
-    extensions: [gnome-3-38]
+    extensions: [ gnome-3-38 ]
     plugs:
       - home
       - removable-media
