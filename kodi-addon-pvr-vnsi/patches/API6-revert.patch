diff -Naur orig/src/client.cpp patched/src/client.cpp
--- orig/src/client.cpp	2020-05-19 00:54:48.000000000 +0200
+++ patched/src/client.cpp	2020-05-24 22:37:09.957879410 +0200
@@ -63,7 +63,7 @@
  * Standart AddOn related public library functions
  ***********************************************************/
 
-ADDON_STATUS ADDON_Create(void* hdl, const char* globalApiVersion, void* props)
+ADDON_STATUS ADDON_Create(void* hdl, void* props)
 {
   if (!hdl || !props)
     return ADDON_STATUS_UNKNOWN;
@@ -432,13 +432,13 @@
 /*******************************************/
 /** PVR EPG Functions                     **/
 
-PVR_ERROR GetEPGForChannel(ADDON_HANDLE handle, int iChannelUid, time_t iStart, time_t iEnd)
+PVR_ERROR GetEPGForChannel(ADDON_HANDLE handle, const PVR_CHANNEL &channel, time_t iStart, time_t iEnd)
 {
   if (!VNSIData)
     return PVR_ERROR_SERVER_ERROR;
 
   try {
-    return (VNSIData->GetEPGForChannel(handle, iChannelUid, iStart, iEnd) ? PVR_ERROR_NO_ERROR: PVR_ERROR_SERVER_ERROR);
+    return (VNSIData->GetEPGForChannel(handle, channel, iStart, iEnd) ? PVR_ERROR_NO_ERROR: PVR_ERROR_SERVER_ERROR);
   } catch (std::exception e) {
     XBMC->Log(LOG_ERROR, "%s - %s", __FUNCTION__, e.what());
     return PVR_ERROR_SERVER_ERROR;
@@ -853,6 +853,17 @@
   return ret;
 }
 
+bool IsTimeshifting()
+{
+  bool ret = false;
+  if (VNSIDemuxer)
+  {
+    const CLockObject lock(TimeshiftMutex);
+    ret = IsTimeshift;
+  }
+  return ret;
+}
+
 void SetSpeed(int) {};
 void PauseStream(bool bPaused) {}
 
@@ -969,7 +980,6 @@
 PVR_ERROR OpenDialogChannelAdd(const PVR_CHANNEL &channel) { return PVR_ERROR_NOT_IMPLEMENTED; }
 void DemuxReset(void) {}
 void DemuxFlush(void) {}
-void FillBuffer(bool mode) {}
 int ReadLiveStream(unsigned char *pBuffer, unsigned int iBufferSize) { return 0; }
 long long SeekLiveStream(long long iPosition, int iWhence /* = SEEK_SET */) { return -1; }
 long long LengthLiveStream(void) { return -1; }
@@ -978,7 +988,7 @@
 int GetRecordingLastPlayedPosition(const PVR_RECORDING &recording) { return -1; }
 PVR_ERROR GetRecordingSize(const PVR_RECORDING* recording, int64_t* sizeInBytes) { return PVR_ERROR_NOT_IMPLEMENTED; }
 PVR_ERROR SetEPGTimeFrame(int) { return PVR_ERROR_NOT_IMPLEMENTED; }
-PVR_ERROR GetDescrambleInfo(int, PVR_DESCRAMBLE_INFO*) { return PVR_ERROR_NOT_IMPLEMENTED; }
+PVR_ERROR GetDescrambleInfo(PVR_DESCRAMBLE_INFO*) { return PVR_ERROR_NOT_IMPLEMENTED; }
 PVR_ERROR SetRecordingLifetime(const PVR_RECORDING*) { return PVR_ERROR_NOT_IMPLEMENTED; }
 PVR_ERROR GetChannelStreamProperties(const PVR_CHANNEL*, PVR_NAMED_VALUE*, unsigned int*) { return PVR_ERROR_NOT_IMPLEMENTED; }
 PVR_ERROR GetRecordingStreamProperties(const PVR_RECORDING*, PVR_NAMED_VALUE*, unsigned int*) { return PVR_ERROR_NOT_IMPLEMENTED; }
diff -Naur orig/src/VNSIData.cpp patched/src/VNSIData.cpp
--- orig/src/VNSIData.cpp	2020-05-19 00:54:48.000000000 +0200
+++ patched/src/VNSIData.cpp	2020-05-24 22:41:20.518340473 +0200
@@ -287,11 +287,11 @@
   return true;
 }
 
-bool cVNSIData::GetEPGForChannel(ADDON_HANDLE handle, int iChannelUid, time_t start, time_t end)
+bool cVNSIData::GetEPGForChannel(ADDON_HANDLE handle, const PVR_CHANNEL &channel, time_t start, time_t end)
 {
   cRequestPacket vrp;
   vrp.init(VNSI_EPG_GETFORCHANNEL);
-  vrp.add_U32(iChannelUid);
+  vrp.add_U32(channel.iUniqueId);
   vrp.add_U32(start);
   vrp.add_U32(end - start);
 
@@ -307,7 +307,7 @@
     EPG_TAG tag;
     memset(&tag, 0 , sizeof(tag));
 
-    tag.iUniqueChannelId    = iChannelUid;
+    tag.iUniqueChannelId    = channel.iUniqueId;
     tag.iUniqueBroadcastId  = vresp->extract_U32();
     tag.startTime           = vresp->extract_U32();
     tag.endTime             = tag.startTime + vresp->extract_U32();
@@ -328,9 +328,6 @@
     if (tag.strPlotOutline)
       tag.strEpisodeName    = strdup(tag.strPlotOutline);
     tag.iFlags              = EPG_TAG_FLAG_UNDEFINED;
-    tag.iSeriesNumber = EPG_TAG_INVALID_SERIES_EPISODE;
-    tag.iEpisodeNumber = EPG_TAG_INVALID_SERIES_EPISODE;
-    tag.iEpisodePartNumber = EPG_TAG_INVALID_SERIES_EPISODE;
 
     PVR->TransferEpgEntry(handle, &tag);
     free((void*)tag.strEpisodeName);
@@ -897,8 +894,6 @@
     tag.iPriority       = vresp->extract_U32();
     tag.iLifetime       = vresp->extract_U32();
     tag.bIsDeleted      = false;
-    tag.iSeriesNumber = PVR_RECORDING_INVALID_SERIES_EPISODE;
-    tag.iEpisodeNumber = PVR_RECORDING_INVALID_SERIES_EPISODE;
 
     char *strChannelName = vresp->extract_String();
     strncpy(tag.strChannelName, strChannelName, sizeof(tag.strChannelName) - 1);
diff -Naur orig/src/VNSIData.h patched/src/VNSIData.h
--- orig/src/VNSIData.h	2020-05-19 00:54:48.000000000 +0200
+++ patched/src/VNSIData.h	2020-05-24 22:34:24.937573980 +0200
@@ -33,7 +33,7 @@
 
   int         GetChannelsCount();
   bool        GetChannelsList(ADDON_HANDLE handle, bool radio = false);
-  bool        GetEPGForChannel(ADDON_HANDLE handle, int iChannelUid, time_t start, time_t end);
+  bool        GetEPGForChannel(ADDON_HANDLE handle, const PVR_CHANNEL &channel, time_t start, time_t end);
 
   int         GetChannelGroupCount(bool automatic);
   bool        GetChannelGroupList(ADDON_HANDLE handle, bool bRadio);
